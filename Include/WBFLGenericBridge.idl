///////////////////////////////////////////////////////////////////////
// GenericBridge - Generic Bridge Modeling Framework
// Copyright © 1999-2014  Washington State Department of Transportation
//                        Bridge and Structures Office
//
// This library is a part of the Washington Bridge Foundation Libraries
// and was developed as part of the Alternate Route Project
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the Alternate Route Library Open Source License as 
// published by the Washington State Department of Transportation,
// Bridge and Structures Office.
//
// This program is distributed in the hope that it will be useful,
// but is distributed AS IS, WITHOUT ANY WARRANTY; without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
// PURPOSE.  See the Alternate Route Library Open Source License for more details.
//
// You should have received a copy of the Alternate Route Library Open Source License
// along with this program; if not, write to the Washington State
// Department of Transportation, Bridge and Structures Office,
// P.O. Box 47340, Olympia, WA 98503, USA or e-mail
// Bridge_Support@wsdot.wa.gov
///////////////////////////////////////////////////////////////////////

// GenericBridge.idl : IDL source for GenericBridge.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (GenericBridge.tlb) and marshalling code.

//////////////////////////////////////////////////////////////////////////////////////
// The Generic Bridge Model defines a geometric model of a bridge. Geometric properties
// include framing plan geometry (taken from the underlying Bridge Geometry Model),
// and cross sectional geometry. The Generic Bridge Tools objects are used to extract
// much of the geometry from this model.
//
// The stages in this model are simply relative points in time. That is, stage 5 compares after
// stage 4 and before stage 6. There is no other stage related information modeled.
//
// The material properties are stage dependent. That is, they can vary from stage to stage.

import "oaidl.idl";
import "ocidl.idl";

import "WBFLTypes.idl";
import "WBFLTools.idl";
import "WBFLGeometry.idl";
import "WBFLLoading.idl";
import "WBFLCogo.idl";
import "WBFLBridgeGeometry.idl";
import "WBFLSections.idl";

#include "GenericBridge.hh"

// Errors
cpp_quote("#define GB_E_NUMGIRDERLINES               MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,512)")
cpp_quote("#define GB_E_PIERINDEX                    MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,513)")
cpp_quote("#define GB_E_SPANINDEX                    MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,514)")
cpp_quote("#define GB_E_SPACEINDEX                   MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,515)")
cpp_quote("#define GB_E_SPACING                      MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,516)")
cpp_quote("#define GB_E_AREA                         MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,517)")
cpp_quote("#define GB_E_MOMENTOFINERTIA              MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,518)")
cpp_quote("#define GB_E_MODULUSOFELASTICITY          MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,519)")
cpp_quote("#define GB_E_DENSITY                      MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,520)")
cpp_quote("#define GB_E_WIDTH                        MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,521)")
cpp_quote("#define GB_E_THERMALCOEFF                 MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,522)")
cpp_quote("#define GB_E_LENGTH                       MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,523)")
cpp_quote("#define GB_E_CANTLINKSOURCE               MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,524)")
cpp_quote("#define GB_E_CANTLINKTOSELF               MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,525)")
cpp_quote("#define GB_E_CANTEDITLINKTARGET           MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,526)")
cpp_quote("#define GB_E_NO_SEGMENTS_FOR_STAGE        MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,527)")
cpp_quote("#define GB_E_LOCATION_OUT_OF_RANGE        MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,528)")
cpp_quote("#define GB_E_LESS_THAN_MIN_GIRDER_LINES   MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,529)")
cpp_quote("#define GB_E_STAGE_NOT_FOUND              MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,530)")
cpp_quote("#define GB_E_LOCATION                     MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,531)")
cpp_quote("#define GB_E_INVALID_NAME                 MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,532)")
cpp_quote("#define GB_E_DUPLICATENAME                MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,533)")
cpp_quote("#define GB_E_FRACTIONAL_EXPECTED          MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,534)")
cpp_quote("#define GB_E_ABSOLUTE_EXPECTED            MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,535)")
cpp_quote("#define GB_E_ID_IN_USE                    MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,536)")
cpp_quote("#define GB_E_OVERHANG                     MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,537)")
cpp_quote("#define GB_E_LESS_THAN_MIN_COLUMNS        MAKE_HRESULT(SEVERITY_ERROR,FACILITY_ITF,538)")


[
	uuid(44ECDFCD-A740-4B05-8139-7AB55E18AA92),
	version(1.0),
	helpstring("WBFLGenericBridge Library")
]
library WBFLGenericBridge
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

   interface IRebarLayoutItem;
   interface IBridgeDeckRebarLayoutItem;
   interface IGenericBridge;
   interface ISuperstructureMember;
   interface ILongitudinalPierDescription;
   interface ITransversePierDescription;
   interface ISpan;
   interface IVoidedSlabSection2;
   interface IDeckedSlabBeamSection;
   interface IBoxBeamSection;
   interface IUGirderSection;
   interface IUGirderSection2;
   
// Enumerators

   typedef [public,helpstring("enum RebarRowOrientation"),uuid(28251F79-72F8-4d9d-85EB-55426AC53CC6)]
   enum 
   {
		rroRight,   // horizontal row towards the right, anchor at left edge
		rroHCenter, // horizontal row, anchor at center
		rroLeft,    // horizontal row towards the left, anchor at right edge
		rroDown,    // vertical row downwards, anchor at top
		rroVCenter, // vertical row, anchor at center
		rroUp       // vertical row upwards, anchor at bottom
   } RebarRowOrientation;

   typedef [public,helpstring("enum MaterialSpec"),uuid(6033AA61-EB06-469e-8743-CFA09545FE96)]
   enum 
   {
      msA615,
      msA706,
      msA1035
   } MaterialSpec;

   typedef [public,helpstring("enum RebarGrade"),uuid(3DB21D7F-CA67-453a-9E62-FE9989BBBEA7)]
   enum 
   {
		Grade40,
		Grade60,
		Grade75,
      Grade80,
      Grade100
   } RebarGrade;

   typedef [public,helpstring("enum BarSize"),uuid(FCC0993E-988B-4bf2-A708-094AC20B51BA)]
   enum 
   {
		bs3 = 3, 
		bs4 = 4,
		bs5 = 5,
		bs6 = 6,
		bs7 = 7,
		bs8 = 8,
		bs9 = 9,
		bs10 = 10,
		bs11 = 11,
		bs14 = 14,
		bs18 = 18
   } BarSize;

   typedef [public,helpstring("enum SidewalkPositionType"),uuid(F7126E78-8EDF-4af7-9CFA-59C2D1F6C6B1)] 
   enum 
   {
       swpBetweenBarriers = 0,
       swpBeneathBarriers = 1
   } SidewalkPositionType;

   typedef [public,helpstring("enum PositionType"),uuid(8C1F0B6B-3B40-4fe2-9C66-446CCA864D2F)] 
   enum 
   {
       qcbBefore = 0,
       qcbAfter  = 1
   } PositionType;

   typedef [public,helpstring("enum DirectionType"),uuid(A81D53DF-CEBD-4865-8D20-E0CD40DEAAE2)] 
   enum 
   {
       qcbLeft  = 0,
       qcbRight = 1
   } DirectionType;

   typedef [public,helpstring("enum LocationType"),uuid(F0FF5886-CD4D-41B7-A21D-EBB9E14D502A)]
   enum
   {
      ltLeftExteriorGirder  = 0,
      ltInteriorGirder      = 1,
      ltRightExteriorGirder = 2
   } LocationType;

   typedef [public,helpstring("enum ConnectivityType"),uuid(E6935478-50D4-4399-B21F-45779FD71638)] 
   enum 
   {
       ctRoller   = 0, // Used for simple support (zero height pier)
       ctPinned   = 1, // Used for simple support (zero height pier)
       ctIntegral = 2, // Used for fized height pier
       ctHinged   = 3, // Used for fixed height pier
       ctHingedIntegral = 4 // Used for fixed height pier (hinged to a given stage, then integral)
   } ConnectivityType;

   typedef [public,helpstring("enum OffsetType"),uuid(5C89BEE6-F3D8-4b53-BE40-ED22204221EA)] 
   enum 
   {
       otAlignment = 0,
       otBridge = 1
   } OffsetType;

   typedef [public,helpstring("enum ReleaseType"),uuid(692EA3D4-3C08-4890-BBAC-702E7734E5B0)] 
   enum 
   {
      rtNone   = 0,
      rtHinged = 1
   } ReleaseType;

   typedef [public,helpstring("enum DeckOverhangTaper"),uuid(502711DE-D90C-4fb3-A117-15333D8C7EE5)] 
   enum 
   {
      dotNone            = 0,  // No taper, constant thickness deck in overhanges
      dotTopTopFlange    = 1,  // Taper overhang to top of girder top flange
      dotBottomTopFlange = 2   // Taper overhang to bottom of girder top flange
   } DeckOverhangTaper;

   typedef [public,helpstring("enum PierPointType"),uuid(426B4471-70BD-472d-B5CD-24770B37738D)] 
   enum 
   {
      pptLeft      = 1,  // left edge of pier
      pptAlignment = 2,  // intersection centerline pier and centerline alignment
      pptRight     = 3,  // right edge of pier
 	   pptBridge    = 4   // intersection centerline pier and centerline bridge
   } PierPointType;

   typedef [public,helpstring("enum TendonMeasure"),uuid(0AF9E9B3-BD55-4656-930E-9F1A528574F7)]
   enum 
   {
      tmTendon = 1, // measurement along the tendon in a duct/path
	   tmPath   = 2  // measurement along the centerline of the duct/path
   } TendonMeasure;

   typedef [public,helpstring("enum JackingEndType"),uuid(7DA23C65-4705-4351-81D9-08AF102984EF)]
   enum
   {
      jeLeft,
      jeRight,
      jeBoth
   } JackingEndType;


   typedef [public,helpstring("enum StrandGrade"),uuid(703D2C89-8DC1-44c5-A8EE-2797F823232A)]
   enum 
   {
      Grade250 = 0x0001,
	   Grade270 = 0x0002 
   } StrandGrade;

   typedef [public,helpstring("enum StrandType"),uuid(11E75BB6-8E13-4ac2-A608-F13FAC0577D9)]
   enum 
   {
      LowRelaxation = 0x0004,
	  StressRelieved = 0x0008 
   } StrandType;

   typedef [public,helpstring("enum StrandSize"),uuid(B853E36E-FD4B-4e20-A8B0-2EC1E605EB97)]
   enum { 
      D2500 = 0x0010,// 1/4"
      D3125 = 0x0020,// 5/16"
      D3750 = 0x0040,// 3/8"
      D4375 = 0x0080,// 7/16"
      D5000 = 0x0100,// 1/2"
      D6000 = 0x0200,// 0.6"
      D7000 = 0x0400,// 0.7"
      D5200 = 0x0800,// 1/2 HBS (Special)
      D6200 = 0x1000,// 0.62"
   } StrandSize;

   typedef [public,helpstring("enum SplittingDirection"),uuid(E32B1A87-2444-42e3-878E-CD5742837900)]
   enum 
   {
      sdVertical,
      sdHorizontal
   } SplittingDirection;

   typedef [public,helpstring("enum SegmentZoneType"),uuid(35DFB6BF-F01C-45E9-8E05-A88A78AE934B)]
   enum
   {
      sztLeftPrismatic,
      sztLeftTapered,
      sztRightTapered,
      sztRightPrismatic
   } SegmentZoneType;

   typedef [public,helpstring("enum SegmentVariationType"),uuid(C347973D-CC50-4AE0-81FC-7FD0F1438531)]
   enum
   {
      svtLinear,        // linear variation from one end to the other
      svtParabolic,     // similar to linear, except with a parabolic transition
      svtDoubleLinear,    // linear segments on each side of pier
      svtDoubleParabolic, // parabolic segments on each side of pier
      svtNone
   } SegmentVariationType;

// Interface definitions

   [
      object,
	  oleautomation,
	  uuid(262B5A19-8911-45de-A53D-DC7CDB73809E),
	  helpstring("IEffectiveFlangeWidthDetails"),
	  pointer_default(unique)
   ]
   interface IEffectiveFlangeWidthDetails : IUnknown
   {
	  [propput] HRESULT EffectiveSpanLength([in] Float64 length);
	  [propget] HRESULT EffectiveSpanLength([out,retval] Float64* length);
	  [propput] HRESULT SlabThickness([in] Float64 tSlab);
	  [propget] HRESULT SlabThickness([out,retval] Float64* tSlab);
	  [] HRESULT AddFlangeParameters([in]Float64 tWeb,[in]Float64 wFlange,[in]Float64 lSpacing,[in]Float64 rSpacing);
	  [propget] HRESULT FlangeCount([out,retval]FlangeIndexType* nFlange);
	  [] HRESULT GetFlangeParameters([in] FlangeIndexType flangeIdx,[out]Float64* tWeb,[out]Float64* wFlange,[out]Float64* lSpacing,[out]Float64* rSpacing);

	  [] HRESULT EffectiveFlangeWidth([out,retval] Float64* effFlangeWidth);
   };

	[
		object,
		oleautomation,
		uuid(ACD48CEC-704A-417D-B070-30DA37BAFFB4),
		helpstring("IEffectiveFlangeWidthTool Interface"),
		pointer_default(unique)
	]
	interface IEffectiveFlangeWidthTool : IUnknown
	{
      [helpstring("method TributaryFlangeWidthBySSMbr")] HRESULT TributaryFlangeWidthBySSMbr([in]IGenericBridge* bridge,[in]GirderIDType ssMbrID,[in]Float64 distFromStartOfSSMbr, [in]GirderIDType leftSSMbrID, [in] GirderIDType rightSSMbrID, [out,retval]Float64 *tribFlangeWidth);
      [helpstring("method TributaryFlangeWidthBySSMbrEx")] HRESULT TributaryFlangeWidthBySSMbrEx([in]IGenericBridge* bridge,[in]GirderIDType ssMbrID,[in]Float64 distFromStartOfSSMbr, [in]GirderIDType leftSSMbrID, [in] GirderIDType rightSSMbrID, [out] Float64* twLeft,[out]Float64* twRight,[out]Float64 *tribFlangeWidth);
      [helpstring("method TributaryFlangeWidthBySegment")] HRESULT TributaryFlangeWidthBySegment([in]IGenericBridge* bridge,[in]GirderIDType ssMbrID,[in]SegmentIndexType segIdx,[in]Float64 distFromStartOfSegment, [in]GirderIDType leftSSMbrID, [in] GirderIDType rightSSMbrID, [out,retval]Float64 *tribFlangeWidth);
      [helpstring("method TributaryFlangeWidthBySegmentEx")] HRESULT TributaryFlangeWidthBySegmentEx([in]IGenericBridge* bridge,[in]GirderIDType ssMbrID,[in]SegmentIndexType segIdx,[in]Float64 distFromStartOfSegment, [in]GirderIDType leftSSMbrID, [in] GirderIDType rightSSMbrID, [out] Float64* twLeft,[out]Float64* twRight,[out]Float64 *tribFlangeWidth);

	   [helpstring("method EffectiveFlangeWidthBySSMbr")] HRESULT EffectiveFlangeWidthBySSMbr([in]IGenericBridge* bridge,[in]GirderIDType ssMbrID,[in]Float64 distFromStartOfSSMbr, [in]GirderIDType leftSSMbrID, [in] GirderIDType rightSSMbrID, [out,retval]Float64 *effFlangeWidth);
	   [helpstring("method EffectiveFlangeWidthBySSMbrEx")] HRESULT EffectiveFlangeWidthBySSMbrEx([in]IGenericBridge* bridge,[in]GirderIDType ssMbrID,[in]Float64 distFromStartOfSSMbr, [in]GirderIDType leftSSMbrID, [in] GirderIDType rightSSMbrID, [out,retval]IEffectiveFlangeWidthDetails** details);
	   [helpstring("method EffectiveFlangeWidthBySegment")] HRESULT EffectiveFlangeWidthBySegment([in]IGenericBridge* bridge,[in]GirderIDType ssMbrID,[in] SegmentIndexType segIdx,[in]Float64 distFromStartOfSegment, [in]GirderIDType leftSSMbrID, [in] GirderIDType rightSSMbrID, [out,retval]Float64 *effFlangeWidth);
	   [helpstring("method EffectiveFlangeWidthBySegmentEx")] HRESULT EffectiveFlangeWidthBySegmentEx([in]IGenericBridge* bridge,[in]GirderIDType ssMbrID,[in] SegmentIndexType segIdx,[in]Float64 distFromStartOfSegment, [in]GirderIDType leftSSMbrID, [in] GirderIDType rightSSMbrID, [out,retval]IEffectiveFlangeWidthDetails** details);
   };

   // IRebar defines a basic piece of reinforcing steel
	[
		object,
		uuid(6D610B2E-6D62-45d9-AE5D-2F8159D4B2CC),
		oleautomation,
		helpstring("IRebar Interface"),
		pointer_default(unique)
	]
	interface IRebar : IUnknown
	{
		[helpstring("method Init")] HRESULT Init([in] BSTR name,[in] Float64 Es,[in] Float64 density,[in] Float64 fpu,[in] Float64 fpy,[in] Float64 db,[in] Float64 Ab,[in] StageIndexType stageIdx);
		[propget, helpstring("property Name")] HRESULT Name([out,retval] BSTR* name);
		[propput, helpstring("property Name")] HRESULT Name([in] BSTR name);
		[propget, helpstring("property UltimateStrength")] HRESULT UltimateStrength([out,retval] Float64* fpu);
		[propput, helpstring("property UltimateStrength")] HRESULT UltimateStrength([in] Float64 fpu);
		[propget, helpstring("property YieldStrength")] HRESULT YieldStrength([out,retval] Float64* fpy);
		[propput, helpstring("property YieldStrength")] HRESULT YieldStrength([in] Float64 fpy);
		[propget, helpstring("property NominalDiameter")] HRESULT NominalDiameter([out,retval] Float64* db);
		[propput, helpstring("property NominalDiameter")] HRESULT NominalDiameter([in] Float64 db);
		[propget, helpstring("property NominalArea")] HRESULT NominalArea([out,retval] Float64* Ab);
		[propput, helpstring("property NominalArea")] HRESULT NominalArea([in] Float64 Ab);
		[propget, helpstring("property InstallationStage")] HRESULT InstallationStage([out,retval] StageIndexType* pStageIdx);
		[propput, helpstring("property InstallationStage")] HRESULT InstallationStage([in] StageIndexType stageIdx);
      [helpstring("method Clone")] HRESULT Clone([out,retval]IRebar** ppClone);
	};

	[
		object,
		uuid(E873B37D-4E71-4e72-9ED0-1B05E5AC6089),
		oleautomation,
		helpstring("IRebarFactory Interface"),
		pointer_default(unique)
	]
	interface IRebarFactory : IUnknown
	{
	   [helpstring("method CreateRebar")] HRESULT CreateRebar([in] MaterialSpec spec, [in] RebarGrade grade, [in] BarSize size, [in] IUnitConvert* convert, [in] StageIndexType stageIdx,[out,retval] IRebar** rebar);
	};

   // Defines the cross section of a rebar in a section cut. The rebar is defined by
   /// its location, distance from start and end of the bar, and a rebar object.
	[
		object,
		uuid(450B480F-A093-4e5e-BA48-A405055A3844),
		oleautomation,
		helpstring("IRebarSectionItem Interface"),
		pointer_default(unique)
	]
	interface IRebarSectionItem : IUnknown
	{
      [helpstring("method Init")] HRESULT Init([in]IPoint2d* location,[in]Float64 distFromStart,[in]Float64 distFromEnd,[in]IRebar* rebar);
		[propget,helpstring("property Location")] HRESULT Location([out,retval]IPoint2d** location);
		[propget,helpstring("property LeftExtension - Distance from cut to left end of bar")] HRESULT LeftExtension([out,retval] Float64* dist);
		[propget,helpstring("property RightExtension - Distance from cut to right end of bar")] HRESULT RightExtension([out,retval] Float64* dist);
		[propget,helpstring("property Rebar")] HRESULT Rebar([out,retval] IRebar** rebar);
	};

	[
	   object,
	   uuid(9FD3BB0E-1AE0-4421-B44C-76AF46077068),
	   helpstring("IEnumRebarSectionItem Interface"),
       oleautomation,nonextensible,
	   hidden,restricted,
	   pointer_default(unique)
	]
	interface IEnumRebarSectionItem : IUnknown
	{
       [helpstring("Clone")] HRESULT Clone([out] IEnumRebarSectionItem** ppenum);
 	   [helpstring("Next")]  HRESULT Next([in] ULONG celt, [out] IRebarSectionItem** rgelt, [in,out] ULONG* pceltFetched);
	   [helpstring("Reset")] HRESULT Reset();
	   [helpstring("Skip")]  HRESULT Skip([in] ULONG celt);
	};

   // Defines all of the rebar that exist at a cross section.
   // Rebar sections are created by RebarLayout objects
	[
		object,
		uuid(BC1C7976-D479-4c25-9869-A449B0EDAFBC),
		oleautomation,
		helpstring("IRebarSection Interface"),
		pointer_default(unique)
	]
	interface IRebarSection : IUnknown
	{
		[helpstring("method Add")] HRESULT Add([in]IRebarSectionItem* item);
		[propget,helpstring("property Count")] HRESULT Count([out,retval] CollectionIndexType* count);
		[propget,helpstring("property Item")] HRESULT Item([in]CollectionIndexType idx,[out,retval]IRebarSectionItem** item);
        [propget, restricted, helpstring("returns an enumerator for the collection.")] HRESULT _NewEnum([out, retval] IUnknown** retval);  
        [propget, restricted, helpstring("property _EnumRebarSectionItem")] HRESULT _EnumRebarSectionItem([out,retval]IEnumRebarSectionItem** enumRSI);
	};

   // Defines are pattern of rebar objects. A rebar pattern defines the location of rebars in
   // a cross section. The length of the bars are defined by the associated layout item.
	[
		object,
		uuid(70D6E658-49B9-491d-B4DF-156457A835B8),
		oleautomation,
		helpstring("IRebarPattern Interface"),
		pointer_default(unique)
	]
	interface IRebarPattern : IUnknown
	{
		[propputref,helpstring("property Rebar")] HRESULT Rebar([in]IRebar* rebar);
		[propget,helpstring("property Rebar")] HRESULT Rebar([out,retval]IRebar** rebar);
		[propputref,helpstring("property RebarLayoutItem")] HRESULT RebarLayoutItem([in]IRebarLayoutItem* rebarLayoutItem);
		[propget,helpstring("property Count")] HRESULT Count([out,retval]CollectionIndexType* count);
		[propget,helpstring("property Location")] HRESULT Location([in] Float64 distFromStartOfPattern,[in]CollectionIndexType barIdx,[out,retval]IPoint2d** location);
	};

   // A pattern of rebar defined by a horizontal or vertical row
	[
		object,
		uuid(200FB0A9-E906-4b1e-A2D0-01BBE933CB6C),
		oleautomation,
		helpstring("IRebarRowPattern Interface"),
		pointer_default(unique)
	]
	interface IRebarRowPattern : IRebarPattern
	{
		[propput,helpstring("property AnchorPoint")] HRESULT AnchorPoint([in] EndType endType,[in]IPoint2d* anchorPt);
		[propget,helpstring("property AnchorPoint")] HRESULT AnchorPoint([in] EndType endType,[out,retval]IPoint2d** anchorPt);
		[propput,helpstring("property Count")] HRESULT Count([in]RowIndexType count);
		[propput,helpstring("property Spacing")] HRESULT Spacing([in]Float64 spacing);
		[propget,helpstring("property Spacing")] HRESULT Spacing([out,retval]Float64* spacing);
		[propput,helpstring("property Oreintation")] HRESULT Orientation([in]RebarRowOrientation oreintation);
		[propget,helpstring("property Oreintation")] HRESULT Orientation([out,retval]RebarRowOrientation* oreintation);
	};

	[
	   object,
	   uuid(61D6DF2E-6BA5-4ba4-B045-F57DFC16F973),
	   helpstring("IEnumRebarPatterns Interface"),
       oleautomation,nonextensible,
	   hidden,restricted,
	   pointer_default(unique)
	]
	interface IEnumRebarPatterns : IUnknown
	{
       [helpstring("Clone")] HRESULT Clone([out] IEnumRebarPatterns** ppenum);
 	   [helpstring("Next")]  HRESULT Next([in] ULONG celt, [out] IRebarPattern** rgelt, [in,out] ULONG* pceltFetched);
	   [helpstring("Reset")] HRESULT Reset();
	   [helpstring("Skip")]  HRESULT Skip([in] ULONG celt);
	};

   // Defines are pattern of rebar objects. 
	[
		object,
		uuid(C9AE211E-037B-4c52-BDAE-22520DFCE2B9),
		oleautomation,
		helpstring("IBridgeDeckRebarPattern Interface"),
		pointer_default(unique)
	]
	interface IBridgeDeckRebarPattern : IUnknown
	{
		[propputref,helpstring("property Rebar")] HRESULT Rebar([in]IRebar* rebar);
		[propget,helpstring("property Rebar")] HRESULT Rebar([out,retval]IRebar** rebar);
		[propputref,helpstring("property RebarLayoutItem")] HRESULT RebarLayoutItem([in]IBridgeDeckRebarLayoutItem* rebarLayoutItem);
		[propput,helpstring("property Spacing")] HRESULT Spacing([in]Float64 spacing);
		[propget,helpstring("property Spacing")] HRESULT Spacing([out,retval]Float64* spacing);
		[propput,helpstring("property Location")] HRESULT Location([in]Float64 y);
		[propget,helpstring("property Location")] HRESULT Location([out,retval]Float64* pY);
      [propput,helpstring("property IsLumped")] HRESULT IsLumped([in]VARIANT_BOOL bIsLumped);
      [propget,helpstring("property IsLumped")] HRESULT IsLumped([out,retval]VARIANT_BOOL* pbIsLumped);
	};

	[
	   object,
	   uuid(1B13A045-FE2F-41fb-8A64-0F0DCE0CB281),
	   helpstring("IEnumBridgeDeckRebarPatterns Interface"),
       oleautomation,nonextensible,
	   hidden,restricted,
	   pointer_default(unique)
	]
	interface IEnumBridgeDeckRebarPatterns : IUnknown
	{
       [helpstring("Clone")] HRESULT Clone([out] IEnumBridgeDeckRebarPatterns** ppenum);
 	   [helpstring("Next")]  HRESULT Next([in] ULONG celt, [out] IBridgeDeckRebarPattern** rgelt, [in,out] ULONG* pceltFetched);
	   [helpstring("Reset")] HRESULT Reset();
	   [helpstring("Skip")]  HRESULT Skip([in] ULONG celt);
	};

   // Defines a rebar layout item. A rebar layout item defines the longitudinal extents (start and stop points)
   // of a group of rebar patterns.
	[
	   object,
	   uuid(63465C7F-7036-43c3-95C1-D49A13271A68),
	   oleautomation,
	   helpstring("IRebarLayoutItem Interface"),
	   pointer_default(unique)
	]
	interface IRebarLayoutItem : IUnknown
	{
	   [helpstring("method ContainsLocation")] HRESULT ContainsLocation([in] Float64 distFromStart,[out,retval] VARIANT_BOOL* bResult);
	   [propget,helpstring("property Start")] HRESULT Start([out,retval]Float64* start);
	   [propget,helpstring("property Length")] HRESULT Length([out,retval]Float64* length);
	   [propget,helpstring("property Count")] HRESULT Count([out,retval]CollectionIndexType* count);
	   [propget,helpstring("property Item")] HRESULT Item([in] CollectionIndexType idx,[out,retval]IRebarPattern** pattern);
	   [helpstring("mehtod AddRebarPattern")] HRESULT AddRebarPattern([in]IRebarPattern* pattern);
       [propget, restricted, helpstring("returns an enumerator for the collection.")] HRESULT _NewEnum([out, retval] IUnknown** retval);  
       [propget, restricted, helpstring("property _EnumRebarPatterns")] HRESULT _EnumRebarPatterns([out,retval]IEnumRebarPatterns** enumRebarPatterns);
	};

   // Interface for rebar layouts that have a fixed length
   [
	   object,
	   uuid(5471ADD4-FB20-4694-A4F2-0267447AAE3E),
	   dual,
	   nonextensible,
	   helpstring("IFixedLengthRebarLayoutItem Interface"),
	   pointer_default(unique)
   ]
   interface IFixedLengthRebarLayoutItem : IRebarLayoutItem
   {
	   [propput,helpstring("property Start")] HRESULT Start([in]Float64 start);
	   [propput,helpstring("property End")] HRESULT End([in]Float64 end);
	   [propget,helpstring("property End")] HRESULT End([out,retval] Float64* end);
   };


   // Defines rebar that runs the full length of the bridge deck
   [
		object,
		uuid(D9CDC505-C445-4547-8C36-D781C1692EF6),
		oleautomation,
		helpstring("IBridgeDeckRebarLayoutItem Interface"),
		pointer_default(unique)
	]
	interface IBridgeDeckRebarLayoutItem : IUnknown
	{
	   [helpstring("method ContainsLocation")] HRESULT ContainsLocation([in] Float64 distFromStart,[out,retval] VARIANT_BOOL* bResult);
	   [propget,helpstring("property Start")] HRESULT Start([out,retval]Float64* start);
	   [propget,helpstring("property Length")] HRESULT Length([out,retval]Float64* length);
	   [propget,helpstring("property Item")] HRESULT Item([in] CollectionIndexType idx,[out,retval]IBridgeDeckRebarPattern** pattern);
	   [helpstring("mehtod AddRebarPattern")] HRESULT AddRebarPattern([in]IBridgeDeckRebarPattern* pattern);
       [propget, restricted, helpstring("returns an enumerator for the collection.")] HRESULT _NewEnum([out, retval] IUnknown** retval);  
       [propget, restricted, helpstring("property _EnumRebarPatterns")] HRESULT _EnumRebarPatterns([out,retval]IEnumBridgeDeckRebarPatterns** enumRebarPatterns);

      [propputref,helpstring("property Bridge")] HRESULT Bridge([in]IGenericBridge* pBridge);
	};

   // Defines negative moment rebar over a pier in the bridge deck
   [
		object,
		uuid(EA709870-6420-48ee-AB07-03BABE4F979C),
		oleautomation,
		helpstring("INegativeMomentBridgeDeckRebarLayoutItem Interface"),
		pointer_default(unique)
	]
	interface INegativeMomentBridgeDeckRebarLayoutItem : IBridgeDeckRebarLayoutItem
	{
      [propput,helpstring("property Pier")] HRESULT Pier([in]PierIndexType pierIdx);
      [propget,helpstring("property Pier")] HRESULT Pier([out,retval]PierIndexType* pPierIdx);
      [propput,helpstring("property LeftCutoff")] HRESULT LeftCutoff([in]Float64 coLeft);
      [propget,helpstring("property LeftCutoff")] HRESULT LeftCutoff([out,retval]Float64* pcoLeft);
      [propput,helpstring("property RightCutoff")] HRESULT RightCutoff([in]Float64 coRight);
      [propget,helpstring("property RightCutoff")] HRESULT RightCutoff([out,retval]Float64* pcoRight);
	};

	[
	   object,
	   uuid(216C0A97-4C1C-4584-BCD9-5F5C9CFB6511),
	   helpstring("IEnumRebarLayoutItems Interface"),
       oleautomation,nonextensible,
	   hidden,restricted,
	   pointer_default(unique)
	]
	interface IEnumRebarLayoutItems : IUnknown
	{
      [helpstring("Clone")] HRESULT Clone([out] IEnumRebarLayoutItems** ppenum);
 	   [helpstring("Next")]  HRESULT Next([in] ULONG celt, [out] IRebarLayoutItem** rgelt, [in,out] ULONG* pceltFetched);
	   [helpstring("Reset")] HRESULT Reset();
	   [helpstring("Skip")]  HRESULT Skip([in] ULONG celt);
	};

	[
	   object,
	   uuid(306F8277-C7FD-46dd-B2F5-1AF20716DF9A),
	   helpstring("IEnumBridgeDeckRebarLayoutItems Interface"),
       oleautomation,nonextensible,
	   hidden,restricted,
	   pointer_default(unique)
	]
	interface IEnumBridgeDeckRebarLayoutItems : IUnknown
	{
      [helpstring("Clone")] HRESULT Clone([out] IEnumBridgeDeckRebarLayoutItems** ppenum);
 	   [helpstring("Next")]  HRESULT Next([in] ULONG celt, [out] IBridgeDeckRebarLayoutItem** rgelt, [in,out] ULONG* pceltFetched);
	   [helpstring("Reset")] HRESULT Reset();
	   [helpstring("Skip")]  HRESULT Skip([in] ULONG celt);
	};

   // General Rebar Layout. Rebar layouts represent the longitudinal layout of a pattern of rebar.
   // A layout defines where bars start and stop. A layout consists of one or more layout items.
   // A rebar layout can create a rebar section
	[
		object,
		uuid(455C735E-09FD-443a-BE17-7237AA1BA045),
		oleautomation,
		helpstring("IRebarLayout Interface"),
		pointer_default(unique)
	]
	interface IRebarLayout : IUnknown
	{
		[helpstring("method CreateRebarSection")] HRESULT CreateRebarSection([in] Float64 cutLocation,[out,retval]IRebarSection** section);
		[propget,helpstring("property Item")] HRESULT Item([in]CollectionIndexType idx,[out,retval]IRebarLayoutItem** rli);
		[propget,helpstring("property Count")] HRESULT Count([out,retval] CollectionIndexType* count);
		[helpstring("method Add")] HRESULT Add([in]IRebarLayoutItem* rli);
      [propget, restricted, helpstring("returns an enumerator for the collection.")] HRESULT _NewEnum([out, retval] IUnknown** retval);  
      [propget, restricted, helpstring("property _EnumRebarLayoutItems")] HRESULT _EnumRebarLayoutItems([out,retval]IEnumRebarLayoutItems** enumRebarLayoutItems);
	};

   // Rebar Layout specifically for bridge decks.
	[
		object,
		uuid(4CF20D1A-02DC-451e-88FA-832A84F99C32),
		oleautomation,
		helpstring("IBridgeDeckRebarLayout Interface"),
		pointer_default(unique)
	]
	interface IBridgeDeckRebarLayout : IUnknown
	{
	   [propputref,helpstring("property Bridge")] HRESULT Bridge([in] IGenericBridge* pBridge);
	   [propget,helpstring("property Bridge")] HRESULT Bridge([out,retval] IGenericBridge** ppBridge);
	   [propputref,helpstring("property EffectiveFlangeWidthTool")] HRESULT EffectiveFlangeWidthTool([in] IEffectiveFlangeWidthTool* pTool);
	   [propget,helpstring("property EffectiveFlangeWidthTool")] HRESULT EffectiveFlangeWidthTool([out,retval] IEffectiveFlangeWidthTool* *pTool);
		[helpstring("method CreateRebarSection")] HRESULT CreateRebarSection([in] IDType ssMbrID,[in] SegmentIndexType segIdx,[in]Float64 distFromStartOfSegment,[in]IDType leftSSMbrID,[in]IDType rightSSMbrID,[out,retval]IRebarSection** section);
		[propget,helpstring("property Item")] HRESULT Item([in]CollectionIndexType idx,[out,retval]IBridgeDeckRebarLayoutItem** rli);
		[propget,helpstring("property Count")] HRESULT Count([out,retval] CollectionIndexType* count);
		[helpstring("method Add")] HRESULT Add([in]IBridgeDeckRebarLayoutItem* rli);
      [propget, restricted, helpstring("returns an enumerator for the collection.")] HRESULT _NewEnum([out, retval] IUnknown** retval);  
      [propget, restricted, helpstring("property _EnumRebarLayoutItems")] HRESULT _EnumRebarLayoutItems([out,retval]IEnumBridgeDeckRebarLayoutItems** enumRebarLayoutItems);
	};

   [
      object,
      uuid(9344D48A-BE1C-4dce-8558-4D1CAE81D2F0),
      oleautomation,
      helpstring("IMaterial Interface"),
      pointer_default(unique)
	]
	interface IMaterial : IUnknown
	{
	   [propget, helpstring("property E")] HRESULT E([in]StageIndexType stageIdx,[out,retval]Float64* E);
	   [propput, helpstring("property E")] HRESULT E([in]StageIndexType stageIdx,[in]Float64 E);
	   [propget, helpstring("property Density")] HRESULT Density([in]StageIndexType stageIdx,[out,retval]Float64* w);
	   [propput, helpstring("property Density")] HRESULT Density([in]StageIndexType stageIdx,[in]Float64 w);
	};

   [
      object,
	  uuid(36BB7165-1665-47a2-9A17-D9CA5E6DCCAB),
	  oleautomation,
	  helpstring("IItemData"),
	  pointer_default(unique)
   ]
   interface IItemData : IUnknown
   {
      [helpstring("method AddItemData")] HRESULT AddItemData([in]BSTR name,[in]IUnknown* data);
      [helpstring("method GetItemData")] HRESULT GetItemData([in]BSTR name,[out,retval]IUnknown** data);
      [helpstring("method RemoveItemData")] HRESULT RemoveItemData([in]BSTR name);
      [helpstring("method GetItemDataCount")] HRESULT GetItemDataCount([out,retval]CollectionIndexType* count);
   };

	[
	   object,
	   uuid(1568D12A-4F24-449f-8875-6401C56FEF13),
	   oleautomation,
	   helpstring("IPrestressingStrand Interface"),
	   pointer_default(unique)
	]
	interface IPrestressingStrand : IUnknown
	{
	   [propget,helpstring("property Name")] HRESULT Name([out,retval] BSTR* name);
	   [propput,helpstring("property Name")] HRESULT Name([in] BSTR name);
	   [propget,helpstring("property Grade")] HRESULT Grade([out,retval] StrandGrade* grade);
	   [propput,helpstring("property Grade")] HRESULT Grade([in] StrandGrade grade);
	   [propget,helpstring("property Type")] HRESULT Type([out,retval] StrandType* type);
	   [propput,helpstring("property Type")] HRESULT Type([in] StrandType type);
	   [propget,helpstring("property Size")] HRESULT Size([out,retval] StrandSize* size);
	   [propput,helpstring("property Size")] HRESULT Size([in] StrandSize size);
      [propget,helpstring("property InstallationStage")] HRESULT InstallationStage([out,retval]StageIndexType* pStageIdx);
      [propput,helpstring("property InstallationStage")] HRESULT InstallationStage([in]StageIndexType stageIdx);

	   [propget,helpstring("property NominalDiameter")] HRESULT NominalDiameter([out,retval]Float64* dps);
	   [propget,helpstring("property NominalArea")] HRESULT NominalArea([out,retval]Float64* aps);
	   [propget,helpstring("property UltimateStrength")] HRESULT UltimateStrength([out,retval]Float64* fpu);
	   [propget,helpstring("property YieldStrength")] HRESULT YieldStrength([out,retval]Float64* fpy);
	   [propget,helpstring("property ModulusE")] HRESULT ModulusE([out,retval]Float64* e);
	};


	[
	   object,
	   uuid(86C8373C-8E36-4413-BFE6-B32F5E176100),
	   oleautomation,
	   helpstring("IOverhangPathStrategy Interface"),
	   pointer_default(unique)
	]
	interface IOverhangPathStrategy : IUnknown
	{
	   [propget,helpstring("property Overhang")] HRESULT Path([out,retval]IPath** path);
	};

	[
	   object,
	   uuid(3E603B81-D649-4ffc-A220-B3EA22343A3D),
	   oleautomation,
	   helpstring("IAlignmentOffsetStrategy Interface"),
	   pointer_default(unique)
	]
	interface IAlignmentOffsetStrategy : IUnknown
	{
	   [propputref, helpstring("property Alignment")] HRESULT Alignment([in]IAlignment* alignment);
	   [propput, helpstring("property Offset")] HRESULT Offset([in]Float64 offset);
	};

	[
	   object,
	   uuid(6D10EA7C-E16D-4dc1-8189-4B91C0441072),
	   oleautomation,
	   helpstring("IEdgePathStrategy Interface"),
	   pointer_default(unique)
	]
	interface IEdgePathStrategy : IUnknown
	{
	   [propputref, helpstring("property Path")] HRESULT Path([in]IPath* path);
	};

	[
	   object,
	   uuid(DD39558A-CEEF-446f-AB50-EC6085D087FC),
	   oleautomation,
	   helpstring("IBridgeDeck Interface"),
	   pointer_default(unique)
	]
	interface IBridgeDeck : IUnknown
	{
      [propputref,helpstring("property DeckBoundary")] HRESULT DeckBoundary([in]IDeckBoundary* deckBoundary);
      [propget,helpstring("property DeckBoundary")] HRESULT DeckBoundary([out,retval]IDeckBoundary** deckBoundary);
	   [propget,helpstring("property Composite")] HRESULT Composite([out,retval]VARIANT_BOOL* bComposite);
	   [propput,helpstring("property Composite")] HRESULT Composite([in]VARIANT_BOOL bComposite);
	   [propget,helpstring("property Material")] HRESULT Material([out,retval]IMaterial** material);
	   [propputref,helpstring("property Material")] HRESULT Material([in]IMaterial* material);
	   [propget,helpstring("property StructuralDepth")] HRESULT StructuralDepth([out,retval]Float64* depth);
	   [propget,helpstring("property GrossDepth")] HRESULT GrossDepth([out,retval]Float64* depth);
      [propget,helpstring("property RebarLayout")] HRESULT RebarLayout([out,retval]IBridgeDeckRebarLayout** rebarLayout);
      [propputref,helpstring("property RebarLayout")] HRESULT RebarLayout([in]IBridgeDeckRebarLayout* rebarLayout);
      [propputref,helpstring("property Bridge")] HRESULT Bridge([in]IGenericBridge* pBridge);
      [propget,helpstring("property Bridge")] HRESULT Bridge([out,retval]IGenericBridge** ppBridge);
	};

   [
	   object,
	   uuid(C50BB152-ED63-4842-B17D-437FB98BF2CB),
	   oleautomation,
	   helpstring("ICastSlab Interface"),
	   pointer_default(unique)
	]
	interface ICastSlab : IUnknown
	{
	   [propget, helpstring("property GrossDepth")] HRESULT GrossDepth([out,retval]Float64* depth);
	   [propput, helpstring("property GrossDepth")] HRESULT GrossDepth([in]Float64 depth);
	   [propget, helpstring("property OverhangDepth")] HRESULT OverhangDepth([out,retval]Float64* depth);
	   [propput, helpstring("property OverhangDepth")] HRESULT OverhangDepth([in]Float64 depth);
	   [propget, helpstring("property Fillet")] HRESULT Fillet([out,retval]Float64* depth);
	   [propput, helpstring("property Fillet")] HRESULT Fillet([in]Float64 depth);
	   [propget, helpstring("property OverhangTaper")] HRESULT OverhangTaper([out,retval]DeckOverhangTaper* taper);
	   [propput, helpstring("property OverhangTaper")] HRESULT OverhangTaper([in]DeckOverhangTaper taper);
	};

	[
	   object,
	   uuid(F2653B5B-970A-4914-B3EE-A134FCAC6E00),
	   oleautomation,
	   helpstring("IPrecastSlab Interface"),
	   pointer_default(unique)
	]
	interface IPrecastSlab : IUnknown
	{
	   [propget, helpstring("property CastDepth")] HRESULT CastDepth([out,retval]Float64* depth);
	   [propput, helpstring("property CastDepth")] HRESULT CastDepth([in]Float64 depth);
	   [propget, helpstring("property PanelDepth")] HRESULT PanelDepth([out,retval]Float64* depth);
	   [propput, helpstring("property PanelDepth")] HRESULT PanelDepth([in]Float64 depth);
	   [propget, helpstring("property OverhangDepth")] HRESULT OverhangDepth([out,retval]Float64* depth);
	   [propput, helpstring("property OverhangDepth")] HRESULT OverhangDepth([in]Float64 depth);
	   [propget, helpstring("property Fillet")] HRESULT Fillet([out,retval]Float64* depth);
	   [propput, helpstring("property Fillet")] HRESULT Fillet([in]Float64 depth);
	   [propget, helpstring("property OverhangTaper")] HRESULT OverhangTaper([out,retval]DeckOverhangTaper* taper);
	   [propput, helpstring("property OverhangTaper")] HRESULT OverhangTaper([in]DeckOverhangTaper taper);
	};

	[
	   object,
	   uuid(69308B82-EB06-4128-BE34-FDEAEBE75132),
	   oleautomation,
	   helpstring("IOverlaySlab Interface"),
	   pointer_default(unique)
	]
	interface IOverlaySlab : IUnknown
	{
	   [propget, helpstring("property GrossDepth")] HRESULT GrossDepth([out,retval]Float64* depth);
	   [propput, helpstring("property GrossDepth")] HRESULT GrossDepth([in]Float64 depth);

	};

	[
	   object,
	   uuid(84BDBE3E-928A-4a78-BF9B-39AE1AB8E6F9),
	   oleautomation,
	   helpstring("IBarrier Interface"),
	   pointer_default(unique)
	]
	interface IBarrier : IUnknown
	{
	   [propget,helpstring("property Shape")] HRESULT Shape([out,retval] IShape** shape);
	   [propget,helpstring("property Material")] HRESULT Material([out,retval] IMaterial** material);
	   [propputref,helpstring("property Material")] HRESULT Material([in] IMaterial* material);
      // Distance from interior bound to curb measured inward
	   [propget,helpstring("property CurbLocation")] HRESULT CurbLocation([out,retval]Float64* width);
      // Barrier toes measured inward from interior/exterior outer shape bounds
	   [propget,helpstring("property BarrierToeLocations")] HRESULT BarrierToeLocations([out] Float64* interiorToe,[out]Float64* exteriorToe);
	   [helpstring("method Clone")] HRESULT Clone([out,retval]IBarrier** barrier);
	};

	[
	   object,
	   uuid(41B59BA7-844E-4f23-9056-B1ECCF6E7706),
	   oleautomation,
	   helpstring("IGenericBarrier"),
	   pointer_default(unique)
	]
	interface IGenericBarrier : IBarrier
	{
	   [helpstring("property Init")] HRESULT Init([in] IShape* shape, [in]Float64 curbWidth, [in] Float64 interiorToe,[in]Float64 exteriorToe);
	}

	[
	   object,
	   uuid(98E8E982-FFDF-48a5-9B5D-0189F803144B),
	   oleautomation,
	   helpstring("IFShapeBarrier"),
	   pointer_default(unique)
	]
	interface IFShapeBarrier : IBarrier
	{
	   [propput,helpstring("property Shape")] HRESULT Shape([in] ITrafficBarrier* shape);
	}

   // This is the railing system
	[
	   object,
	   uuid(6ED29E23-2D11-4391-932A-6DEC77964D4B),
	   oleautomation,
	   helpstring("ISidewalkBarrier"),
	   pointer_default(unique)
	]
	interface ISidewalkBarrier : IUnknown
	{
		[propput,helpstring("property Barrier1")] HRESULT Barrier1([in]IBarrier* extBarrier, [in]TrafficBarrierOrientation orientation);
		[propput,helpstring("property Barrier2")] HRESULT Barrier2([in]IBarrier* extBarrier,[in]Float64 h1,[in]Float64 h2,[in]Float64 swWidth,
                                                                 [in]TrafficBarrierOrientation orientation,[in] SidewalkPositionType swPosition);
		[propput,helpstring("property Barrier3")] HRESULT Barrier3([in]IBarrier* extBarrier,[in]Float64 h1,[in]Float64 h2,[in]Float64 swWidth,
                                                                 [in]TrafficBarrierOrientation orientation,[in] SidewalkPositionType swPosition,
                                                                 [in]IBarrier* intBarrier);
	   [propget,helpstring("property HasSidewalk")] HRESULT HasSidewalk([out,retval]VARIANT_BOOL* pbHasSidewalk);
	   [propget,helpstring("property HasInteriorBarrier")] HRESULT HasInteriorBarrier([out,retval]VARIANT_BOOL* pbHasBarrier);
		[propget,helpstring("property SidewalkWidth")] HRESULT SidewalkWidth([out,retval]Float64* swWidth);
		[propget,helpstring("property Shape")] HRESULT Shape([out,retval] IShape** shape);
	   [propget,helpstring("property StructuralShape")] HRESULT StructuralShape([out,retval] IShape** shape);
		[propget,helpstring("property ExteriorBarrier")] HRESULT ExteriorBarrier([out,retval] IBarrier** barr);
		[propget,helpstring("property InteriorBarrier")] HRESULT InteriorBarrier([out,retval] IBarrier** barr);
		[propget,helpstring("property SidewalkShape")] HRESULT SidewalkShape([out,retval] IShape** shape);
	   [propget,helpstring("property Path")] HRESULT Path([out,retval] IPath** path);
	   [propput,helpstring("property Path")] HRESULT Path([in] IPath* path);
	   [propput,helpstring("property IsInteriorStructurallyContinuous")] HRESULT IsInteriorStructurallyContinuous([in]VARIANT_BOOL bContinuous);
	   [propput,helpstring("property IsSidewalkStructurallyContinuous")] HRESULT IsSidewalkStructurallyContinuous([in]VARIANT_BOOL bContinuous);
	   [propput,helpstring("property IsExteriorStructurallyContinuous")] HRESULT IsExteriorStructurallyContinuous([in]VARIANT_BOOL bContinuous);
	   [propget,helpstring("property IsStructurallyContinuous")] HRESULT IsStructurallyContinuous([out, retval]VARIANT_BOOL* pbContinuous);
		[propget,helpstring("property SidewalkPosition")] HRESULT SidewalkPosition([out,retval] SidewalkPositionType* posType);
	   [propget,helpstring("property ExteriorCurbWidth")] HRESULT ExteriorCurbWidth([out,retval]Float64* width); // location of exterior curb only
	   [propget,helpstring("property CurbWidth")] HRESULT CurbWidth([out,retval]Float64* width); // location of curb for total barrier
	   [propget,helpstring("OverlayToeWidth")] HRESULT OverlayToeWidth([out,retval]Float64* toeWidth); // location where overlay butts to
	   [helpstring("method Clone")] HRESULT Clone([out,retval]ISidewalkBarrier** clone);
    };

	[
	   object,
	   uuid(8763E80A-AA45-4EC8-BA44-25890E5B0269),
	   oleautomation,
	   helpstring("IFlangedGirderSection Interface"),
	   pointer_default(unique)
	]
	interface IFlangedGirderSection : IUnknown
	{
	   [propput,helpstring("property Beam")] HRESULT Beam([in]IPrecastBeam* beam);
	   [propget,helpstring("property Beam")] HRESULT Beam([out,retval]IPrecastBeam** beam);
	};

   [
		object,
		uuid(ACA24CD2-8201-459d-BF2B-D19D7DF87ACF),
		oleautomation,
		helpstring("ISegment Interface"),
		pointer_default(unique)
   ]
   interface ISegment : IUnknown
   {
      [propget, helpstring("property SuperstructureMember")] HRESULT SuperstructureMember([out,retval]ISuperstructureMember** ssmbr);
      [propget, helpstring("property GirderLine")] HRESULT GirderLine([out,retval]IGirderLine** girderLine);
      [propget, helpstring("property PrevSegment")] HRESULT PrevSegment([out,retval]ISegment** segment);
      [propget, helpstring("property NextSegment")] HRESULT NextSegment([out,retval]ISegment** segment);

      [propget, helpstring("property Length")] HRESULT Length([out, retval] Float64 *pVal);
		[propget, helpstring("property Profile")] HRESULT Profile([in] VARIANT_BOOL bIncludeClosure,[out,retval]IShape** ppShape);

		[propget, helpstring("property Section")] HRESULT Section([in]StageIndexType stageIdx,[in] Float64 distAlongSegment,[out,retval]ISection** ppSection);
      [propget, helpstring("property PrimaryShape")] HRESULT PrimaryShape([in]Float64 distAlongSegment,[out,retval]IShape** ppShape);

		[propput,helpstring("property Orientation")] HRESULT Orientation([in]Float64 orientation);
		[propget,helpstring("property Orientation")] HRESULT Orientation([out,retval]Float64* orientation);

      [propget,helpstring("property HaunchDepth")] HRESULT HaunchDepth([in] EndType endType,[out,retval]Float64* pVal);
      [propput,helpstring("property HaunchDepth")] HRESULT HaunchDepth([in] EndType endType,[in]Float64 val);
      [helpstring("method GetHaunchDepth")] HRESULT GetHaunchDepth([in]Float64 distAlongSegment,[out,retval]Float64* pVal);

      // These functions are called by the internal framework. Do not call them directly unless you
      // want to mess up your bridge model
      [propputref, helpstring("property SuperstructureMember")] HRESULT SuperstructureMember([in]ISuperstructureMember* ssMbr);
      [propputref, helpstring("property GirderLine")] HRESULT GirderLine([in]IGirderLine* girderLine);
      [propputref, helpstring("property PrevSegment")] HRESULT PrevSegment([in]ISegment* segment);
      [propputref, helpstring("property NextSegment")] HRESULT NextSegment([in]ISegment* segment);
   };

	[
	   object,
	   uuid(81007B86-0AD9-4a41-B9E2-721E31D93E20),
	   helpstring("IEnumSegment Interface"),
      oleautomation,nonextensible,
	   hidden,restricted,
	   pointer_default(unique)
	]
	interface IEnumSegment : IUnknown
	{
      [helpstring("Clone")] HRESULT Clone([out] IEnumSegment** ppenum);
 	   [helpstring("Next")]  HRESULT Next([in] ULONG celt, [out] ISegment** rgelt, [in,out] ULONG* pceltFetched);
	   [helpstring("Reset")] HRESULT Reset();
	   [helpstring("Skip")]  HRESULT Skip([in] ULONG celt);
	};

	[
		object,
		uuid(BD0F3210-F763-4787-9C5A-68E069918CFF),
		oleautomation,
		helpstring("IFilteredSegmentCollection Interface"),
		pointer_default(unique)
	]
	interface IFilteredSegmentCollection : IUnknown
	{
		[propget, helpstring("property Count")] HRESULT Count([out, retval] CollectionIndexType *pVal);
		[propget, helpstring("property Item")] HRESULT Item([in]CollectionIndexType index, [out, retval] ISegment* *pVal);
		[propget, helpstring("property _EnumElements")] HRESULT _EnumElements([out, retval] IEnumSegment* *pVal);
		[propget] HRESULT _NewEnum([out, retval] IUnknown** retval);  
	};

	[
		object,
		uuid(DAC15BD1-5791-4c24-B4AA-3A71A27C82A4),
		oleautomation,
		helpstring("ISegmentItem Interface"),
		pointer_default(unique)
	]
	interface ISegmentItem : IUnknown
	{
		[propget, helpstring("property RelPosition")] HRESULT RelPosition([out, retval] CollectionIndexType *pVal);
		[propget, helpstring("property Segment")] HRESULT Segment([out, retval] ISegment* *pVal);
	};

   [
		object,
		uuid(2501E833-BB93-4458-869C-90EFA9BCA859),
		oleautomation,
		helpstring("ISuperstructureMember Interface"),
		pointer_default(unique)
   ]
   interface ISuperstructureMember : IUnknown
   {
      [propget, helpstring("property ID")] HRESULT ID([out,retval] GirderIDType* pID);
		[helpstring("method AddSegment")] HRESULT AddSegment([in]ISegment* segment);
		[propget, helpstring("property Segment")] HRESULT Segment([in] SegmentIndexType idx, [out, retval] ISegment* *pVal);
		[propget, helpstring("property SegmentCount")] HRESULT SegmentCount([out, retval] SegmentIndexType *pVal);
		[helpstring("method GetDistanceFromStartOfSegment")] HRESULT GetDistanceFromStartOfSegment([in] Float64 distFromStartOfSSMbr,[out] Float64* distFromStartOfSegment,[out] SegmentIndexType* pSegIdx,[out] ISegment** ppSeg);
      [helpstring("method GetDistanceFromStart")] HRESULT GetDistanceFromStart([in]SegmentIndexType segIdx,[in]Float64 distFromStartOfSegment,[out,retval]Float64* pDistFromStartOfSSMbr);
		[helpstring("method SetEndRelease")] HRESULT SetEndRelease([in] EndType end,[in] StageIndexType stageIdx,[in] ReleaseType release);
		[helpstring("method GetEndRelease")] HRESULT GetEndRelease([in] EndType end,[out] StageIndexType* pStageIdx,[out] ReleaseType* release);

      [propget,helpstring("property LocationType")] HRESULT LocationType([out,retval]LocationType* pVal);
      [propget,helpstring("property Bridge")] HRESULT Bridge([out,retval]IGenericBridge** ppBridge);
   };

	[
	   object,
	   uuid(3B0C73B3-9A2E-4ea0-A327-F54E11DC896B),
	   helpstring("IEnumSuperstructureMembers Interface"),
	   oleautomation,nonextensible,
	   hidden,restricted,
	   pointer_default(unique)
	]
	interface IEnumSuperstructureMembers : IUnknown
	{
      [helpstring("Clone")] HRESULT Clone([out] IEnumSuperstructureMembers** ppenum);
	   [helpstring("Next")]  HRESULT Next([in] ULONG celt, [out] ISuperstructureMember** rgelt, [in,out] ULONG* pceltFetched);
	   [helpstring("Reset")] HRESULT Reset();
	   [helpstring("Skip")]  HRESULT Skip([in] ULONG celt);
	};

	[
		object,
		uuid(6129251E-9A42-4af7-8090-20DC84F50E94),
		oleautomation,
		helpstring("IFilteredSuperstructureMemberCollection Interface"),
		pointer_default(unique)
	]
	interface IFilteredSuperstructureMemberCollection : IUnknown
	{
		[propget, helpstring("property Count")] HRESULT Count([out, retval] CollectionIndexType *pVal);
		[propget, helpstring("property Item")] HRESULT Item([in]CollectionIndexType index, [out, retval] ISuperstructureMember* *pVal);
		[propget, helpstring("property _EnumElements")] HRESULT _EnumElements([out, retval] IEnumSuperstructureMembers* *pVal);
		[propget] HRESULT _NewEnum([out, retval] IUnknown** retval);  
	};
   [
		object,
		uuid(67BE2D86-DCB1-40ae-AF16-59A766AE95C1),
		oleautomation,
		helpstring("IPrismaticSegment Interface"),
		pointer_default(unique)
   ]
   interface IPrismaticSegment : ISegment
   {
		[helpstring("method Shape")] HRESULT AddShape([in] IShape* pShape,[in]IMaterial* pFGMaterial,[in]IMaterial* pBGMaterial);
      [propget, helpstring("property ShapeCount")] HRESULT ShapeCount([out,retval]IndexType* pCount);
      [propget, helpstring("property ForegroundMaterial")] HRESULT ForegroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);
		[propget, helpstring("property BackgroundMaterial")] HRESULT BackgroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);
   };

   [
		object,
		uuid(906BFF68-E90F-4b63-B41E-CC00BE22B7ED),
		oleautomation,
		helpstring("IFlangedGirderEndBlockSegment Interface"),
		pointer_default(unique)
   ]
   interface IFlangedGirderEndBlockSegment : ISegment
   {
      [helpstring("method Shape")] HRESULT AddShape([in] IShape* pShape,[in]IMaterial* pFGMaterial,[in]IMaterial* pBGMaterial);
      [propget, helpstring("property ShapeCount")] HRESULT ShapeCount([out,retval]IndexType* pCount);
      [propget, helpstring("property ForegroundMaterial")] HRESULT ForegroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);
		[propget, helpstring("property BackgroundMaterial")] HRESULT BackgroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);

      [propput, helpstring("property EndBlockLength")] HRESULT EndBlockLength([in]EndType endType,[in] Float64 length);
      [propget, helpstring("property EndBlockLength")] HRESULT EndBlockLength([in]EndType endType,[out,retval] Float64* pLength);
      [propput, helpstring("property EndBlockTransitionLength")] HRESULT EndBlockTransitionLength([in]EndType endType,[in] Float64 length);
      [propget, helpstring("property EndBlockTransitionLength")] HRESULT EndBlockTransitionLength([in]EndType endType,[out,retval] Float64* pLength);
      [propput, helpstring("property EndBlockWidth")] HRESULT EndBlockWidth([in]EndType endType,[in] Float64 width);
      [propget, helpstring("property EndBlockWidth")] HRESULT EndBlockWidth([in]EndType endType,[out,retval] Float64* pWidth);
   };

   [
		object,
		uuid(2C189965-D747-4c98-B432-321B52B3ABDE),
		oleautomation,
		helpstring("IVoidedSlabEndBlockSegment Interface"),
		pointer_default(unique)
   ]
   interface IVoidedSlabEndBlockSegment : ISegment
   {
      [helpstring("method Shape")] HRESULT AddShape([in] IShape* pShape,[in]IMaterial* pFGMaterial,[in]IMaterial* pBGMaterial);
      [propget, helpstring("property ShapeCount")] HRESULT ShapeCount([out,retval]IndexType* pCount);
      [propget, helpstring("property ForegroundMaterial")] HRESULT ForegroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);
		[propget, helpstring("property BackgroundMaterial")] HRESULT BackgroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);

      [propput, helpstring("property EndBlockLength")] HRESULT EndBlockLength([in]EndType endType,[in] Float64 length);
      [propget, helpstring("property EndBlockLength")] HRESULT EndBlockLength([in]EndType endType,[out,retval] Float64* pLength);
   };

   [
		object,
		uuid(319AC118-E4C8-4a9b-B653-67958B6CD071),
		oleautomation,
		helpstring("IDeckedSlabBeamEndBlockSegment Interface"),
		pointer_default(unique)
   ]
   interface IDeckedSlabBeamEndBlockSegment : ISegment
   {
      [helpstring("method Shape")] HRESULT AddShape([in] IShape* pShape,[in]IMaterial* pFGMaterial,[in]IMaterial* pBGMaterial);
      [propget, helpstring("property ShapeCount")] HRESULT ShapeCount([out,retval]IndexType* pCount);
      [propget, helpstring("property ForegroundMaterial")] HRESULT ForegroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);
		[propget, helpstring("property BackgroundMaterial")] HRESULT BackgroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);

      [propput, helpstring("property EndBlockLength")] HRESULT EndBlockLength([in]EndType endType,[in] Float64 length);
      [propget, helpstring("property EndBlockLength")] HRESULT EndBlockLength([in]EndType endType,[out,retval] Float64* pLength);
   };

   [
		object,
		uuid(D492FA18-90EB-40a0-A90C-1395A19C7F92),
		oleautomation,
		helpstring("IBoxBeamEndBlockSegment Interface"),
		pointer_default(unique)
   ]
   interface IBoxBeamEndBlockSegment : ISegment
   {
      [helpstring("method Shape")] HRESULT AddShape([in] IShape* pShape,[in]IMaterial* pFGMaterial,[in]IMaterial* pBGMaterial);
      [propget, helpstring("property ShapeCount")] HRESULT ShapeCount([out,retval]IndexType* pCount);
      [propget, helpstring("property ForegroundMaterial")] HRESULT ForegroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);
		[propget, helpstring("property BackgroundMaterial")] HRESULT BackgroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);

      [propput, helpstring("property EndBlockLength")] HRESULT EndBlockLength([in]EndType endType,[in] Float64 length);
      [propget, helpstring("property EndBlockLength")] HRESULT EndBlockLength([in]EndType endType,[out,retval] Float64* pLength);
   };

   [
		object,
		uuid(FC05CC1E-5BF7-4c6c-858A-325C115209A8),
		oleautomation,
		helpstring("IUGirderSection2EndBlockSegment Interface"),
		pointer_default(unique)
   ]
   interface IUGirderSection2EndBlockSegment : ISegment
   {
      [helpstring("method Shape")] HRESULT AddShape([in] IShape* pShape,[in]IMaterial* pFGMaterial,[in]IMaterial* pBGMaterial);
      [propget, helpstring("property ShapeCount")] HRESULT ShapeCount([out,retval]IndexType* pCount);
      [propget, helpstring("property ForegroundMaterial")] HRESULT ForegroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);
		[propget, helpstring("property BackgroundMaterial")] HRESULT BackgroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);

      [propput, helpstring("property EndBlockLength")] HRESULT EndBlockLength([in]EndType endType,[in] Float64 length);
      [propget, helpstring("property EndBlockLength")] HRESULT EndBlockLength([in]EndType endType,[out,retval] Float64* pLength);
   };


   [
		object,
		uuid(1749EDD7-2483-4fc8-8F9F-2F22F48DB0BF),
		oleautomation,
		helpstring("ITaperedGirderSegment Interface"),
		pointer_default(unique)
   ]
   interface ITaperedGirderSegment : ISegment
   {
      [helpstring("method Shape")] HRESULT AddShape([in] IShape* pStartShape,[in]IShape* pEndShape,[in]IMaterial* pFGMaterial,[in]IMaterial* pBGMaterial);
      [propget, helpstring("property ShapeCount")] HRESULT ShapeCount([out,retval]IndexType* pCount);
      [propget, helpstring("property ForegroundMaterial")] HRESULT ForegroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);
		[propget, helpstring("property BackgroundMaterial")] HRESULT BackgroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);
   };


   [
		object,
		uuid(C27D9CB1-3FC1-4565-8755-14013DEB9CEB),
		oleautomation,
		helpstring("ISplicedGirderSegment Interface"),
		pointer_default(unique)
   ]
   interface ISplicedGirderSegment : ISegment
   {
      [helpstring("method Shape")] HRESULT AddShape([in] IShape* pShape,[in]IMaterial* pFGMaterial,[in]IMaterial* pBGMaterial);
      [propget, helpstring("property ShapeCount")] HRESULT ShapeCount([out,retval]IndexType* pCount);
      [propget, helpstring("property ForegroundMaterial")] HRESULT ForegroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);
		[propget, helpstring("property BackgroundMaterial")] HRESULT BackgroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);

      [propput, helpstring("property EndBlockLength")] HRESULT EndBlockLength([in]EndType endType,[in] Float64 length);
      [propget, helpstring("property EndBlockLength")] HRESULT EndBlockLength([in]EndType endType,[out,retval] Float64* pLength);
      [propput, helpstring("property EndBlockTransitionLength")] HRESULT EndBlockTransitionLength([in]EndType endType,[in] Float64 length);
      [propget, helpstring("property EndBlockTransitionLength")] HRESULT EndBlockTransitionLength([in]EndType endType,[out,retval] Float64* pLength);
      [propput, helpstring("property EndBlockWidth")] HRESULT EndBlockWidth([in]EndType endType,[in] Float64 width);
      [propget, helpstring("property EndBlockWidth")] HRESULT EndBlockWidth([in]EndType endType,[out,retval] Float64* pWidth);

      [propput, helpstring("property VariationType")] HRESULT VariationType([in] SegmentVariationType variationType);
      [propget, helpstring("property VariationType")] HRESULT VariationType([out,retval] SegmentVariationType* variationType);
      [helpstring("method SetVariationParameters")] HRESULT SetVariationParameters([in] SegmentZoneType zone,[in]Float64 length,[in]Float64 height,[in]Float64 bottomFlangeDepth);
      [helpstring("method GetVariationParameters")] HRESULT GetVariationParameters([in] SegmentZoneType zone,[out]Float64* length,[out]Float64* height,[out]Float64* bottomFlangeDepth);

      [helpstring("method GetSegmentHeight")] HRESULT GetSegmentHeight([in]Float64 distFromStartOfSegment,[out,retval]Float64* pHeight);
      [propget, helpstring("property BottomFlangeProfile")] HRESULT BottomFlangeProfile([out,retval]IPoint2dCollection** ppPoints);

      [propget, helpstring("property ClosureJointLength")] HRESULT ClosureJointLength([in]EndType endType,[out,retval]Float64* pLength);
      [propput, helpstring("property ClosureJointFgMaterial")] HRESULT ClosureJointForegroundMaterial([in]EndType endType,[in]IMaterial* pFGMaterial);
      [propget, helpstring("property ClosureJointFgMaterial")] HRESULT ClosureJointForegroundMaterial([in]EndType endType,[out,retval]IMaterial** ppFGMaterial);
      [propput, helpstring("property ClosureJointBgMaterial")] HRESULT ClosureJointBackgroundMaterial([in]EndType endType,[in]IMaterial* pBGMaterial);
      [propget, helpstring("property ClosureJointBgMaterial")] HRESULT ClosureJointBackgroundMaterial([in]EndType endType,[out,retval]IMaterial** ppBGMaterial);
   };

   [
		object,
		uuid(8F3B43FE-5138-4a73-B567-D9C3B4EC0166),
		oleautomation,
		helpstring("IFlangedSplicedGirderSegment Interface"),
		pointer_default(unique)
   ]
   interface IFlangedSplicedGirderSegment : IUnknown
   {
		[propputref, helpstring("property FlangedGirderSection")] HRESULT FlangedGirderSection([in] IFlangedGirderSection* pPrecastBeam);
		[propget, helpstring("property FlangedGirderSection")] HRESULT FlangedGirderSection([out,retval] IFlangedGirderSection** ppPrecastBeam);
   };

   [
		object,
		uuid(4ED17E29-71D1-493d-BCA0-11AF8DF6B814),
		oleautomation,
		helpstring("IUSplicedGirderSegment Interface"),
		pointer_default(unique)
   ]
   interface IUSplicedGirderSegment : IUnknown
   {
		[propputref, helpstring("property UGirderSection")] HRESULT UGirderSection([in] IUGirderSection* pPrecastBeam);
		[propget, helpstring("property UGirderSection")] HRESULT UGirderSection([out,retval] IUGirderSection** ppPrecastBeam);
   };

	[
	   object,
	   uuid(4D6301FB-5724-43eb-BD34-A5F9351F7ECB),
	   oleautomation,
	   helpstring("IBulbTeeSection Interface"),
	   pointer_default(unique)
	]
	interface IBulbTeeSection : IUnknown
	{
	   [propput,helpstring("property Beam")] HRESULT Beam([in]IBulbTee* beam);
	   [propget,helpstring("property Beam")] HRESULT Beam([out,retval]IBulbTee** beam);
	};

   [
		object,
		uuid(E2ECFBA7-6D57-4e72-B4C2-79450D5B4D9E),
		oleautomation,
		helpstring("IThickenedFlangeBulbTeeSegment Interface"),
		pointer_default(unique)
   ]
   interface IThickenedFlangeBulbTeeSegment : ISegment
   {
		[propput, helpstring("property FlangeThickening")] HRESULT FlangeThickening([in]Float64 flangeThickening);
      [helpstring("method Shape")] HRESULT AddShape([in] IShape* pShape,[in]IMaterial* pFGMaterial,[in]IMaterial* pBGMaterial);
      [propget, helpstring("property ShapeCount")] HRESULT ShapeCount([out,retval]IndexType* pCount);
      [propget, helpstring("property ForegroundMaterial")] HRESULT ForegroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);
		[propget, helpstring("property BackgroundMaterial")] HRESULT BackgroundMaterial([in]IndexType idx,[out,retval]IMaterial* *material);
   };

	[
	   object,
	   uuid(B422F9A5-8078-435a-AD4B-A3DC9C4D6801),
	   helpstring("IEnumSegmentItem Interface"),
	   oleautomation,nonextensible,
	   hidden,restricted,
	   pointer_default(unique)
	]
	interface IEnumSegmentItem : IUnknown
	{
      [helpstring("Clone")]   HRESULT Clone([out] IEnumSegmentItem** ppenum);
	   [helpstring("Next")]	   HRESULT Next([in] ULONG celt, [out] ISegmentItem** rgelt, [in,out] ULONG* pceltFetched);
	   [helpstring("Reset")]   HRESULT Reset();
	   [helpstring("Skip")]	   HRESULT Skip([in] ULONG celt);
	};
	[
		object,
		uuid(AFC20A23-CE17-414A-A157-119AE012A0F9),
		oleautomation,
		helpstring("IColumn Interface"),
		pointer_default(unique)
	]
	interface IColumn : IUnknown
	{
      [propget, helpstring("property Height")] HRESULT Height([out,retval] Float64* height);
      [propput, helpstring("property Height")] HRESULT Height([in] Float64 height);
      [propget, helpstring("property BaseOffset")] HRESULT BaseOffset([out,retval] Float64* offset);
      [propput, helpstring("property BaseOffset")] HRESULT BaseOffset([in] Float64 offset);
      [propget, helpstring("property Length")] HRESULT Length([out,retval] Float64* length);
      [helpstring("method AddSegment")] HRESULT AddSegment([in]ISegment* segment);
      [helpstring("method InsertSegment")] HRESULT InsertSegment([in] CollectionIndexType idx,[in]ISegment* segment);
      [helpstring("method RemoveSegment")] HRESULT RemoveSegment([in] CollectionIndexType idx);
      [helpstring("method RemoveSegments")] HRESULT RemoveSegments();
      [propget, helpstring("property Segment")] HRESULT Segment([in] CollectionIndexType idx, [out,retval] ISegment* *segment);
      [propget, helpstring("property SegmentCount")] HRESULT SegmentCount([out,retval] CollectionIndexType* count);
      [propget, helpstring("property SegmentLength")] HRESULT SegmentLength([out,retval] Float64* length);
      [helpstring("property CopySegmentTo")] HRESULT CopySegmentTo([in] CollectionIndexType fromidx,[in] CollectionIndexType toIdx);
      [helpstring("property MoveSegmentTo")] HRESULT MoveSegmentTo([in] CollectionIndexType fromIdx,[in] CollectionIndexType toIdx);
      [helpstring("property ReverseSegments")] HRESULT ReverseSegments();
      [propget, helpstring("property Fractional")] HRESULT Fractional([out,retval] VARIANT_BOOL* bFractional);
      [propput, helpstring("property Fractional")] HRESULT Fractional([in] VARIANT_BOOL bFractional);
      [propget, helpstring("property Symmetrical")] HRESULT Symmetrical([out,retval] VARIANT_BOOL* bSymmetrical);
      [propput, helpstring("property Symmetrical")] HRESULT Symmetrical([in] VARIANT_BOOL bSymmetrical);
	  [helpstring("method GetMemberSegments")] HRESULT GetMemberSegments([out,retval] IFilteredSegmentCollection **ppSeg);
  	  [helpstring("method GetDistanceFromStartOfSegment")] HRESULT GetDistanceFromStartOfSegment([in] Float64 location,[out] Float64* dist,[out] ISegmentItem **ppSeg);
	};

   [
		object,
		uuid(9AC642C8-524A-4FF7-8038-D5A696C3974A),
		oleautomation,
		helpstring("IColumnSpacing Interface"),
		pointer_default(unique)
	]
	interface IColumnSpacing : IUnknown
	{
      [propget,helpstring("property Uniform")] HRESULT Uniform([out,retval] VARIANT_BOOL* bUniform);
      [propput,helpstring("property Uniform")] HRESULT Uniform([in] VARIANT_BOOL bUniform);
      [propget,helpstring("property Spacing")] HRESULT Spacing([in] SpacingIndexType spaceIdx,[out,retval] Float64* space);
      [propput,helpstring("property Spacing")] HRESULT Spacing([in] SpacingIndexType spaceIdx,[in] Float64 space);
      [propget,helpstring("property Overhang")] HRESULT Overhang([in] DirectionType side,[out,retval] Float64* overhang);
      [propput,helpstring("property Overhang")] HRESULT Overhang([in] DirectionType side ,[in] Float64 overhang);
      [propget,helpstring("property ColumnCount")] HRESULT ColumnCount([out,retval] ColumnIndexType* nColumns);
      [helpstring("method Add")] HRESULT Add([in] ColumnIndexType nColumns);
      [helpstring("method Insert")] HRESULT Insert([in] SpacingIndexType spaceIdx,[in] SpacingIndexType nInsert);
      [helpstring("method Remove")] HRESULT Remove([in] ColumnIndexType colIdx,[in] ColumnIndexType nRemove);
      [propget,helpstring("property Column")] HRESULT Column([in] ColumnIndexType colIdx,[out,retval] IColumn* *column);
	};

	[
		object,
		uuid(D77377CB-A040-4008-B1BF-9710BA6FBB63),
		oleautomation,
		helpstring("ICrossBeam Interface"),
		pointer_default(unique)
	]
	interface ICrossBeam : IUnknown
	{
      [propget, helpstring("property Length")] HRESULT Length([out,retval] Float64* length);
      [helpstring("method AddSegment")] HRESULT AddSegment([in]ISegment* segment);
      [helpstring("method InsertSegment")] HRESULT InsertSegment([in] CollectionIndexType idx,[in]ISegment* segment);
      [helpstring("method RemoveSegment")] HRESULT RemoveSegment([in] CollectionIndexType idx);
      [helpstring("method RemoveSegments")] HRESULT RemoveSegments();
      [propget, helpstring("property Segment")] HRESULT Segment([in] CollectionIndexType idx, [out,retval] ISegment* *segment);
      [propget, helpstring("property SegmentCount")] HRESULT SegmentCount([out,retval] CollectionIndexType* count);
      [propget, helpstring("property SegmentLength")] HRESULT SegmentLength([out,retval] Float64* length);
      [helpstring("property CopySegmentTo")] HRESULT CopySegmentTo([in] CollectionIndexType fromidx,[in] CollectionIndexType toIdx);
      [helpstring("property MoveSegmentTo")] HRESULT MoveSegmentTo([in] CollectionIndexType fromIdx,[in] CollectionIndexType toIdx);
      [helpstring("property ReverseSegments")] HRESULT ReverseSegments();
      [propget, helpstring("property Fractional")] HRESULT Fractional([out,retval] VARIANT_BOOL* bFractional);
      [propput, helpstring("property Fractional")] HRESULT Fractional([in] VARIANT_BOOL bFractional);
      [propget, helpstring("property Symmetrical")] HRESULT Symmetrical([out,retval] VARIANT_BOOL* bSymmetrical);
      [propput, helpstring("property Symmetrical")] HRESULT Symmetrical([in] VARIANT_BOOL bSymmetrical);
		[helpstring("method GetMemberSegments")] HRESULT GetMemberSegments([out,retval] IFilteredSegmentCollection **ppSeg);
		[helpstring("method GetDistanceFromStartOfSegment")] HRESULT GetDistanceFromStartOfSegment([in] Float64 location,[out]Float64* dist,[out] ISegmentItem **ppSeg);
	};

   [
		object,
		uuid(C5D65F83-7B6C-468f-95EC-BE3F320E2492),
		oleautomation,
		helpstring("IPier Interface"),
		pointer_default(unique)
   ]
   interface IPier : IUnknown
   {
		[propget,helpstring("property Station")] HRESULT Station([out,retval] IStation* *station);
		[propget,helpstring("property Direction")] HRESULT Direction([out,retval] IDirection* *direction);
		[propget,helpstring("property SkewAngle")] HRESULT SkewAngle([out,retval] IAngle* *skewAngle);
		[propget,helpstring("property LongitudinalPierDescription")] HRESULT LongitudinalPierDescription([out, retval] ILongitudinalPierDescription* *pVal);
		[helpstring("property CreateTransversePierDescription")] HRESULT CreateTransversePierDescription();
		[propget,helpstring("property TransversePierDescription")] HRESULT TransversePierDescription([out, retval] ITransversePierDescription* *pVal);
		[propget,helpstring("property Index")] HRESULT Index([out,retval]PierIndexType* pIndex);
   };

   [
		object,
		uuid(7C088AD6-C6BA-4DB7-910B-B13725973471),
		oleautomation,
		helpstring("ITransversePierDescription Interface"),
		pointer_default(unique)
	]
	interface ITransversePierDescription : IUnknown
	{
      [propget,helpstring("property CrossBeam")] HRESULT CrossBeam([out,retval]ICrossBeam* *crossBeam);
      [propget,helpstring("property ColumnSpacing")] HRESULT ColumnSpacing([out,retval]IColumnSpacing* *columnSpacing);
      [propget,helpstring("property Column")] HRESULT Column([in] ColumnIndexType columnIdx,[out,retval]IColumn* *column);

      [propget,helpstring("property Pier")] HRESULT Pier([out,retval]IPier* *pier);
	};

	[
	   object,
	   uuid(750677B3-DEA8-4e2d-B080-C54E0E948937),
	   oleautomation,
	   helpstring("IGirderSection Interface"),
	   pointer_default(unique)
	]
	interface IGirderSection : IUnknown
	{
	   [propget,helpstring("property WebCount")] HRESULT WebCount([out,retval]WebIndexType* nWebs);
	   [propget,helpstring("property WebLocation")] HRESULT WebLocation([in]WebIndexType idx,[out,retval]Float64* location);
	   [propget,helpstring("property WebSpacing")] HRESULT WebSpacing([in]WebIndexType idx,[out,retval]Float64* spacing);
	   [propget,helpstring("property WebThickness")] HRESULT WebThickness([in]WebIndexType idx,[out,retval]Float64* tWeb);
	   [propget,helpstring("property MinWebThickness")] HRESULT MinWebThickness([out,retval]Float64* tWeb);
      [propget,helpstring("property WebPlane")] HRESULT WebPlane([in]WebIndexType idx,[out,retval]IPlane3d** ppPlane);

	   // Web thickness for effective flange width computations - for box beams in pre-2008 lrfd::4.6.2.2.1
	   [propget,helpstring("property EffectiveWebThickness")] HRESULT EffectiveWebThickness([out,retval]Float64* tWeb);

      [propget,helpstring("property MatingSurfaceCount")] HRESULT MatingSurfaceCount([out,retval]MatingSurfaceIndexType* nMatingSurfaces);
	   [propget,helpstring("property MatingSurfaceLocation")] HRESULT MatingSurfaceLocation([in]MatingSurfaceIndexType idx,[out,retval]Float64* location);
	   [propget,helpstring("property MatingSurfaceWidth")] HRESULT MatingSurfaceWidth([in]MatingSurfaceIndexType idx,[out,retval]Float64* wMatingSurface);


       [propget,helpstring("property TopFlangeCount")] HRESULT TopFlangeCount([out,retval]FlangeIndexType* nTopFlanges);
	   [propget,helpstring("property TopFlangeLocation")] HRESULT TopFlangeLocation([in]FlangeIndexType idx,[out,retval]Float64* location);
	   [propget,helpstring("property TopFlangeWidth")] HRESULT TopFlangeWidth([in]FlangeIndexType idx,[out,retval]Float64* wFlange);
	   [propget,helpstring("property TopFlangeThickness")] HRESULT TopFlangeThickness([in]FlangeIndexType idx,[out,retval]Float64* tFlange);
	   [propget,helpstring("property TopFlangeSpacing")] HRESULT TopFlangeSpacing([in]FlangeIndexType idx,[out,retval]Float64* spacing);

       [propget,helpstring("property BottomFlangeCount")] HRESULT BottomFlangeCount([out,retval]FlangeIndexType* nBottomFlanges);
	   [propget,helpstring("property BottomFlangeLocation")] HRESULT BottomFlangeLocation([in]FlangeIndexType idx,[out,retval]Float64* location);
	   [propget,helpstring("property BottomFlangeWidth")] HRESULT BottomFlangeWidth([in]FlangeIndexType idx,[out,retval]Float64* wFlange);
	   [propget,helpstring("property BottomFlangeThickness")] HRESULT BottomFlangeThickness([in]FlangeIndexType idx,[out,retval]Float64* tFlange);
	   [propget,helpstring("property BottomFlangeSpacing")] HRESULT BottomFlangeSpacing([in]FlangeIndexType idx,[out,retval]Float64* spacing);
   
	   [propget,helpstring("property GirderHeight")] HRESULT GirderHeight([out,retval]Float64* height);
	   [propget,helpstring("property TopWidth")] HRESULT TopWidth([out,retval]Float64* width);
	   [propget,helpstring("property BottomWidth")] HRESULT BottomWidth([out,retval]Float64* width);
	   [propget,helpstring("property ShearWidth")] HRESULT ShearWidth([out,retval]Float64* shearwidth);
	   [propget,helpstring("property MinTopFlangeThickness")] HRESULT MinTopFlangeThickness([out,retval]Float64* tf);
	   [propget,helpstring("property MinBottomFlangeThickness")] HRESULT MinBottomFlangeThickness([out,retval]Float64* tf);
	   // Distance from centerline of section to centerline of exterior web.
	   // Note that the distance value is positive regardless of side
	   [propget,helpstring("property CL2ExteriorWebDistance")] HRESULT CL2ExteriorWebDistance([in] DirectionType side, [out,retval]Float64* tf);
	};

	[
		object,
		uuid(AC74618B-C45B-4976-B015-8ECBBD9C6889),
		oleautomation,
		helpstring("IPrestressedGirderSection Interface"),
		pointer_default(unique)
	]
	interface IPrestressedGirderSection : IGirderSection
	{
		[propget,helpstring("property SplittingZoneDimension")] HRESULT SplittingZoneDimension([out,retval]Float64* pSZD);
      [propget,helpstring("property SplittingDirection")] HRESULT SplittingDirection([out,retval]SplittingDirection* pSD);
	};

	[
	   object,
	   uuid(F24B5CFF-67A5-4b88-9C1A-CE63A7846801),
	   oleautomation,
	   helpstring("IMultiWebSection Interface"),
	   pointer_default(unique)
	]
	interface IMultiWebSection : IUnknown
	{
	   [propput,helpstring("property Beam")] HRESULT Beam([in]IMultiWeb* beam);
	   [propget,helpstring("property Beam")] HRESULT Beam([out,retval]IMultiWeb** beam);
	};


	[
	   object,
	   uuid(97DFD327-7863-4fe3-B106-A88AA1E29A70),
	   oleautomation,
	   helpstring("IMultiWebSection2 Interface"),
	   pointer_default(unique)
	]
	interface IMultiWebSection2 : IUnknown
	{
	   [propput,helpstring("property Beam")] HRESULT Beam([in]IMultiWeb2* beam);
	   [propget,helpstring("property Beam")] HRESULT Beam([out,retval]IMultiWeb2** beam);
	};

	[
	   object,
	   uuid(6CAF89B9-970C-4C71-97F5-D3F1D6BC09DA),
	   oleautomation,
	   helpstring("INUGirderSection Interface"),
	   pointer_default(unique)
	]
	interface INUGirderSection : IUnknown
	{
	   [propput,helpstring("property Beam")] HRESULT Beam([in]INUBeam* beam);
	   [propget,helpstring("property Beam")] HRESULT Beam([out,retval]INUBeam** beam);
	};

	[
	   object,
	   uuid(191C88B3-4DD6-42e4-AF89-5D31E0EA57A4),
	   oleautomation,
	   helpstring("IUGirderSection Interface"),
	   pointer_default(unique)
	]
	interface IUGirderSection : IUnknown
	{
	   [propput,helpstring("property Beam")] HRESULT Beam([in]IUBeam* beam);
	   [propget,helpstring("property Beam")] HRESULT Beam([out,retval]IUBeam** beam);
	};

	[
	   object,
	   uuid(5CAEAB79-CA95-4957-ACE6-BAF844A2E1E7),
	   oleautomation,
	   helpstring("IUGirderSection2 Interface"),
	   pointer_default(unique)
	]
	interface IUGirderSection2 : IUnknown
	{
	   [propput,helpstring("property Beam")] HRESULT Beam([in]IUBeam2* beam);
	   [propget,helpstring("property Beam")] HRESULT Beam([out,retval]IUBeam2** beam);
	};

	[
	   object,
	   uuid(903A90F2-628F-4251-B9EE-84A3519998D1),
	   oleautomation,
	   helpstring("IVoidedSlabSection Interface"),
	   pointer_default(unique)
	]
	interface IVoidedSlabSection : IUnknown
	{
	   [propput,helpstring("property Beam")] HRESULT Beam([in]IVoidedSlab* beam);
	   [propget,helpstring("property Beam")] HRESULT Beam([out,retval]IVoidedSlab** beam);
	};

	[
	   object,
	   uuid(A938B67A-8208-49d1-AEB5-FB700DBDE584),
	   oleautomation,
	   helpstring("IVoidedSlabSection2 Interface"),
	   pointer_default(unique)
	]
	interface IVoidedSlabSection2 : IUnknown
	{
	   [propput,helpstring("property Beam")] HRESULT Beam([in]IVoidedSlab2* beam);
	   [propget,helpstring("property Beam")] HRESULT Beam([out,retval]IVoidedSlab2** beam);
	};

	[
	   object,
	   uuid(FADE6744-A4F6-4bec-8522-82F578E70A9C),
	   oleautomation,
	   helpstring("IDeckedSlabBeamSection Interface"),
	   pointer_default(unique)
	]
	interface IDeckedSlabBeamSection : IUnknown
	{
	   [propput,helpstring("property Beam")] HRESULT Beam([in]IDeckedSlabBeam* beam);
	   [propget,helpstring("property Beam")] HRESULT Beam([out,retval]IDeckedSlabBeam** beam);
	};

	[
	   object,
	   uuid(90FD25A4-0DA9-4e74-B6D3-CF1D1CF49FD3),
	   oleautomation,
	   helpstring("IBoxBeamSection Interface"),
	   pointer_default(unique)
	]
	interface IBoxBeamSection : IUnknown
	{
	   [propput,helpstring("property Beam")] HRESULT Beam([in]IBoxBeam* beam);
	   [propget,helpstring("property Beam")] HRESULT Beam([out,retval]IBoxBeam** beam);
	};

	[
	   object,
	   uuid(41B8907E-C782-4aa9-993A-7C3AD4B2C5E6),
	   oleautomation,
	   helpstring("ITendonSegment"),
	   pointer_default(unique)
	]
	interface ITendonSegment : IUnknown
	{
	   [propget,helpstring("property Start")] HRESULT Start([out,retval] IPoint3d** start);
	   [propget,helpstring("property End")] HRESULT End([out,retval] IPoint3d** end);
	   [propget,helpstring("property Position")] HRESULT Position([in] Float64 z,[out,retval] IPoint3d** cg);
	   [propget,helpstring("property Slope")] HRESULT Slope([in] Float64 z,[out,retval] IVector3d** slope);
	   [propget,helpstring("property Length")] HRESULT Length([out,retval] Float64* length);
	   [helpstring("method ProjectedLength")] HRESULT ProjectedLength([out] Float64* dx,[out] Float64* dy,[out] Float64* dz);
	};
	[
	   object,
	   uuid(A3A46EA8-56D5-40c6-A21A-6617C1358977),
	   oleautomation,
	   helpstring("ILinearTendonSegment"),
	   pointer_default(unique)
	]
	interface ILinearTendonSegment : ITendonSegment
	{
	   [propput,helpstring("property Start")] HRESULT Start([in] IPoint3d* start);
	   [propput,helpstring("property End")] HRESULT End([in] IPoint3d* end);
	};

	[
	   object,
	   uuid(83E0B7FE-6DE0-4b7f-ABF9-C4949771701A),
	   oleautomation,
	   helpstring("IParabolicTendonSegment"),
	   pointer_default(unique)
	]
	interface IParabolicTendonSegment : ITendonSegment
	{
	   [propput,helpstring("property Start")] HRESULT Start([in] IPoint3d* start);
	   [propput,helpstring("property End")] HRESULT End([in] IPoint3d* end);
      [propput,helpstring("property Slope")] HRESULT Slope([in] Float64 slope);
      [propget,helpstring("property Slope")] HRESULT Slope([out,retval] Float64* slope);
      [propput,helpstring("SlopeEnd")] HRESULT SlopeEnd([in]DirectionType end);
      [propget,helpstring("SlopeEnd")] HRESULT SlopeEnd([out,retval]DirectionType* end);
	};

   [
	   object,
	   uuid(33FDE356-2981-4ff7-AA76-B392FC22262F),
	   oleautomation,
	   helpstring("interface ITendon"),
	   pointer_default(unique)
	]
	interface ITendon : IUnknown
	{
	   [helpstring("method AddSegment")] HRESULT AddSegment([in] ITendonSegment* segment);
	   [propget,helpstring("property Segment")] HRESULT Segment([in] CollectionIndexType index,[out,retval]ITendonSegment** segment);
	   [propget,helpstring("property Count")] HRESULT Count([out,retval]CollectionIndexType* count);
	   [helpstring("method RemoveSegment")] HRESULT RemoveSegment([in] CollectionIndexType index);
	   [helpstring("method ClearSegments")] HRESULT ClearSegments();

      [propget,helpstring("property JackingEnd")] HRESULT JackingEnd([out,retval]JackingEndType* type);
      [propput,helpstring("property JackingEnd")] HRESULT JackingEnd([in]JackingEndType type);

	   [propget,helpstring("property DuctDiameter")] HRESULT DuctDiameter([out,retval]Float64* size);
	   [propput,helpstring("property DuctDiameter")] HRESULT DuctDiameter([in]Float64 size);

	   [propget,helpstring("property StrandCount")] HRESULT StrandCount([out,retval]StrandIndexType* count);
	   [propput,helpstring("property StrandCount")] HRESULT StrandCount([in]StrandIndexType count);

	   [propget,helpstring("property Material")] HRESULT Material([out,retval]IPrestressingStrand** material);
	   [propputref,helpstring("property Material")] HRESULT Material([in]IPrestressingStrand* material);

	   [propget,helpstring("property TendonArea")] HRESULT TendonArea([out,retval]Float64* Apt);

	   [propget,helpstring("property GC")] HRESULT CG([in] Float64 z,[in] TendonMeasure measure,[out,retval]IPoint3d** cg);
	   [propget,helpstring("property Slope")] HRESULT Slope([in] Float64 z,[in] TendonMeasure measure,[out,retval]IVector3d** slope);
	   [propget,helpstring("property Length")] HRESULT Length([out,retval]Float64* length);
	   [propget,helpstring("property Start")] HRESULT Start([out,retval] IPoint3d** start);
	   [propget,helpstring("property End")] HRESULT End([out,retval] IPoint3d** end);
	};

   [
	   object,
	   uuid(B8C5E222-2F3E-4dd3-8B3F-B264341F75E2),
	   oleautomation,
	   helpstring("interface IOffsetTendon"),
	   pointer_default(unique)
   ]
   interface IOffsetTendon : ITendon
   {
      [propputref,helpstring("RefTendon")] HRESULT RefTendon([in]ITendon* tendon);
      [helpstring("AddOffset")] HRESULT AddOffset([in]Float64 z,[in]Float64 offsetX,[in]Float64 offsetY);
   };
	 
	[
	   object,
	   uuid(14299B76-FF0E-4271-897E-9D24F691BA0B),
	   helpstring("IEnumTendonSegments Interface"),
       oleautomation,nonextensible,
	   hidden,restricted,
	   pointer_default(unique)
	]
	interface IEnumTendonSegments : IUnknown
	{
       [helpstring("Clone")] HRESULT Clone([out] IEnumTendonSegments** ppenum);
 	   [helpstring("Next")]  HRESULT Next([in] ULONG celt, [out] ITendonSegment** rgelt, [in,out] ULONG* pceltFetched);
	   [helpstring("Reset")] HRESULT Reset();
	   [helpstring("Skip")]  HRESULT Skip([in] ULONG celt);
	};

	[
	   object,
	   uuid(0A5A7839-29B3-484b-B507-4D8F07EC3A32),
	   helpstring("IEnumTendons Interface"),
       oleautomation,nonextensible,
	   hidden,restricted,
	   pointer_default(unique)
	]
	interface IEnumTendons : IUnknown
	{
       [helpstring("Clone")] HRESULT Clone([out] IEnumTendons** ppenum);
 	   [helpstring("Next")]  HRESULT Next([in] ULONG celt, [out] ITendon** rgelt, [in,out] ULONG* pceltFetched);
	   [helpstring("Reset")] HRESULT Reset();
	   [helpstring("Skip")]  HRESULT Skip([in] ULONG celt);
	};

	[
	   object,
	   uuid(32F8A1B7-A82F-43bb-97BB-33D3C0CE236E),
	   oleautomation,
	   helpstring("interface ITendonCollection"),
	   pointer_default(unique)
	]
	interface ITendonCollection : IUnknown
	{
	   [helpstring("method Add")] HRESULT Add([in]ITendon* tendon);
	   [propget,helpstring("property Item")] HRESULT Item([in]DuctIndexType index,[out,retval]ITendon** tendon);
	   [helpstring("method Remove")] HRESULT Remove([in]DuctIndexType index);
	   [helpstring("method Clear")] HRESULT Clear();
      [propget,helpstring("property Count")] HRESULT Count([out,retval]DuctIndexType* nTendons);
	   [propget,helpstring("property GC")] HRESULT CG([in] Float64 z,[in] TendonMeasure measure,[out,retval]IPoint3d** cg);
	   [propget,helpstring("property Slope")] HRESULT Slope([in] Float64 z,[in] TendonMeasure measure,[out,retval]IVector3d** slope);
	   [helpstring("method Cut")] HRESULT Cut([in] Float64 z,[in]TendonMeasure measure,[out,retval] IPoint3dCollection** points);
       [propget, restricted, helpstring("property _EnumTendons")] HRESULT _EnumTendons([out,retval]IEnumTendons* *enumTendons);
	};

   [
		object,
		uuid(848AE701-0804-40B0-BE5D-1F2C82501233),
		oleautomation,
		helpstring("ILongitudinalPierDescription Interface"),
		pointer_default(unique)
	]
	interface ILongitudinalPierDescription : IUnknown
	{
		[propget, helpstring("property Connectivity")] HRESULT Connectivity([out, retval] ConnectivityType *pVal);
		[propput, helpstring("property Connectivity")] HRESULT Connectivity([in] ConnectivityType newVal);
		[propget, helpstring("property Height")] HRESULT Height([out, retval] Float64 *pVal);
		[propput, helpstring("property Height")] HRESULT Height([in] Float64 newVal);
		[propget, helpstring("property BaseOffset")] HRESULT BaseOffset([out, retval] Float64 *pVal);
		[propput, helpstring("property BaseOffset")] HRESULT BaseOffset([in] Float64 newVal);
      [propget, helpstring("property Length")] HRESULT Length([out,retval] Float64* value);
      [propget, helpstring("property Fractional")] HRESULT Fractional([out,retval] VARIANT_BOOL* bFractional);
      [propput, helpstring("property Fractional")] HRESULT Fractional([in] VARIANT_BOOL bFractional);
		[propget, helpstring("property Symmetrical")] HRESULT Symmetrical([out, retval] VARIANT_BOOL *pVal);
		[propput, helpstring("property Symmetrical")] HRESULT Symmetrical([in] VARIANT_BOOL newVal);

      [helpstring("method AddSegment")] HRESULT AddSegment([in]ISegment* segment);
		[helpstring("method InsertSegment")] HRESULT InsertSegment([in] CollectionIndexType idx,[in]ISegment* segment);
		[helpstring("method MoveSegmentTo")] HRESULT MoveSegmentTo([in] CollectionIndexType fromIdx,[in] CollectionIndexType toIdx);
		[helpstring("method CopySegmentTo")] HRESULT CopySegmentTo([in] CollectionIndexType fromIdx, [in] CollectionIndexType toIdx);
		[helpstring("method RemoveSegment")] HRESULT RemoveSegment([in] CollectionIndexType idx);
		[helpstring("method RemoveSegments")] HRESULT RemoveSegments();
		[helpstring("method GetMemberSegments")] HRESULT GetMemberSegments([out,retval] IFilteredSegmentCollection **ppSeg);
		[helpstring("method GetDistanceFromStartOfSegment")] HRESULT GetDistanceFromStartOfSegment([in] Float64 Location,[out] Float64* dist,[out] ISegmentItem **ppSeg);
		[helpstring("method ReverseSegments")] HRESULT ReverseSegments();
      [propget, helpstring("property SegmentCount")] HRESULT SegmentCount([out,retval] CollectionIndexType* count);
      [propget, helpstring("property SegmentLength")] HRESULT SegmentLength([out,retval] Float64* value);
      [propget, helpstring("property Segment")] HRESULT Segment([in] CollectionIndexType idx,[out,retval] ISegment* *segment);
      [propget,helpstring("property Pier")] HRESULT Pier([out,retval]IPier* *pier);
	};

	[
	   object,
	   uuid(AA989D6D-AFA1-4c54-B44A-E7D33832CC38),
	   helpstring("IEnumPiers Interface"),
      oleautomation,nonextensible,
	   hidden,restricted,
	   pointer_default(unique)
	]
	interface IEnumPiers : IUnknown
	{
       [helpstring("Clone")] HRESULT Clone([out] IEnumPiers** ppenum);
 	   [helpstring("Next")]  HRESULT Next([in] ULONG celt, [out] IPier** rgelt, [in,out] ULONG* pceltFetched);
	   [helpstring("Reset")] HRESULT Reset();
	   [helpstring("Skip")]  HRESULT Skip([in] ULONG celt);
	};
   [
		object,
		uuid(A2D7C5BB-764E-44c4-A599-A8A74D1ED734),
		oleautomation,
		helpstring("IPierCollection Interface"),
		pointer_default(unique)
   ]
   interface IPierCollection : IUnknown
   {
      [propget, restricted, helpstring("returns an enumerator for the collection.")] HRESULT _NewEnum([out, retval] IUnknown** retval);  
      [propget, helpstring("property Item")] HRESULT Item([in] PierIndexType index, [out, retval] IPier* *pVal);
      [propget, helpstring("property Count")] HRESULT Count([out,retval] PierIndexType* count);
      [propget, helpstring("property PierIndex")] HRESULT PierIndex([in]IPier* pier,[out,retval]PierIndexType* index);
      [propget, restricted, helpstring("property _EnumPiers")] HRESULT _EnumPiers([out,retval]IEnumPiers* *enumPiers);
   };

	[
		object,
		uuid(542278AA-5049-40B6-9AB1-FC63C15410B0),
		oleautomation,
		helpstring("IGenericBridge Interface"),
		pointer_default(unique)
	]
	interface IGenericBridge : IUnknown
	{
     [propget, helpstring("property BridgeGeometry")] HRESULT BridgeGeometry([out,retval] IBridgeGeometry* *bridgeGeometry);
     [propget, helpstring("property Alignment")] HRESULT Alignment([out,retval] IAlignment** ppAlignment);
     [propget, helpstring("property Piers")] HRESULT Piers([out,retval] IPierCollection* *piers);
	  [propget, helpstring("property Length")] HRESULT Length([out,retval]Float64* length);
	  [propget, helpstring("property SpanLength")] HRESULT SpanLength([in]SpanIndexType spanIdx,[out,retval]Float64* length);
	  [propputref,helpstring("property Deck")] HRESULT Deck([in] IBridgeDeck* deck);
	  [propget,helpstring("property Deck")] HRESULT Deck([out,retval] IBridgeDeck** deck);
	  [propget, helpstring("property LeftBarrier")] HRESULT LeftBarrier([out,retval] ISidewalkBarrier** barrier);
	  [propputref, helpstring("property LeftBarrier")] HRESULT LeftBarrier([in] ISidewalkBarrier* barrier);
	  [propget, helpstring("property RightBarrier")] HRESULT RightBarrier([out,retval] ISidewalkBarrier** barrier);
	  [propputref, helpstring("property RightBarrier")] HRESULT RightBarrier([in] ISidewalkBarrier* barrier);

	  [propget,helpstring("property WearingSurfaceStage")] HRESULT WearingSurfaceStage([out,retval]StageIndexType* stage);
	  [propput,helpstring("property WearingSurfaceStage")] HRESULT WearingSurfaceStage([in]StageIndexType stage);
	  [propget,helpstring("property WearingSurfaceDepth")] HRESULT WearingSurfaceDepth([out,retval]Float64* d);
	  [propput,helpstring("property WearingSurfaceDepth")] HRESULT WearingSurfaceDepth([in]Float64 d);
	  [propget,helpstring("property WearingSurfaceDensity")] HRESULT WearingSurfaceDensity([out,retval]Float64* d);
	  [propput,helpstring("property WearingSurfaceDensity")] HRESULT WearingSurfaceDensity([in]Float64 d);

     [propget,helpstring("property SacrificialDepthStage")] HRESULT SacrificialDepthStage([out,retval]StageIndexType* stage);
	  [propput,helpstring("property SacrificialDepthStage")] HRESULT SacrificialDepthStage([in]StageIndexType stage);
	  [propget, helpstring("property SacrificialDepth")] HRESULT SacrificialDepth([out,retval]Float64* depth);
	  [propput, helpstring("property SacrificialDepth")] HRESULT SacrificialDepth([in]Float64 depth);

     [helpstring("method CreateSuperstructureMember")] HRESULT CreateSuperstructureMember([in]GirderIDType id,[in] LocationType locationType,[out,retval]ISuperstructureMember** ppMbr);
     [propget, helpstring("property SuperstrucuterMember")] HRESULT SuperstructureMember([in]GirderIDType id,[out,retval]ISuperstructureMember** ppMbr);
     [propget, restricted, helpstring("property _EnumSuperstructureMembers")] HRESULT _EnumSuperstructureMembers([out,retval]IEnumSuperstructureMembers* *enumSSMbrs);
     [propget, helpstring("property SuperstructureMembersAtStation")] HRESULT SuperstructureMembersAtStation([in]Float64 station,[out,retval]IFilteredSuperstructureMemberCollection** ppMbrs);

     [helpstring("method UpdateBridgeModel")] HRESULT UpdateBridgeModel();
	};
	 

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
	[
		uuid(E01789C1-EC18-4c75-B42A-8DDB495C7326),
		helpstring("Rebar")
	]
	coclass Rebar
	{
		[default] interface IRebar;
	};

	[
		uuid(ED89484D-303E-452a-8165-8A6666200BAC),
		helpstring("RebarSectionItem")
	]
	coclass RebarSectionItem
	{
		[default] interface IRebarSectionItem;
	};

	[
		uuid(3D0BCC3C-1A32-44c5-A97E-55BD12DC62F1),
		helpstring("RebarSection")
	]
	coclass RebarSection
	{
		[default] interface IRebarSection;
	};

	[
		uuid(5F9006C8-B6A7-488e-88BB-24304ED93E4D),
		helpstring("RebarRowPattern")
	]
	coclass RebarRowPattern
	{
		[default] interface IRebarRowPattern;
	};

	[
		uuid(33813283-3F28-4291-AE33-AAD126881A38),
		helpstring("RebarLayout")
	]
	coclass RebarLayout
	{
		[default] interface IRebarLayout;
	};

	[
		uuid(BBAE8AB6-5822-47CA-8ECD-0C2AFF18FC0B),
		helpstring("FixedLengthRebarLayoutItem Class")
	]
	coclass FixedLengthRebarLayoutItem
	{
		[default] interface IFixedLengthRebarLayoutItem;
	};

   [
      uuid(1EAAA1BF-51A0-4a07-8C7A-90A9E42863E6),
      helpstring("BridgeDeckRebarPattern")
   ]
   coclass BridgeDeckRebarPattern
   {
      [default] interface IBridgeDeckRebarPattern;
   };

	[
		uuid(148BBC9B-3E74-462b-B90A-4CF617F92264),
		helpstring("BridgeDeckRebarLayoutItem")
	]
	coclass BridgeDeckRebarLayoutItem
	{
		[default] interface IBridgeDeckRebarLayoutItem;
	};

	[
		uuid(BBCE715B-3F02-4859-AA8B-81B9ED11826D),
		helpstring("NegativeMomentBridgeDeckRebarLayoutItem")
	]
	coclass NegativeMomentBridgeDeckRebarLayoutItem
	{
		[default] interface INegativeMomentBridgeDeckRebarLayoutItem;
	};

	[
		uuid(867B7B93-BFF7-4879-980C-B1A2DC8C5DCC),
		helpstring("RebarFactory")
	]
	coclass RebarFactory
	{
		[default] interface IRebarFactory;
	};

   [
		uuid(C228C58A-EE9A-45DE-BF6C-EC2ABD8C9219),
		helpstring("GenericBridge Class")
	]
	coclass GenericBridge
	{
		[default] interface IGenericBridge;
	};
	[
		uuid(72098BAA-D991-4ac1-94AD-B3B932E7EB54),
		helpstring("Pier Class"),
      noncreatable
	]
	coclass Pier
	{
		[default] interface IPier;
      interface IStructuredStorage2;
	};
	[
		uuid(2C363589-02D0-4391-A76F-932FCC891068),
		helpstring("PierCollection Class"),
      noncreatable
	]
	coclass PierCollection
	{
		[default] interface IPierCollection;
      interface IStructuredStorage2;
	};
	[
		uuid(9E183389-4909-4393-A978-8FEBFFC5B529),
		helpstring("LongitudinalPierDescription Class"),
      noncreatable
	]
	coclass LongitudinalPierDescription
	{
		[default] interface ILongitudinalPierDescription;
	};
   [
      uuid(B1875476-2706-4d53-A5CC-27AA77B11E2A),
      noncreatable
   ]
   coclass SuperstructureMember
   {
      [default] interface ISuperstructureMember;
	   interface IItemData;
   };
   
   [
      uuid(2E00BE46-658E-4431-A47A-A380DE4C1A93),
		helpstring("FlangedGirderEndBlockSegment Class")
   ]
   coclass FlangedGirderEndBlockSegment
   {
      [default] interface IFlangedGirderEndBlockSegment;
   };

   [
      uuid(BA0DCAF5-3500-421d-B1E5-2DBDF048A454),
		helpstring("VoidedSlabEndBlockSegment Class")
   ]
   coclass VoidedSlabEndBlockSegment
   {
      [default] interface IVoidedSlabEndBlockSegment;
   };

   [
      uuid(F952F1A6-7FDD-4c6c-96BE-891E500390EF),
		helpstring("DeckedSlabBeamEndBlockSegment Class")
   ]
   coclass DeckedSlabBeamEndBlockSegment
   {
      [default] interface IDeckedSlabBeamEndBlockSegment;
   };

   [
      uuid(B0E705F3-5B54-43e4-B869-222C77B2BD28),
		helpstring("BoxBeamEndBlockSegment Class")
   ]
   coclass BoxBeamEndBlockSegment
   {
      [default] interface IBoxBeamEndBlockSegment;
   };

   [
      uuid(E5E3C9E4-909B-47eb-8B40-E1279A1FE65E),
		helpstring("UGirderSection2EndBlockSegment Class")
   ]
   coclass UGirderSection2EndBlockSegment
   {
      [default] interface IUGirderSection2EndBlockSegment;
   };

   [
      uuid(432FB365-C5D0-46b0-9DCD-65F21A91580F),
		helpstring("TaperedGirderSegment Class")
   ]
   coclass TaperedGirderSegment
   {
      [default] interface ITaperedGirderSegment;
   };

   [
      uuid(7F93F993-02C8-451b-95DE-F0122E95E06C),
		helpstring("ThickenedFlangeBulbTeeSegment Class")
   ]
   coclass ThickenedFlangeBulbTeeSegment
   {
      [default] interface IThickenedFlangeBulbTeeSegment;
   };

   [
      uuid(5AC7585F-2AE5-4b15-9416-7FEA7A53CD03),
      helpstring("PrismaticSegment Class")
   ]
   coclass PrismaticSegment
   {
      [default] interface IPrismaticSegment;
   };

   
   [
      uuid(D3DF465C-E03B-4192-A17E-2DF7BE63CAFB),
		helpstring("FlangedSplicedGirderSegment Class")
   ]
   coclass FlangedSplicedGirderSegment
   {
      [default] interface IFlangedSplicedGirderSegment;
      interface ISplicedGirderSegment;
   };

   
   [
      uuid(9DDC341B-E17F-4d54-9A33-F2C4F052650A),
		helpstring("USplicedGirderSegment Class")
   ]
   coclass USplicedGirderSegment
   {
      [default] interface IUSplicedGirderSegment;
      interface ISplicedGirderSegment;
   };

   [
      uuid(A81D7FA1-41CF-4980-AC98-F0CC555AA181),
      helpstring("SegmentItem Class"),
      noncreatable
   ]
   coclass SegmentItem
   {
      [default] interface ISegmentItem;
   };

	[
		uuid(9217644C-AD9D-4aa2-9A76-29DE6D8CE8B3),
      noncreatable,
      helpstring("FilteredSegmentCollection Class")
	]
	coclass FilteredSegmentCollection
	{
		[default] interface IFilteredSegmentCollection;
	};
	[
		uuid(627E1C31-A568-406e-8583-7887AD068D0B),
      helpstring("FilteredSuperstructureMemberCollection Class"),
      noncreatable
	]
	coclass FilteredSuperstructureMemberCollection
	{
		[default] interface IFilteredSuperstructureMemberCollection;
	};
	[
		uuid(CB50DBAC-CF8D-4204-B581-9C8A7705EEB2),
      noncreatable,
		helpstring("Column Class")
	]
	coclass Column
	{
		[default] interface IColumn;
	};
	[
		uuid(7AE3C6CE-8DB2-467E-8F5A-395B39582325),
      noncreatable,
		helpstring("ColumnSpacing Class")
	]
	coclass ColumnSpacing
	{
		[default] interface IColumnSpacing;
	};
	[
		uuid(0ABE6940-BC27-4E91-8FF0-5A1CD2243153),
      noncreatable,
		helpstring("CrossBeam Class")
	]
	coclass CrossBeam
	{
		[default] interface ICrossBeam;
	};
	[
		uuid(6AF46A10-C19E-438F-B69D-8AB743748CED),
      noncreatable,
		helpstring("TransversePierDescription Class")
	]
	coclass TransversePierDescription
	{
		[default] interface ITransversePierDescription;
	};
	[
		uuid(D3894F80-C95C-4a8b-A839-EAB39D92F196),
		helpstring("Material Class")
	]
	coclass Material
	{
		[default] interface IMaterial;
	};

	[
		uuid(994EBFE4-E2CE-4932-B58D-D0661ED9DE1A),
		helpstring("CastSlab Class")
	]
	coclass CastSlab
	{
	   [default] interface ICastSlab;
	   interface IBridgeDeck;
	};

	[
		uuid(DE317A5D-4C21-4216-BB98-45A1AFAFD8DF),
		helpstring("AlignmentOffsetStrategy Class")
	]
	coclass AlignmentOffsetStrategy
	{
	   [default] interface IAlignmentOffsetStrategy;
	   interface IOverhangPathStrategy;
	};

	[
		uuid(2EDDEA3E-D428-472f-AC4A-3BE464B74ED7),
		helpstring("EdgePathStrategy Class")
	]
	coclass EdgePathStrategy
	{
	   [default] interface IEdgePathStrategy;
	   interface IOverhangPathStrategy;
	};

	[
		uuid(1CDE4F4B-59FA-4326-8BA6-7F9410DB31E9),
		helpstring("PrecastSlab Class")
	]
	coclass PrecastSlab
	{
	   [default] interface IPrecastSlab;
	   interface IBridgeDeck;
	};

	[
		uuid(B7DDD2C1-B544-4bd0-91DA-40E7C3A2A9BC),
		helpstring("OverlaySlab Class")
	]
	coclass OverlaySlab
	{
	   [default] interface IOverlaySlab;
	   interface IBridgeDeck;
	};

	[
		uuid(17B94525-BDF5-4036-8EA5-EE6D0C1DDBED),
		helpstring("FlangedGirderSection Class")
	]
	coclass FlangedGirderSection
	{
	   [default] interface IFlangedGirderSection;
	   interface IGirderSection;
	   interface IPrestressedGirderSection;
	   interface IShape;
      interface ICompositeShape;
	};

	[
		uuid(90F25ADA-74B8-4171-80CA-A445519885AC),
		helpstring("BulbTeeSection Class")
	]
	coclass BulbTeeSection
	{
	   [default] interface IBulbTeeSection;
	   interface IGirderSection;
	   interface IPrestressedGirderSection;
	   interface IShape;
	};

	[
		uuid(D48BAC9D-876F-47ed-8B11-058009337492),
		helpstring("MultiWebSection Class")
	]
	coclass MultiWebSection
	{
	   [default] interface IMultiWebSection;
	   interface IGirderSection;
	   interface IPrestressedGirderSection;
	   interface IShape;
	};

	[
		uuid(E72B28B7-A74F-4245-AC74-015B7FB5B719),
		helpstring("MultiWeb2Section Class")
	]
	coclass MultiWebSection2
	{
	   [default] interface IMultiWebSection2;
	   interface IGirderSection;
	   interface IPrestressedGirderSection;
	   interface IShape;
	};

	[
		uuid(5CD0487E-041E-4ADE-973D-0B6AE4472478),
		helpstring("NUGirderSection Class")
	]
	coclass NUGirderSection
	{
	   [default] interface INUGirderSection;
	   interface IGirderSection;
	   interface IPrestressedGirderSection;
	   interface IShape;
	};

	[
		uuid(A9D10C18-7AEA-4846-8165-DE3460B1BEAD),
		helpstring("UGirderSection Class")
	]
	coclass UGirderSection
	{
	   [default] interface IUGirderSection;
	   interface IGirderSection;
	   interface IPrestressedGirderSection;
	   interface IShape;
	};

	[
		uuid(E8A71ACA-0C4E-495c-AC84-2E26C114A410),
		helpstring("UGirderSection2 Class")
	]
	coclass UGirderSection2
	{
	   [default] interface IUGirderSection2;
	   interface IGirderSection;
	   interface IPrestressedGirderSection;
	   interface IShape;
	};

	[
	   uuid(C11EBF7B-A6AA-44b9-9642-E408300AC702),
	   helpstring("VoidedSlabSection Class")
	]
	coclass VoidedSlabSection
	{
	   [default] interface IVoidedSlabSection;
	   interface IGirderSection;
	   interface IPrestressedGirderSection;
	   interface IShape;
	};

	[
	   uuid(23E0A018-EB42-46d0-82EB-28811AF57C5B),
	   helpstring("VoidedSlabSection2 Class")
	]
	coclass VoidedSlabSection2
	{
	   [default] interface IVoidedSlabSection2;
	   interface IGirderSection;
	   interface IPrestressedGirderSection;
	   interface IShape;
	};

	[
	   uuid(DED3DC73-280E-4fd2-8C1D-BCE96BB78750),
	   helpstring("DeckedSlabBeamSection Class")
	]
	coclass DeckedSlabBeamSection
	{
	   [default] interface IDeckedSlabBeamSection;
	   interface IGirderSection;
	   interface IPrestressedGirderSection;
	   interface IShape;
	};

	[
	   uuid(D6CB0FE7-AD6E-449f-91C7-6A4CDEEA5F70),
	   helpstring("BoxBeamSection Class")
	]
	coclass BoxBeamSection
	{
	   [default] interface IBoxBeamSection;
	   interface IGirderSection;
	   interface IPrestressedGirderSection;
	   interface IShape;
	};

	[
		uuid(9B910467-C7CE-4b56-B2C8-0CD47B73FBC2),
		helpstring("GenericBarrier Class")
	]
	coclass GenericBarrier
	{
	   [default] interface IGenericBarrier;
	};

	[
		uuid(0386B8E1-50E2-42bd-A93B-C2933F9BD1C0),
		helpstring("FShapeBarrier Class")
	]
	coclass FShapeBarrier
	{
	   [default] interface IFShapeBarrier;
	};
   
   [
		uuid(8B5D872B-21C3-41f4-BFFB-A79E58CB9AC8),
		helpstring("SidewalkBarrier Class")
	]
	coclass SidewalkBarrier
	{
	   [default] interface ISidewalkBarrier;
	};

	[
	   uuid(C1F73F53-6D63-44be-953F-3254EBB4F91A),
	   helpstring("LinearTendonSegment")
	]
	coclass LinearTendonSegment
	{
	   [default] interface ILinearTendonSegment;
	   interface ITendonSegment;
	};

	[
	   uuid(99F3888C-7581-4fe6-BBB5-9D527CD8BEB6),
	   helpstring("ParabolicTendonSegment")
	]
	coclass ParabolicTendonSegment
	{
	   [default] interface IParabolicTendonSegment;
	   interface ITendonSegment;
	};

	[
	   uuid(68AF9D7E-A0B7-4174-8304-37E595725480),
	   helpstring("Tendon")
	]
	coclass Tendon
	{
	   [default] interface ITendon;
	};


	[
	   uuid(C4064D20-D146-48dd-8B89-685CAC219EAB),
	   helpstring("OffsetTendon")
	]
	coclass OffsetTendon
	{
	   [default] interface IOffsetTendon;
	};

	[
	   uuid(505D6372-B76F-4d91-9013-E71E3D17C4F6),
	   helpstring("TendonCollection")
	]
	coclass TendonCollection
	{
	   [default] interface ITendonCollection;
	};

	[
	   uuid(9AC4752D-388F-4536-ABB6-B13933322915),
	   helpstring("PrestressingStrand")
	]
	coclass PrestressingStrand
	{
	   [default] interface IPrestressingStrand;
	};

};
