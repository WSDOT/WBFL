///////////////////////////////////////////////////////////////////////
// System - WBFL low level system services
// Copyright © 1999-2013  Washington State Department of Transportation
//                        Bridge and Structures Office
//
// This library is a part of the Washington Bridge Foundation Libraries
// and was developed as part of the Alternate Route Project
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the Alternate Route Library Open Source License as published by 
// the Washington State Department of Transportation, Bridge and Structures Office.
//
// This program is distributed in the hope that it will be useful, but is distributed 
// AS IS, WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
// or FITNESS FOR A PARTICULAR PURPOSE. See the Alternate Route Library Open Source 
// License for more details.
//
// You should have received a copy of the Alternate Route Library Open Source License 
// along with this program; if not, write to the Washington State Department of 
// Transportation, Bridge and Structures Office, P.O. Box  47340, 
// Olympia, WA 98503, USA or e-mail Bridge_Support@wsdot.wa.gov
///////////////////////////////////////////////////////////////////////

cpp_quote("#if _WIN32_WINNT < 0x0600")
cpp_quote("#define MAXUINT64   ((UINT64)~((UINT64)0))")
cpp_quote("#define MAXUINT32   ((UINT32)~((UINT32)0))")
cpp_quote("#define MAXINT16    ((INT16)(MAXUINT16 >> 1))")
cpp_quote("#define MAXINT32    ((INT32)(MAXUINT32 >> 1))")
cpp_quote("#define MAXINT64    ((INT64)(MAXUINT64 >> 1))")
cpp_quote("#endif")

import "basetsd.h";

cpp_quote("#if defined UNICODE || defined _UNICODE")
cpp_quote("#define _tstring wstring")
cpp_quote("#define _tostringstream wostringstream ")
cpp_quote("#define _tistringstream wistringstream ")
cpp_quote("#define _tifstream wifstream")
cpp_quote("#define _tofstream wofstream")
cpp_quote("#define _tostream wostream")
cpp_quote("#define _tistream wistream")
cpp_quote("#define _tcout wcout")
cpp_quote("#else")
cpp_quote("#define _tstring string")
cpp_quote("#define _tostringstream ostringstream")
cpp_quote("#define _tistringstream istringstream")
cpp_quote("#define _tifstream ifstream")
cpp_quote("#define _tofstream ofstream")
cpp_quote("#define _tostream ostream")
cpp_quote("#define _tistream istream")
cpp_quote("#define _tcout cout")
cpp_quote("#endif")

cpp_quote("#include <limits.h>")
cpp_quote("#include <float.h>")

cpp_quote("typedef        char    Int8;") // MIDL makes this an unsigned char
cpp_quote("typedef long double Float80;") // long double isn't an MIDL type

cpp_quote("#define Int8_Max      SCHAR_MAX")
cpp_quote("#define Int8_Min      SCHAR_MIN")
cpp_quote("#define Int16_Max     SHRT_MAX")
cpp_quote("#define Int16_Min     SHRT_MIN")
cpp_quote("#define Int32_Max     LONG_MAX")
cpp_quote("#define Int32_Min     LONG_MIN")
cpp_quote("#define Int64_Max     LLONG_MAX")
cpp_quote("#define Int64_Min     LLONG_MIN")
cpp_quote("#define Uint8_Max     UCHAR_MAX")
cpp_quote("#define Uint16_Max    USHRT_MAX")
cpp_quote("#define Uint32_Max    ULONG_MAX")
cpp_quote("#define Uint64_Max    ULLONG_MAX")
cpp_quote("#define Float32_Max   FLT_MAX")
cpp_quote("#define Float32_Min   FLT_MIN")
cpp_quote("#define Float32_Inf   std::numeric_limits<Float32>::infinity()")
cpp_quote("#define Float64_Max   DBL_MAX")
cpp_quote("#define Float64_Inf   std::numeric_limits<Float64>::infinity()")
cpp_quote("#define Float64_Min   DBL_MIN")
cpp_quote("#define Float80_Max   LDBL_MAX")
cpp_quote("#define Float80_Min   LDBL_MIN")

typedef signed short   Int16;
typedef INT32 Int32;

typedef unsigned char  Uint8;
typedef unsigned short Uint16;
typedef UINT32 Uint32;

typedef INT64 Int64;
typedef UINT64 Uint64;

typedef float  Float32;
typedef double Float64;

#if defined VBA_BUILD
typedef INT16 IDType;
cpp_quote("#pragma warning(disable:4018 4244 4267)")
cpp_quote("#define INVALID_ID -1")
cpp_quote("#define MAX_ID MAXINT16")
cpp_quote("#define VARIANT2ID(_var_) _var_.intVal")
cpp_quote("#define VT_ID VT_INT")
#else
#if defined _WIN64
typedef INT64   IDType;
cpp_quote("#define INVALID_ID -1")
cpp_quote("#define MAX_ID MAXINT64")
cpp_quote("#define VARIANT2ID(_var_) _var_.llVal")
cpp_quote("#define VT_ID VT_I8")
#else
typedef INT32   IDType;
cpp_quote("#define INVALID_ID -1")
cpp_quote("#define MAX_ID MAXINT32")
cpp_quote("#define VARIANT2ID(_var_) _var_.lVal")
cpp_quote("#define VT_ID VT_I4")
#endif
#endif

typedef IDType  SpanIDType;
typedef IDType  PierIDType;
typedef IDType  JointIDType;
typedef IDType  MemberIDType;
typedef IDType  SupportIDType;
typedef IDType  LoadIDType;
typedef IDType  PoiIDType;
typedef IDType  LoadCaseIDType;
typedef IDType  LoadGroupIDType;
typedef IDType  LoadCombinationIDType;
typedef IDType  GirderIDType;
typedef IDType  GroupIDType;
typedef IDType  SegmentIDType;
typedef IDType  ClosureIDType;
typedef IDType  StageIDType;
typedef IDType  EventIDType;

typedef Int32 BarSizeType;



// VBA does not support UINT32 or UINT64 so we need to use LONG as the IndexType for VBA builds
#if defined VBA_BUILD
typedef long IndexType;
cpp_quote("#define MAX_INDEX (MAX_LONG-1)")
cpp_quote("#define INVALID_INDEX    -1")
cpp_quote("#define VARIANT2INDEX(_var_) _var_.lVal")
cpp_quote("#define VT_INDEX VT_I4")
#else
#if defined _WIN64
typedef UINT64 IndexType;
cpp_quote("#define MAX_INDEX (MAXUINT64-1)")
cpp_quote("#define INVALID_INDEX (MAX_INDEX+1)")
cpp_quote("#define VARIANT2INDEX(_var_) _var_.ullVal")
cpp_quote("#define VT_INDEX VT_UI8")
#else
typedef UINT32 IndexType;
cpp_quote("#define MAX_INDEX (MAXUINT32-1)")
cpp_quote("#define INVALID_INDEX (MAX_INDEX+1)")
cpp_quote("#define VARIANT2INDEX(_var_) _var_.ulVal")
cpp_quote("#define VT_INDEX VT_UI4")
#endif
#endif

cpp_quote("#define FIXED_AXLE_TRUCK INVALID_INDEX")
cpp_quote("#define ALL_SPANS        INVALID_INDEX")
cpp_quote("#define ALL_PIERS        INVALID_INDEX")
cpp_quote("#define ALL_GIRDERS      INVALID_INDEX")
cpp_quote("#define ALL_GROUPS       INVALID_INDEX")
cpp_quote("#define ALL_SEGMENTS     INVALID_INDEX")
cpp_quote("#define ALL_STAGES       INVALID_INDEX")
cpp_quote("#define ALL_DUCTS        INVALID_INDEX")
cpp_quote("#define INVALID_BAR_SIZE INVALID_INDEX")

typedef IndexType CollectionIndexType;
typedef IndexType StageIndexType;
typedef IndexType EventIndexType;
typedef IndexType SupportIndexType;
typedef IndexType StrandIndexType;
typedef IndexType SpanIndexType;
typedef IndexType GirderIndexType;
typedef IndexType PierIndexType;
typedef IndexType ColumnIndexType;
typedef IndexType GroupIndexType;
typedef IndexType SpacingIndexType;
typedef IndexType VehicleIndexType;
typedef IndexType AxleIndexType;
typedef IndexType GridIndexType;
typedef IndexType SectionIndexType;
typedef IndexType RowIndexType;
typedef IndexType SegmentIndexType;
typedef IndexType MatingSurfaceIndexType;
typedef IndexType WebIndexType;
typedef IndexType FlangeIndexType;
typedef IndexType SplittingPlaneIndexType;
typedef IndexType ZoneIndexType;
typedef IndexType DuctIndexType;
typedef IndexType IntervalIndexType;

cpp_quote("typedef Int64 SpanGirderHashType;")
cpp_quote("typedef Int64 PierGirderHashType;")

cpp_quote("inline Uint16 make_Uint16(Uint8  lo, Uint8  hi) {return (Uint16)(lo & 0xFF)  | (Uint16)(hi & 0xFF) << 8;}")
cpp_quote("inline Int16  make_Int16 (Int8   lo, Int8   hi) {return (Int16)(lo  & 0xFF) | (Int16) (hi & 0xFF)  << 8;}")
cpp_quote("inline Uint32 make_Uint32(Uint16 lo, Uint16 hi) {return (Uint32)(lo & 0xFFFF) | (Uint32)(hi & 0xFFFF) << 16;}")
cpp_quote("inline Int32  make_Int32 (Int16  lo, Int16  hi) {return (Int32)( lo & 0xFFFF) | (Int32)( hi & 0xFFFF) << 16;}")

cpp_quote("inline Uint16 low_Uint16(Uint32 u32) {return u32 & 0xFF;}")
cpp_quote("inline Int16  low_Int16(Int32 u32)   {return u32 & 0xFF;}")

cpp_quote("inline Uint16 high_Uint16(Uint32 u32) {  return u32 >> 16;}")
cpp_quote("inline Int16  high_Int16(Uint32 u32)  {  return u32 >> 16;}")

cpp_quote("inline Uint8 low_Uint8(Uint16 u16){ return u16 & 0xFF;}")
cpp_quote("inline Int8  low_Int8(Uint16 u16) { return u16 & 0xFF;}")

cpp_quote("inline Uint8 high_Uint8(Uint16 u16) { return u16 >> 8;}")
cpp_quote("inline Int8  high_Int8(Uint16 u16)  { return u16 >> 8;}")

cpp_quote("inline Uint64 make_Uint64(Uint32  lo, Uint32  hi) {return (Uint64)(lo &  0xFFFFFFFF) | (Uint64)( hi &  0xFFFFFFFF) << 32;}")
cpp_quote("inline Uint32 low_Uint32(Uint64 u64) {return u64 & 0xFFFFFFFF;}")
cpp_quote("inline Uint32 high_Uint32(Uint64 u64) {return u64 >> 32;}")

cpp_quote("inline Int64 make_Int64 (Int32  lo, Int32  hi) {return (Int64)(lo &  0xFFFFFFFF) | (Int64)( hi &  0xFFFFFFFF) << 32;}")
cpp_quote("inline Int32 low_Int32(Int64 u64) {return u64 & 0xFFFFFFFF;}")
cpp_quote("inline Int32 high_Int32(Int64 u64) {return u64 >> 32;}")

cpp_quote("inline SpanGirderHashType HashSpanGirder(SpanIndexType span,GirderIndexType girder) { return make_Int64((Int32)span,(Int32)girder); }")
cpp_quote("inline void UnhashSpanGirder(SpanGirderHashType hash,SpanIndexType* span,GirderIndexType* girder) { *span =  low_Int32(hash); *girder = high_Int32(hash); }")
cpp_quote("inline PierGirderHashType HashPierGirder(PierIndexType pier,GirderIndexType girder) { return make_Int64((Int32)pier,(Int32)girder); }")
cpp_quote("inline void UnhashPierGirder(PierGirderHashType hash,PierIndexType* pier,GirderIndexType* girder) { *pier =  low_Int32(hash); *girder = high_Int32(hash); }")
