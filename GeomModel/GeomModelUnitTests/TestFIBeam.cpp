#include "pch.h"
#include "CppUnitTest.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace WBFL::Geometry;

namespace GeomModelUnitTest
{
	TEST_CLASS(TestFIBeam)
	{
	public:
		
		FIBeam GetTestBeam()
		{
			FIBeam beam;
			beam.SetD1(3.5);
			beam.SetD2(1.5);
			beam.SetD3(3.5);
			beam.SetD4(7.0);
			beam.SetD5(7.5);
			beam.SetW1(17.0);
			beam.SetW2(3.5);
			beam.SetW3(38.0);
			beam.SetH(36.0);
			beam.SetT(7.0);
			beam.SetR(15.0);
			beam.SetC1(0.75);
			return beam;
		}

		TEST_METHOD(BoundingBox)
		{
			auto beam = GetTestBeam();
			auto box = beam.GetBoundingBox();

			Assert::IsTrue(IsEqual(box.Left(), -24.0));
			Assert::IsTrue(IsEqual(box.Right(), 24.0));
			Assert::IsTrue(IsEqual(box.Top(), 36.));
			Assert::IsTrue(IsEqual(box.Bottom(), 0.00));
		}

		TEST_METHOD(ShapeProperties)
		{
			auto beam = GetTestBeam();
			auto props = beam.GetProperties();
		
			Assert::IsTrue(IsEqual(props.GetArea(), 806.58200235127413));
			Assert::IsTrue(IsEqual(props.GetIxx(), 127544.72423245813));
			Assert::IsTrue(IsEqual(props.GetIyy(), 81070.147203141241));
			Assert::IsTrue(IsEqual(props.GetIxy(), 0.0));
			Assert::IsTrue(IsEqual(props.GetCentroid().X(), 0.0));
			Assert::IsTrue(IsEqual(props.GetCentroid().Y(), 16.489777392236231));
			Assert::IsTrue(props.GetCoordinateSystem() == ShapeProperties::CoordinateSystemType::Centroidal);

			Assert::IsTrue(IsEqual(props.GetXleft(), 24.0));
			Assert::IsTrue(IsEqual(props.GetXright(), 24.0));
			Assert::IsTrue(IsEqual(props.GetYtop(), 36.0 - props.GetCentroid().Y()));
			Assert::IsTrue(IsEqual(props.GetYbottom(), props.GetCentroid().Y()));

			Assert::IsTrue(IsEqual(beam.GetPerimeter(), 206.57252238160135));
		}

		TEST_METHOD(FurthestDistance)
		{
			auto beam = GetTestBeam();

			Point2d p1(0, 20);
			Point2d p2(100, 20);
			Line2d line(p1, p2);

			// Shape on right
			Assert::IsTrue(IsEqual(beam.GetFurthestDistance(line, Line2d::Side::Right), 20.000));

			// shape on left
			p1.Move(0, -20);
			p2.Move(100, -20);
			line.ThroughPoints(p1, p2);
			Assert::IsTrue(IsEqual(beam.GetFurthestDistance(line, Line2d::Side::Right), -20.000));
		}

		TEST_METHOD(PolyPoints)
		{
			auto beam = GetTestBeam();
			auto points = beam.GetPolyPoints();

			Assert::IsTrue(points.size() == 219);
			int i = 0;
			Assert::IsTrue(points[i++] == Point2d(0.000000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(-18.250000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(-19.000000, 0.750000));
			Assert::IsTrue(points[i++] == Point2d(-19.000000, 7.000000));
			Assert::IsTrue(points[i++] == Point2d(-11.966586, 10.403265));
			Assert::IsTrue(points[i++] == Point2d(-11.815754, 10.477293));
			Assert::IsTrue(points[i++] == Point2d(-11.665761, 10.553007));
			Assert::IsTrue(points[i++] == Point2d(-11.516625, 10.630396));
			Assert::IsTrue(points[i++] == Point2d(-11.368365, 10.709450));
			Assert::IsTrue(points[i++] == Point2d(-11.221001, 10.790160));
			Assert::IsTrue(points[i++] == Point2d(-11.074549, 10.872516));
			Assert::IsTrue(points[i++] == Point2d(-10.929029, 10.956507));
			Assert::IsTrue(points[i++] == Point2d(-10.784459, 11.042122));
			Assert::IsTrue(points[i++] == Point2d(-10.640857, 11.129352));
			Assert::IsTrue(points[i++] == Point2d(-10.498242, 11.218185));
			Assert::IsTrue(points[i++] == Point2d(-10.356630, 11.308609));
			Assert::IsTrue(points[i++] == Point2d(-10.216040, 11.400614));
			Assert::IsTrue(points[i++] == Point2d(-10.076489, 11.494189));
			Assert::IsTrue(points[i++] == Point2d(-9.937995, 11.589320));
			Assert::IsTrue(points[i++] == Point2d(-9.800576, 11.685997));
			Assert::IsTrue(points[i++] == Point2d(-9.664248, 11.784206));
			Assert::IsTrue(points[i++] == Point2d(-9.529028, 11.883937));
			Assert::IsTrue(points[i++] == Point2d(-9.394934, 11.985176));
			Assert::IsTrue(points[i++] == Point2d(-9.261983, 12.087911));
			Assert::IsTrue(points[i++] == Point2d(-9.130191, 12.192128));
			Assert::IsTrue(points[i++] == Point2d(-8.999574, 12.297816));
			Assert::IsTrue(points[i++] == Point2d(-8.870149, 12.404959));
			Assert::IsTrue(points[i++] == Point2d(-8.741933, 12.513546));
			Assert::IsTrue(points[i++] == Point2d(-8.614940, 12.623562));
			Assert::IsTrue(points[i++] == Point2d(-8.489189, 12.734993));
			Assert::IsTrue(points[i++] == Point2d(-8.364693, 12.847826));
			Assert::IsTrue(points[i++] == Point2d(-8.241469, 12.962047));
			Assert::IsTrue(points[i++] == Point2d(-8.119532, 13.077640));
			Assert::IsTrue(points[i++] == Point2d(-7.998897, 13.194592));
			Assert::IsTrue(points[i++] == Point2d(-7.879580, 13.312888));
			Assert::IsTrue(points[i++] == Point2d(-7.761595, 13.432513));
			Assert::IsTrue(points[i++] == Point2d(-7.644958, 13.553453));
			Assert::IsTrue(points[i++] == Point2d(-7.529683, 13.675691));
			Assert::IsTrue(points[i++] == Point2d(-7.415784, 13.799212));
			Assert::IsTrue(points[i++] == Point2d(-7.303276, 13.924002));
			Assert::IsTrue(points[i++] == Point2d(-7.192173, 14.050044));
			Assert::IsTrue(points[i++] == Point2d(-7.082488, 14.177322));
			Assert::IsTrue(points[i++] == Point2d(-6.974237, 14.305821));
			Assert::IsTrue(points[i++] == Point2d(-6.867431, 14.435525));
			Assert::IsTrue(points[i++] == Point2d(-6.762085, 14.566417));
			Assert::IsTrue(points[i++] == Point2d(-6.658211, 14.698481));
			Assert::IsTrue(points[i++] == Point2d(-6.555823, 14.831699));
			Assert::IsTrue(points[i++] == Point2d(-6.454934, 14.966057));
			Assert::IsTrue(points[i++] == Point2d(-6.355556, 15.101536));
			Assert::IsTrue(points[i++] == Point2d(-6.257702, 15.238119));
			Assert::IsTrue(points[i++] == Point2d(-6.161384, 15.375791));
			Assert::IsTrue(points[i++] == Point2d(-6.066614, 15.514532));
			Assert::IsTrue(points[i++] == Point2d(-5.973404, 15.654326));
			Assert::IsTrue(points[i++] == Point2d(-5.881766, 15.795156));
			Assert::IsTrue(points[i++] == Point2d(-5.791711, 15.937003));
			Assert::IsTrue(points[i++] == Point2d(-5.703251, 16.079850));
			Assert::IsTrue(points[i++] == Point2d(-5.616396, 16.223679));
			Assert::IsTrue(points[i++] == Point2d(-5.531157, 16.368471));
			Assert::IsTrue(points[i++] == Point2d(-5.447546, 16.514210));
			Assert::IsTrue(points[i++] == Point2d(-5.365572, 16.660875));
			Assert::IsTrue(points[i++] == Point2d(-5.285247, 16.808450));
			Assert::IsTrue(points[i++] == Point2d(-5.206579, 16.956915));
			Assert::IsTrue(points[i++] == Point2d(-5.129580, 17.106252));
			Assert::IsTrue(points[i++] == Point2d(-5.054257, 17.256442));
			Assert::IsTrue(points[i++] == Point2d(-4.980622, 17.407467));
			Assert::IsTrue(points[i++] == Point2d(-4.908684, 17.559307));
			Assert::IsTrue(points[i++] == Point2d(-4.838450, 17.711943));
			Assert::IsTrue(points[i++] == Point2d(-4.769931, 17.865356));
			Assert::IsTrue(points[i++] == Point2d(-4.703134, 18.019527));
			Assert::IsTrue(points[i++] == Point2d(-4.638068, 18.174437));
			Assert::IsTrue(points[i++] == Point2d(-4.574742, 18.330065));
			Assert::IsTrue(points[i++] == Point2d(-4.513163, 18.486393));
			Assert::IsTrue(points[i++] == Point2d(-4.453338, 18.643402));
			Assert::IsTrue(points[i++] == Point2d(-4.395276, 18.801070));
			Assert::IsTrue(points[i++] == Point2d(-4.338984, 18.959379));
			Assert::IsTrue(points[i++] == Point2d(-4.284469, 19.118308));
			Assert::IsTrue(points[i++] == Point2d(-4.231737, 19.277838));
			Assert::IsTrue(points[i++] == Point2d(-4.180795, 19.437949));
			Assert::IsTrue(points[i++] == Point2d(-4.131651, 19.598621));
			Assert::IsTrue(points[i++] == Point2d(-4.084308, 19.759832));
			Assert::IsTrue(points[i++] == Point2d(-4.038775, 19.921564));
			Assert::IsTrue(points[i++] == Point2d(-3.995056, 20.083796));
			Assert::IsTrue(points[i++] == Point2d(-3.953157, 20.246507));
			Assert::IsTrue(points[i++] == Point2d(-3.913083, 20.409678));
			Assert::IsTrue(points[i++] == Point2d(-3.874839, 20.573287));
			Assert::IsTrue(points[i++] == Point2d(-3.838430, 20.737314));
			Assert::IsTrue(points[i++] == Point2d(-3.803861, 20.901739));
			Assert::IsTrue(points[i++] == Point2d(-3.771136, 21.066540));
			Assert::IsTrue(points[i++] == Point2d(-3.740259, 21.231698));
			Assert::IsTrue(points[i++] == Point2d(-3.711233, 21.397191));
			Assert::IsTrue(points[i++] == Point2d(-3.684064, 21.563000));
			Assert::IsTrue(points[i++] == Point2d(-3.658753, 21.729101));
			Assert::IsTrue(points[i++] == Point2d(-3.635304, 21.895477));
			Assert::IsTrue(points[i++] == Point2d(-3.613720, 22.062104));
			Assert::IsTrue(points[i++] == Point2d(-3.594004, 22.228962));
			Assert::IsTrue(points[i++] == Point2d(-3.576159, 22.396031));
			Assert::IsTrue(points[i++] == Point2d(-3.560185, 22.563290));
			Assert::IsTrue(points[i++] == Point2d(-3.546087, 22.730717));
			Assert::IsTrue(points[i++] == Point2d(-3.533864, 22.898291));
			Assert::IsTrue(points[i++] == Point2d(-3.523520, 23.065991));
			Assert::IsTrue(points[i++] == Point2d(-3.515054, 23.233797));
			Assert::IsTrue(points[i++] == Point2d(-3.508468, 23.401688));
			Assert::IsTrue(points[i++] == Point2d(-3.503764, 23.569641));
			Assert::IsTrue(points[i++] == Point2d(-3.500941, 23.737637));
			Assert::IsTrue(points[i++] == Point2d(-3.500000, 23.905654));
			Assert::IsTrue(points[i++] == Point2d(-3.500000, 27.500000));
			Assert::IsTrue(points[i++] == Point2d(-7.000000, 31.000000));
			Assert::IsTrue(points[i++] == Point2d(-24.000000, 32.500000));
			Assert::IsTrue(points[i++] == Point2d(-24.000000, 36.000000));
			Assert::IsTrue(points[i++] == Point2d(0.000000, 36.000000));
			Assert::IsTrue(points[i++] == Point2d(24.000000, 36.000000));
			Assert::IsTrue(points[i++] == Point2d(24.000000, 32.500000));
			Assert::IsTrue(points[i++] == Point2d(7.000000, 31.000000));
			Assert::IsTrue(points[i++] == Point2d(3.500000, 27.500000));
			Assert::IsTrue(points[i++] == Point2d(3.500000, 23.905654));
			Assert::IsTrue(points[i++] == Point2d(3.500941, 23.737637));
			Assert::IsTrue(points[i++] == Point2d(3.503764, 23.569641));
			Assert::IsTrue(points[i++] == Point2d(3.508468, 23.401688));
			Assert::IsTrue(points[i++] == Point2d(3.515054, 23.233797));
			Assert::IsTrue(points[i++] == Point2d(3.523520, 23.065991));
			Assert::IsTrue(points[i++] == Point2d(3.533864, 22.898291));
			Assert::IsTrue(points[i++] == Point2d(3.546087, 22.730717));
			Assert::IsTrue(points[i++] == Point2d(3.560185, 22.563290));
			Assert::IsTrue(points[i++] == Point2d(3.576159, 22.396031));
			Assert::IsTrue(points[i++] == Point2d(3.594004, 22.228962));
			Assert::IsTrue(points[i++] == Point2d(3.613720, 22.062104));
			Assert::IsTrue(points[i++] == Point2d(3.635304, 21.895477));
			Assert::IsTrue(points[i++] == Point2d(3.658753, 21.729101));
			Assert::IsTrue(points[i++] == Point2d(3.684064, 21.563000));
			Assert::IsTrue(points[i++] == Point2d(3.711233, 21.397191));
			Assert::IsTrue(points[i++] == Point2d(3.740259, 21.231698));
			Assert::IsTrue(points[i++] == Point2d(3.771136, 21.066540));
			Assert::IsTrue(points[i++] == Point2d(3.803861, 20.901739));
			Assert::IsTrue(points[i++] == Point2d(3.838430, 20.737314));
			Assert::IsTrue(points[i++] == Point2d(3.874839, 20.573287));
			Assert::IsTrue(points[i++] == Point2d(3.913083, 20.409678));
			Assert::IsTrue(points[i++] == Point2d(3.953157, 20.246507));
			Assert::IsTrue(points[i++] == Point2d(3.995056, 20.083796));
			Assert::IsTrue(points[i++] == Point2d(4.038775, 19.921564));
			Assert::IsTrue(points[i++] == Point2d(4.084308, 19.759832));
			Assert::IsTrue(points[i++] == Point2d(4.131651, 19.598621));
			Assert::IsTrue(points[i++] == Point2d(4.180795, 19.437949));
			Assert::IsTrue(points[i++] == Point2d(4.231737, 19.277838));
			Assert::IsTrue(points[i++] == Point2d(4.284469, 19.118308));
			Assert::IsTrue(points[i++] == Point2d(4.338984, 18.959379));
			Assert::IsTrue(points[i++] == Point2d(4.395276, 18.801070));
			Assert::IsTrue(points[i++] == Point2d(4.453338, 18.643402));
			Assert::IsTrue(points[i++] == Point2d(4.513163, 18.486393));
			Assert::IsTrue(points[i++] == Point2d(4.574742, 18.330065));
			Assert::IsTrue(points[i++] == Point2d(4.638068, 18.174437));
			Assert::IsTrue(points[i++] == Point2d(4.703134, 18.019527));
			Assert::IsTrue(points[i++] == Point2d(4.769931, 17.865356));
			Assert::IsTrue(points[i++] == Point2d(4.838450, 17.711943));
			Assert::IsTrue(points[i++] == Point2d(4.908684, 17.559307));
			Assert::IsTrue(points[i++] == Point2d(4.980622, 17.407467));
			Assert::IsTrue(points[i++] == Point2d(5.054257, 17.256442));
			Assert::IsTrue(points[i++] == Point2d(5.129580, 17.106252));
			Assert::IsTrue(points[i++] == Point2d(5.206579, 16.956915));
			Assert::IsTrue(points[i++] == Point2d(5.285247, 16.808450));
			Assert::IsTrue(points[i++] == Point2d(5.365572, 16.660875));
			Assert::IsTrue(points[i++] == Point2d(5.447546, 16.514210));
			Assert::IsTrue(points[i++] == Point2d(5.531157, 16.368471));
			Assert::IsTrue(points[i++] == Point2d(5.616396, 16.223679));
			Assert::IsTrue(points[i++] == Point2d(5.703251, 16.079850));
			Assert::IsTrue(points[i++] == Point2d(5.791711, 15.937003));
			Assert::IsTrue(points[i++] == Point2d(5.881766, 15.795156));
			Assert::IsTrue(points[i++] == Point2d(5.973404, 15.654326));
			Assert::IsTrue(points[i++] == Point2d(6.066614, 15.514532));
			Assert::IsTrue(points[i++] == Point2d(6.161384, 15.375791));
			Assert::IsTrue(points[i++] == Point2d(6.257702, 15.238119));
			Assert::IsTrue(points[i++] == Point2d(6.355556, 15.101536));
			Assert::IsTrue(points[i++] == Point2d(6.454934, 14.966057));
			Assert::IsTrue(points[i++] == Point2d(6.555823, 14.831699));
			Assert::IsTrue(points[i++] == Point2d(6.658211, 14.698481));
			Assert::IsTrue(points[i++] == Point2d(6.762085, 14.566417));
			Assert::IsTrue(points[i++] == Point2d(6.867431, 14.435525));
			Assert::IsTrue(points[i++] == Point2d(6.974237, 14.305821));
			Assert::IsTrue(points[i++] == Point2d(7.082488, 14.177322));
			Assert::IsTrue(points[i++] == Point2d(7.192173, 14.050044));
			Assert::IsTrue(points[i++] == Point2d(7.303276, 13.924002));
			Assert::IsTrue(points[i++] == Point2d(7.415784, 13.799212));
			Assert::IsTrue(points[i++] == Point2d(7.529683, 13.675691));
			Assert::IsTrue(points[i++] == Point2d(7.644958, 13.553453));
			Assert::IsTrue(points[i++] == Point2d(7.761595, 13.432513));
			Assert::IsTrue(points[i++] == Point2d(7.879580, 13.312888));
			Assert::IsTrue(points[i++] == Point2d(7.998897, 13.194592));
			Assert::IsTrue(points[i++] == Point2d(8.119532, 13.077640));
			Assert::IsTrue(points[i++] == Point2d(8.241469, 12.962047));
			Assert::IsTrue(points[i++] == Point2d(8.364693, 12.847826));
			Assert::IsTrue(points[i++] == Point2d(8.489189, 12.734993));
			Assert::IsTrue(points[i++] == Point2d(8.614940, 12.623562));
			Assert::IsTrue(points[i++] == Point2d(8.741933, 12.513546));
			Assert::IsTrue(points[i++] == Point2d(8.870149, 12.404959));
			Assert::IsTrue(points[i++] == Point2d(8.999574, 12.297816));
			Assert::IsTrue(points[i++] == Point2d(9.130191, 12.192128));
			Assert::IsTrue(points[i++] == Point2d(9.261983, 12.087911));
			Assert::IsTrue(points[i++] == Point2d(9.394934, 11.985176));
			Assert::IsTrue(points[i++] == Point2d(9.529028, 11.883937));
			Assert::IsTrue(points[i++] == Point2d(9.664248, 11.784206));
			Assert::IsTrue(points[i++] == Point2d(9.800576, 11.685997));
			Assert::IsTrue(points[i++] == Point2d(9.937995, 11.589320));
			Assert::IsTrue(points[i++] == Point2d(10.076489, 11.494189));
			Assert::IsTrue(points[i++] == Point2d(10.216040, 11.400614));
			Assert::IsTrue(points[i++] == Point2d(10.356630, 11.308609));
			Assert::IsTrue(points[i++] == Point2d(10.498242, 11.218185));
			Assert::IsTrue(points[i++] == Point2d(10.640857, 11.129352));
			Assert::IsTrue(points[i++] == Point2d(10.784459, 11.042122));
			Assert::IsTrue(points[i++] == Point2d(10.929029, 10.956507));
			Assert::IsTrue(points[i++] == Point2d(11.074549, 10.872516));
			Assert::IsTrue(points[i++] == Point2d(11.221001, 10.790160));
			Assert::IsTrue(points[i++] == Point2d(11.368365, 10.709450));
			Assert::IsTrue(points[i++] == Point2d(11.516625, 10.630396));
			Assert::IsTrue(points[i++] == Point2d(11.665761, 10.553007));
			Assert::IsTrue(points[i++] == Point2d(11.815754, 10.477293));
			Assert::IsTrue(points[i++] == Point2d(11.966586, 10.403265));
			Assert::IsTrue(points[i++] == Point2d(19.000000, 7.000000));
			Assert::IsTrue(points[i++] == Point2d(19.000000, 0.750000));
			Assert::IsTrue(points[i++] == Point2d(18.250000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(0.000000, 0.000000));
			Assert::IsTrue(i == points.size());
		}

		TEST_METHOD(Clone)
		{
			auto beam = GetTestBeam();
			auto beamClone(beam);
			Assert::AreEqual(beamClone.GetW1(), 17.);
			Assert::AreEqual(beamClone.GetW2(), 3.5);
			Assert::AreEqual(beamClone.GetW3(), 38.0);
			Assert::AreEqual(beamClone.GetD1(), 3.5);
			Assert::AreEqual(beamClone.GetD2(), 1.5);
			Assert::AreEqual(beamClone.GetD3(), 3.5);
			Assert::AreEqual(beamClone.GetD4(), 7.0);
			Assert::AreEqual(beamClone.GetD5(), 7.5);
			Assert::AreEqual(beamClone.GetT(), 7.0);
			Assert::AreEqual(beamClone.GetH(), 36.0);
			Assert::AreEqual(beamClone.GetR(), 15.0);
			Assert::AreEqual(beamClone.GetC1(), 0.75);
		}

		TEST_METHOD(PointInShape)
		{
			auto beam = GetTestBeam();
			Point2d pnt(0, 0.5);
			Assert::IsTrue(beam.PointInShape(pnt));

			pnt.Move(500, 500);
			Assert::IsFalse(beam.PointInShape(pnt));

			pnt.Move(0, 0); // Point on perimeter
			Assert::IsFalse(beam.PointInShape(pnt));
		}

		TEST_METHOD(ClipWithLine)
		{
			auto beam = GetTestBeam();

			// setup clipping line
			Point2d p1(-5000, 15.0);
			Point2d p2(5000, 15.0);
			Line2d clipLine(p1, p2);

			auto clip = beam.CreateClippedShape(clipLine, Line2d::Side::Left);
			Assert::IsTrue(clip != nullptr);

			auto points = clip->GetPolyPoints();

			Assert::IsTrue(points.size() == 98);
			int i = 0;
			Assert::IsTrue(points[i++] == Point2d(0.000000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(-18.250000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(-19.000000, 0.750000));
			Assert::IsTrue(points[i++] == Point2d(-19.000000, 7.000000));
			Assert::IsTrue(points[i++] == Point2d(-11.966586, 10.403265));
			Assert::IsTrue(points[i++] == Point2d(-11.815754, 10.477293));
			Assert::IsTrue(points[i++] == Point2d(-11.665761, 10.553007));
			Assert::IsTrue(points[i++] == Point2d(-11.516625, 10.630396));
			Assert::IsTrue(points[i++] == Point2d(-11.368365, 10.709450));
			Assert::IsTrue(points[i++] == Point2d(-11.221001, 10.790160));
			Assert::IsTrue(points[i++] == Point2d(-11.074549, 10.872516));
			Assert::IsTrue(points[i++] == Point2d(-10.929029, 10.956507));
			Assert::IsTrue(points[i++] == Point2d(-10.784459, 11.042122));
			Assert::IsTrue(points[i++] == Point2d(-10.640857, 11.129352));
			Assert::IsTrue(points[i++] == Point2d(-10.498242, 11.218185));
			Assert::IsTrue(points[i++] == Point2d(-10.356630, 11.308609));
			Assert::IsTrue(points[i++] == Point2d(-10.216040, 11.400614));
			Assert::IsTrue(points[i++] == Point2d(-10.076489, 11.494189));
			Assert::IsTrue(points[i++] == Point2d(-9.937995, 11.589320));
			Assert::IsTrue(points[i++] == Point2d(-9.800576, 11.685997));
			Assert::IsTrue(points[i++] == Point2d(-9.664248, 11.784206));
			Assert::IsTrue(points[i++] == Point2d(-9.529028, 11.883937));
			Assert::IsTrue(points[i++] == Point2d(-9.394934, 11.985176));
			Assert::IsTrue(points[i++] == Point2d(-9.261983, 12.087911));
			Assert::IsTrue(points[i++] == Point2d(-9.130191, 12.192128));
			Assert::IsTrue(points[i++] == Point2d(-8.999574, 12.297816));
			Assert::IsTrue(points[i++] == Point2d(-8.870149, 12.404959));
			Assert::IsTrue(points[i++] == Point2d(-8.741933, 12.513546));
			Assert::IsTrue(points[i++] == Point2d(-8.614940, 12.623562));
			Assert::IsTrue(points[i++] == Point2d(-8.489189, 12.734993));
			Assert::IsTrue(points[i++] == Point2d(-8.364693, 12.847826));
			Assert::IsTrue(points[i++] == Point2d(-8.241469, 12.962047));
			Assert::IsTrue(points[i++] == Point2d(-8.119532, 13.077640));
			Assert::IsTrue(points[i++] == Point2d(-7.998897, 13.194592));
			Assert::IsTrue(points[i++] == Point2d(-7.879580, 13.312888));
			Assert::IsTrue(points[i++] == Point2d(-7.761595, 13.432513));
			Assert::IsTrue(points[i++] == Point2d(-7.644958, 13.553453));
			Assert::IsTrue(points[i++] == Point2d(-7.529683, 13.675691));
			Assert::IsTrue(points[i++] == Point2d(-7.415784, 13.799212));
			Assert::IsTrue(points[i++] == Point2d(-7.303276, 13.924002));
			Assert::IsTrue(points[i++] == Point2d(-7.192173, 14.050044));
			Assert::IsTrue(points[i++] == Point2d(-7.082488, 14.177322));
			Assert::IsTrue(points[i++] == Point2d(-6.974237, 14.305821));
			Assert::IsTrue(points[i++] == Point2d(-6.867431, 14.435525));
			Assert::IsTrue(points[i++] == Point2d(-6.762085, 14.566417));
			Assert::IsTrue(points[i++] == Point2d(-6.658211, 14.698481));
			Assert::IsTrue(points[i++] == Point2d(-6.555823, 14.831699));
			Assert::IsTrue(points[i++] == Point2d(-6.454934, 14.966057));
			Assert::IsTrue(points[i++] == Point2d(-6.430036, 15.000000));
			Assert::IsTrue(points[i++] == Point2d(6.430036, 15.000000));
			Assert::IsTrue(points[i++] == Point2d(6.454934, 14.966057));
			Assert::IsTrue(points[i++] == Point2d(6.555823, 14.831699));
			Assert::IsTrue(points[i++] == Point2d(6.658211, 14.698481));
			Assert::IsTrue(points[i++] == Point2d(6.762085, 14.566417));
			Assert::IsTrue(points[i++] == Point2d(6.867431, 14.435525));
			Assert::IsTrue(points[i++] == Point2d(6.974237, 14.305821));
			Assert::IsTrue(points[i++] == Point2d(7.082488, 14.177322));
			Assert::IsTrue(points[i++] == Point2d(7.192173, 14.050044));
			Assert::IsTrue(points[i++] == Point2d(7.303276, 13.924002));
			Assert::IsTrue(points[i++] == Point2d(7.415784, 13.799212));
			Assert::IsTrue(points[i++] == Point2d(7.529683, 13.675691));
			Assert::IsTrue(points[i++] == Point2d(7.644958, 13.553453));
			Assert::IsTrue(points[i++] == Point2d(7.761595, 13.432513));
			Assert::IsTrue(points[i++] == Point2d(7.879580, 13.312888));
			Assert::IsTrue(points[i++] == Point2d(7.998897, 13.194592));
			Assert::IsTrue(points[i++] == Point2d(8.119532, 13.077640));
			Assert::IsTrue(points[i++] == Point2d(8.241469, 12.962047));
			Assert::IsTrue(points[i++] == Point2d(8.364693, 12.847826));
			Assert::IsTrue(points[i++] == Point2d(8.489189, 12.734993));
			Assert::IsTrue(points[i++] == Point2d(8.614940, 12.623562));
			Assert::IsTrue(points[i++] == Point2d(8.741933, 12.513546));
			Assert::IsTrue(points[i++] == Point2d(8.870149, 12.404959));
			Assert::IsTrue(points[i++] == Point2d(8.999574, 12.297816));
			Assert::IsTrue(points[i++] == Point2d(9.130191, 12.192128));
			Assert::IsTrue(points[i++] == Point2d(9.261983, 12.087911));
			Assert::IsTrue(points[i++] == Point2d(9.394934, 11.985176));
			Assert::IsTrue(points[i++] == Point2d(9.529028, 11.883937));
			Assert::IsTrue(points[i++] == Point2d(9.664248, 11.784206));
			Assert::IsTrue(points[i++] == Point2d(9.800576, 11.685997));
			Assert::IsTrue(points[i++] == Point2d(9.937995, 11.589320));
			Assert::IsTrue(points[i++] == Point2d(10.076489, 11.494189));
			Assert::IsTrue(points[i++] == Point2d(10.216040, 11.400614));
			Assert::IsTrue(points[i++] == Point2d(10.356630, 11.308609));
			Assert::IsTrue(points[i++] == Point2d(10.498242, 11.218185));
			Assert::IsTrue(points[i++] == Point2d(10.640857, 11.129352));
			Assert::IsTrue(points[i++] == Point2d(10.784459, 11.042122));
			Assert::IsTrue(points[i++] == Point2d(10.929029, 10.956507));
			Assert::IsTrue(points[i++] == Point2d(11.074549, 10.872516));
			Assert::IsTrue(points[i++] == Point2d(11.221001, 10.790160));
			Assert::IsTrue(points[i++] == Point2d(11.368365, 10.709450));
			Assert::IsTrue(points[i++] == Point2d(11.516625, 10.630396));
			Assert::IsTrue(points[i++] == Point2d(11.665761, 10.553007));
			Assert::IsTrue(points[i++] == Point2d(11.815754, 10.477293));
			Assert::IsTrue(points[i++] == Point2d(11.966586, 10.403265));
			Assert::IsTrue(points[i++] == Point2d(19.000000, 7.000000));
			Assert::IsTrue(points[i++] == Point2d(19.000000, 0.750000));
			Assert::IsTrue(points[i++] == Point2d(18.250000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(0.000000, 0.000000));
			Assert::IsTrue(i == points.size());

			// clip in other direction
			clipLine.ThroughPoints(p2, p1);

			clip = beam.CreateClippedShape(clipLine, Line2d::Side::Left);
			Assert::IsTrue(clip != nullptr);

			points = clip->GetPolyPoints();

			Assert::IsTrue(points.size() == 125);
			i = 0;
			Assert::IsTrue(points[i++] == Point2d(-6.430036, 15.000000));
			Assert::IsTrue(points[i++] == Point2d(-6.355556, 15.101536));
			Assert::IsTrue(points[i++] == Point2d(-6.257702, 15.238119));
			Assert::IsTrue(points[i++] == Point2d(-6.161384, 15.375791));
			Assert::IsTrue(points[i++] == Point2d(-6.066614, 15.514532));
			Assert::IsTrue(points[i++] == Point2d(-5.973404, 15.654326));
			Assert::IsTrue(points[i++] == Point2d(-5.881766, 15.795156));
			Assert::IsTrue(points[i++] == Point2d(-5.791711, 15.937003));
			Assert::IsTrue(points[i++] == Point2d(-5.703251, 16.079850));
			Assert::IsTrue(points[i++] == Point2d(-5.616396, 16.223679));
			Assert::IsTrue(points[i++] == Point2d(-5.531157, 16.368471));
			Assert::IsTrue(points[i++] == Point2d(-5.447546, 16.514210));
			Assert::IsTrue(points[i++] == Point2d(-5.365572, 16.660875));
			Assert::IsTrue(points[i++] == Point2d(-5.285247, 16.808450));
			Assert::IsTrue(points[i++] == Point2d(-5.206579, 16.956915));
			Assert::IsTrue(points[i++] == Point2d(-5.129580, 17.106252));
			Assert::IsTrue(points[i++] == Point2d(-5.054257, 17.256442));
			Assert::IsTrue(points[i++] == Point2d(-4.980622, 17.407467));
			Assert::IsTrue(points[i++] == Point2d(-4.908684, 17.559307));
			Assert::IsTrue(points[i++] == Point2d(-4.838450, 17.711943));
			Assert::IsTrue(points[i++] == Point2d(-4.769931, 17.865356));
			Assert::IsTrue(points[i++] == Point2d(-4.703134, 18.019527));
			Assert::IsTrue(points[i++] == Point2d(-4.638068, 18.174437));
			Assert::IsTrue(points[i++] == Point2d(-4.574742, 18.330065));
			Assert::IsTrue(points[i++] == Point2d(-4.513163, 18.486393));
			Assert::IsTrue(points[i++] == Point2d(-4.453338, 18.643402));
			Assert::IsTrue(points[i++] == Point2d(-4.395276, 18.801070));
			Assert::IsTrue(points[i++] == Point2d(-4.338984, 18.959379));
			Assert::IsTrue(points[i++] == Point2d(-4.284469, 19.118308));
			Assert::IsTrue(points[i++] == Point2d(-4.231737, 19.277838));
			Assert::IsTrue(points[i++] == Point2d(-4.180795, 19.437949));
			Assert::IsTrue(points[i++] == Point2d(-4.131651, 19.598621));
			Assert::IsTrue(points[i++] == Point2d(-4.084308, 19.759832));
			Assert::IsTrue(points[i++] == Point2d(-4.038775, 19.921564));
			Assert::IsTrue(points[i++] == Point2d(-3.995056, 20.083796));
			Assert::IsTrue(points[i++] == Point2d(-3.953157, 20.246507));
			Assert::IsTrue(points[i++] == Point2d(-3.913083, 20.409678));
			Assert::IsTrue(points[i++] == Point2d(-3.874839, 20.573287));
			Assert::IsTrue(points[i++] == Point2d(-3.838430, 20.737314));
			Assert::IsTrue(points[i++] == Point2d(-3.803861, 20.901739));
			Assert::IsTrue(points[i++] == Point2d(-3.771136, 21.066540));
			Assert::IsTrue(points[i++] == Point2d(-3.740259, 21.231698));
			Assert::IsTrue(points[i++] == Point2d(-3.711233, 21.397191));
			Assert::IsTrue(points[i++] == Point2d(-3.684064, 21.563000));
			Assert::IsTrue(points[i++] == Point2d(-3.658753, 21.729101));
			Assert::IsTrue(points[i++] == Point2d(-3.635304, 21.895477));
			Assert::IsTrue(points[i++] == Point2d(-3.613720, 22.062104));
			Assert::IsTrue(points[i++] == Point2d(-3.594004, 22.228962));
			Assert::IsTrue(points[i++] == Point2d(-3.576159, 22.396031));
			Assert::IsTrue(points[i++] == Point2d(-3.560185, 22.563290));
			Assert::IsTrue(points[i++] == Point2d(-3.546087, 22.730717));
			Assert::IsTrue(points[i++] == Point2d(-3.533864, 22.898291));
			Assert::IsTrue(points[i++] == Point2d(-3.523520, 23.065991));
			Assert::IsTrue(points[i++] == Point2d(-3.515054, 23.233797));
			Assert::IsTrue(points[i++] == Point2d(-3.508468, 23.401688));
			Assert::IsTrue(points[i++] == Point2d(-3.503764, 23.569641));
			Assert::IsTrue(points[i++] == Point2d(-3.500941, 23.737637));
			Assert::IsTrue(points[i++] == Point2d(-3.500000, 23.905654));
			Assert::IsTrue(points[i++] == Point2d(-3.500000, 27.500000));
			Assert::IsTrue(points[i++] == Point2d(-7.000000, 31.000000));
			Assert::IsTrue(points[i++] == Point2d(-24.000000, 32.500000));
			Assert::IsTrue(points[i++] == Point2d(-24.000000, 36.000000));
			Assert::IsTrue(points[i++] == Point2d(0.000000, 36.000000));
			Assert::IsTrue(points[i++] == Point2d(24.000000, 36.000000));
			Assert::IsTrue(points[i++] == Point2d(24.000000, 32.500000));
			Assert::IsTrue(points[i++] == Point2d(7.000000, 31.000000));
			Assert::IsTrue(points[i++] == Point2d(3.500000, 27.500000));
			Assert::IsTrue(points[i++] == Point2d(3.500000, 23.905654));
			Assert::IsTrue(points[i++] == Point2d(3.500941, 23.737637));
			Assert::IsTrue(points[i++] == Point2d(3.503764, 23.569641));
			Assert::IsTrue(points[i++] == Point2d(3.508468, 23.401688));
			Assert::IsTrue(points[i++] == Point2d(3.515054, 23.233797));
			Assert::IsTrue(points[i++] == Point2d(3.523520, 23.065991));
			Assert::IsTrue(points[i++] == Point2d(3.533864, 22.898291));
			Assert::IsTrue(points[i++] == Point2d(3.546087, 22.730717));
			Assert::IsTrue(points[i++] == Point2d(3.560185, 22.563290));
			Assert::IsTrue(points[i++] == Point2d(3.576159, 22.396031));
			Assert::IsTrue(points[i++] == Point2d(3.594004, 22.228962));
			Assert::IsTrue(points[i++] == Point2d(3.613720, 22.062104));
			Assert::IsTrue(points[i++] == Point2d(3.635304, 21.895477));
			Assert::IsTrue(points[i++] == Point2d(3.658753, 21.729101));
			Assert::IsTrue(points[i++] == Point2d(3.684064, 21.563000));
			Assert::IsTrue(points[i++] == Point2d(3.711233, 21.397191));
			Assert::IsTrue(points[i++] == Point2d(3.740259, 21.231698));
			Assert::IsTrue(points[i++] == Point2d(3.771136, 21.066540));
			Assert::IsTrue(points[i++] == Point2d(3.803861, 20.901739));
			Assert::IsTrue(points[i++] == Point2d(3.838430, 20.737314));
			Assert::IsTrue(points[i++] == Point2d(3.874839, 20.573287));
			Assert::IsTrue(points[i++] == Point2d(3.913083, 20.409678));
			Assert::IsTrue(points[i++] == Point2d(3.953157, 20.246507));
			Assert::IsTrue(points[i++] == Point2d(3.995056, 20.083796));
			Assert::IsTrue(points[i++] == Point2d(4.038775, 19.921564));
			Assert::IsTrue(points[i++] == Point2d(4.084308, 19.759832));
			Assert::IsTrue(points[i++] == Point2d(4.131651, 19.598621));
			Assert::IsTrue(points[i++] == Point2d(4.180795, 19.437949));
			Assert::IsTrue(points[i++] == Point2d(4.231737, 19.277838));
			Assert::IsTrue(points[i++] == Point2d(4.284469, 19.118308));
			Assert::IsTrue(points[i++] == Point2d(4.338984, 18.959379));
			Assert::IsTrue(points[i++] == Point2d(4.395276, 18.801070));
			Assert::IsTrue(points[i++] == Point2d(4.453338, 18.643402));
			Assert::IsTrue(points[i++] == Point2d(4.513163, 18.486393));
			Assert::IsTrue(points[i++] == Point2d(4.574742, 18.330065));
			Assert::IsTrue(points[i++] == Point2d(4.638068, 18.174437));
			Assert::IsTrue(points[i++] == Point2d(4.703134, 18.019527));
			Assert::IsTrue(points[i++] == Point2d(4.769931, 17.865356));
			Assert::IsTrue(points[i++] == Point2d(4.838450, 17.711943));
			Assert::IsTrue(points[i++] == Point2d(4.908684, 17.559307));
			Assert::IsTrue(points[i++] == Point2d(4.980622, 17.407467));
			Assert::IsTrue(points[i++] == Point2d(5.054257, 17.256442));
			Assert::IsTrue(points[i++] == Point2d(5.129580, 17.106252));
			Assert::IsTrue(points[i++] == Point2d(5.206579, 16.956915));
			Assert::IsTrue(points[i++] == Point2d(5.285247, 16.808450));
			Assert::IsTrue(points[i++] == Point2d(5.365572, 16.660875));
			Assert::IsTrue(points[i++] == Point2d(5.447546, 16.514210));
			Assert::IsTrue(points[i++] == Point2d(5.531157, 16.368471));
			Assert::IsTrue(points[i++] == Point2d(5.616396, 16.223679));
			Assert::IsTrue(points[i++] == Point2d(5.703251, 16.079850));
			Assert::IsTrue(points[i++] == Point2d(5.791711, 15.937003));
			Assert::IsTrue(points[i++] == Point2d(5.881766, 15.795156));
			Assert::IsTrue(points[i++] == Point2d(5.973404, 15.654326));
			Assert::IsTrue(points[i++] == Point2d(6.066614, 15.514532));
			Assert::IsTrue(points[i++] == Point2d(6.161384, 15.375791));
			Assert::IsTrue(points[i++] == Point2d(6.257702, 15.238119));
			Assert::IsTrue(points[i++] == Point2d(6.355556, 15.101536));
			Assert::IsTrue(points[i++] == Point2d(6.430036, 15.000000));
			Assert::IsTrue(i == points.size());
		}

		TEST_METHOD(ClipIn)
		{
			auto beam = GetTestBeam();
			Rect2d clipRect(-5000, 15.0, 5000, 10000);
			auto clip = beam.CreateClippedShape(clipRect, Shape::ClipRegion::In);
			Assert::IsNotNull(clip.get());

			auto points = clip->GetPolyPoints();

			Assert::IsTrue(points.size() == 125);
			int i = 0;
			Assert::IsTrue(points[i++] == Point2d(-6.430036, 15.000000));
			Assert::IsTrue(points[i++] == Point2d(-6.355556, 15.101536));
			Assert::IsTrue(points[i++] == Point2d(-6.257702, 15.238119));
			Assert::IsTrue(points[i++] == Point2d(-6.161384, 15.375791));
			Assert::IsTrue(points[i++] == Point2d(-6.066614, 15.514532));
			Assert::IsTrue(points[i++] == Point2d(-5.973404, 15.654326));
			Assert::IsTrue(points[i++] == Point2d(-5.881766, 15.795156));
			Assert::IsTrue(points[i++] == Point2d(-5.791711, 15.937003));
			Assert::IsTrue(points[i++] == Point2d(-5.703251, 16.079850));
			Assert::IsTrue(points[i++] == Point2d(-5.616396, 16.223679));
			Assert::IsTrue(points[i++] == Point2d(-5.531157, 16.368471));
			Assert::IsTrue(points[i++] == Point2d(-5.447546, 16.514210));
			Assert::IsTrue(points[i++] == Point2d(-5.365572, 16.660875));
			Assert::IsTrue(points[i++] == Point2d(-5.285247, 16.808450));
			Assert::IsTrue(points[i++] == Point2d(-5.206579, 16.956915));
			Assert::IsTrue(points[i++] == Point2d(-5.129580, 17.106252));
			Assert::IsTrue(points[i++] == Point2d(-5.054257, 17.256442));
			Assert::IsTrue(points[i++] == Point2d(-4.980622, 17.407467));
			Assert::IsTrue(points[i++] == Point2d(-4.908684, 17.559307));
			Assert::IsTrue(points[i++] == Point2d(-4.838450, 17.711943));
			Assert::IsTrue(points[i++] == Point2d(-4.769931, 17.865356));
			Assert::IsTrue(points[i++] == Point2d(-4.703134, 18.019527));
			Assert::IsTrue(points[i++] == Point2d(-4.638068, 18.174437));
			Assert::IsTrue(points[i++] == Point2d(-4.574742, 18.330065));
			Assert::IsTrue(points[i++] == Point2d(-4.513163, 18.486393));
			Assert::IsTrue(points[i++] == Point2d(-4.453338, 18.643402));
			Assert::IsTrue(points[i++] == Point2d(-4.395276, 18.801070));
			Assert::IsTrue(points[i++] == Point2d(-4.338984, 18.959379));
			Assert::IsTrue(points[i++] == Point2d(-4.284469, 19.118308));
			Assert::IsTrue(points[i++] == Point2d(-4.231737, 19.277838));
			Assert::IsTrue(points[i++] == Point2d(-4.180795, 19.437949));
			Assert::IsTrue(points[i++] == Point2d(-4.131651, 19.598621));
			Assert::IsTrue(points[i++] == Point2d(-4.084308, 19.759832));
			Assert::IsTrue(points[i++] == Point2d(-4.038775, 19.921564));
			Assert::IsTrue(points[i++] == Point2d(-3.995056, 20.083796));
			Assert::IsTrue(points[i++] == Point2d(-3.953157, 20.246507));
			Assert::IsTrue(points[i++] == Point2d(-3.913083, 20.409678));
			Assert::IsTrue(points[i++] == Point2d(-3.874839, 20.573287));
			Assert::IsTrue(points[i++] == Point2d(-3.838430, 20.737314));
			Assert::IsTrue(points[i++] == Point2d(-3.803861, 20.901739));
			Assert::IsTrue(points[i++] == Point2d(-3.771136, 21.066540));
			Assert::IsTrue(points[i++] == Point2d(-3.740259, 21.231698));
			Assert::IsTrue(points[i++] == Point2d(-3.711233, 21.397191));
			Assert::IsTrue(points[i++] == Point2d(-3.684064, 21.563000));
			Assert::IsTrue(points[i++] == Point2d(-3.658753, 21.729101));
			Assert::IsTrue(points[i++] == Point2d(-3.635304, 21.895477));
			Assert::IsTrue(points[i++] == Point2d(-3.613720, 22.062104));
			Assert::IsTrue(points[i++] == Point2d(-3.594004, 22.228962));
			Assert::IsTrue(points[i++] == Point2d(-3.576159, 22.396031));
			Assert::IsTrue(points[i++] == Point2d(-3.560185, 22.563290));
			Assert::IsTrue(points[i++] == Point2d(-3.546087, 22.730717));
			Assert::IsTrue(points[i++] == Point2d(-3.533864, 22.898291));
			Assert::IsTrue(points[i++] == Point2d(-3.523520, 23.065991));
			Assert::IsTrue(points[i++] == Point2d(-3.515054, 23.233797));
			Assert::IsTrue(points[i++] == Point2d(-3.508468, 23.401688));
			Assert::IsTrue(points[i++] == Point2d(-3.503764, 23.569641));
			Assert::IsTrue(points[i++] == Point2d(-3.500941, 23.737637));
			Assert::IsTrue(points[i++] == Point2d(-3.500000, 23.905654));
			Assert::IsTrue(points[i++] == Point2d(-3.500000, 27.500000));
			Assert::IsTrue(points[i++] == Point2d(-7.000000, 31.000000));
			Assert::IsTrue(points[i++] == Point2d(-24.000000, 32.500000));
			Assert::IsTrue(points[i++] == Point2d(-24.000000, 36.000000));
			Assert::IsTrue(points[i++] == Point2d(0.000000, 36.000000));
			Assert::IsTrue(points[i++] == Point2d(24.000000, 36.000000));
			Assert::IsTrue(points[i++] == Point2d(24.000000, 32.500000));
			Assert::IsTrue(points[i++] == Point2d(7.000000, 31.000000));
			Assert::IsTrue(points[i++] == Point2d(3.500000, 27.500000));
			Assert::IsTrue(points[i++] == Point2d(3.500000, 23.905654));
			Assert::IsTrue(points[i++] == Point2d(3.500941, 23.737637));
			Assert::IsTrue(points[i++] == Point2d(3.503764, 23.569641));
			Assert::IsTrue(points[i++] == Point2d(3.508468, 23.401688));
			Assert::IsTrue(points[i++] == Point2d(3.515054, 23.233797));
			Assert::IsTrue(points[i++] == Point2d(3.523520, 23.065991));
			Assert::IsTrue(points[i++] == Point2d(3.533864, 22.898291));
			Assert::IsTrue(points[i++] == Point2d(3.546087, 22.730717));
			Assert::IsTrue(points[i++] == Point2d(3.560185, 22.563290));
			Assert::IsTrue(points[i++] == Point2d(3.576159, 22.396031));
			Assert::IsTrue(points[i++] == Point2d(3.594004, 22.228962));
			Assert::IsTrue(points[i++] == Point2d(3.613720, 22.062104));
			Assert::IsTrue(points[i++] == Point2d(3.635304, 21.895477));
			Assert::IsTrue(points[i++] == Point2d(3.658753, 21.729101));
			Assert::IsTrue(points[i++] == Point2d(3.684064, 21.563000));
			Assert::IsTrue(points[i++] == Point2d(3.711233, 21.397191));
			Assert::IsTrue(points[i++] == Point2d(3.740259, 21.231698));
			Assert::IsTrue(points[i++] == Point2d(3.771136, 21.066540));
			Assert::IsTrue(points[i++] == Point2d(3.803861, 20.901739));
			Assert::IsTrue(points[i++] == Point2d(3.838430, 20.737314));
			Assert::IsTrue(points[i++] == Point2d(3.874839, 20.573287));
			Assert::IsTrue(points[i++] == Point2d(3.913083, 20.409678));
			Assert::IsTrue(points[i++] == Point2d(3.953157, 20.246507));
			Assert::IsTrue(points[i++] == Point2d(3.995056, 20.083796));
			Assert::IsTrue(points[i++] == Point2d(4.038775, 19.921564));
			Assert::IsTrue(points[i++] == Point2d(4.084308, 19.759832));
			Assert::IsTrue(points[i++] == Point2d(4.131651, 19.598621));
			Assert::IsTrue(points[i++] == Point2d(4.180795, 19.437949));
			Assert::IsTrue(points[i++] == Point2d(4.231737, 19.277838));
			Assert::IsTrue(points[i++] == Point2d(4.284469, 19.118308));
			Assert::IsTrue(points[i++] == Point2d(4.338984, 18.959379));
			Assert::IsTrue(points[i++] == Point2d(4.395276, 18.801070));
			Assert::IsTrue(points[i++] == Point2d(4.453338, 18.643402));
			Assert::IsTrue(points[i++] == Point2d(4.513163, 18.486393));
			Assert::IsTrue(points[i++] == Point2d(4.574742, 18.330065));
			Assert::IsTrue(points[i++] == Point2d(4.638068, 18.174437));
			Assert::IsTrue(points[i++] == Point2d(4.703134, 18.019527));
			Assert::IsTrue(points[i++] == Point2d(4.769931, 17.865356));
			Assert::IsTrue(points[i++] == Point2d(4.838450, 17.711943));
			Assert::IsTrue(points[i++] == Point2d(4.908684, 17.559307));
			Assert::IsTrue(points[i++] == Point2d(4.980622, 17.407467));
			Assert::IsTrue(points[i++] == Point2d(5.054257, 17.256442));
			Assert::IsTrue(points[i++] == Point2d(5.129580, 17.106252));
			Assert::IsTrue(points[i++] == Point2d(5.206579, 16.956915));
			Assert::IsTrue(points[i++] == Point2d(5.285247, 16.808450));
			Assert::IsTrue(points[i++] == Point2d(5.365572, 16.660875));
			Assert::IsTrue(points[i++] == Point2d(5.447546, 16.514210));
			Assert::IsTrue(points[i++] == Point2d(5.531157, 16.368471));
			Assert::IsTrue(points[i++] == Point2d(5.616396, 16.223679));
			Assert::IsTrue(points[i++] == Point2d(5.703251, 16.079850));
			Assert::IsTrue(points[i++] == Point2d(5.791711, 15.937003));
			Assert::IsTrue(points[i++] == Point2d(5.881766, 15.795156));
			Assert::IsTrue(points[i++] == Point2d(5.973404, 15.654326));
			Assert::IsTrue(points[i++] == Point2d(6.066614, 15.514532));
			Assert::IsTrue(points[i++] == Point2d(6.161384, 15.375791));
			Assert::IsTrue(points[i++] == Point2d(6.257702, 15.238119));
			Assert::IsTrue(points[i++] == Point2d(6.355556, 15.101536));
			Assert::IsTrue(points[i++] == Point2d(6.430036, 15.000000));
			Assert::IsTrue(i == points.size());
		}

		TEST_METHOD(HookPoint)
		{
			// Test hook point behavior
			auto beam = GetTestBeam();
			Assert::IsTrue(TestHookPoint(beam));
		}

		TEST_METHOD(Move)
		{
			auto beam = GetTestBeam();
			auto props = beam.GetProperties();

			// Get moment of inertia about CG before move
			// These properties should be invariant
			Float64 area = props.GetArea();
			Float64 Ixx = props.GetIxx();
			Float64 Iyy = props.GetIyy();
			Float64 Ixy = props.GetIxy();

			Point2d from(0, 0);
			Point2d to(100, 100);

			beam.Move(from, to);
			auto points = beam.GetPolyPoints();

			Assert::IsTrue(points.size() == 219);
			int i = 0;
			Assert::IsTrue(points[i++] == Point2d(100.000000, 100.000000));
			Assert::IsTrue(points[i++] == Point2d(81.750000, 100.000000));
			Assert::IsTrue(points[i++] == Point2d(81.000000, 100.750000));
			Assert::IsTrue(points[i++] == Point2d(81.000000, 107.000000));
			Assert::IsTrue(points[i++] == Point2d(88.033414, 110.403265));
			Assert::IsTrue(points[i++] == Point2d(88.184246, 110.477293));
			Assert::IsTrue(points[i++] == Point2d(88.334239, 110.553007));
			Assert::IsTrue(points[i++] == Point2d(88.483375, 110.630396));
			Assert::IsTrue(points[i++] == Point2d(88.631635, 110.709450));
			Assert::IsTrue(points[i++] == Point2d(88.778999, 110.790160));
			Assert::IsTrue(points[i++] == Point2d(88.925451, 110.872516));
			Assert::IsTrue(points[i++] == Point2d(89.070971, 110.956507));
			Assert::IsTrue(points[i++] == Point2d(89.215541, 111.042122));
			Assert::IsTrue(points[i++] == Point2d(89.359143, 111.129352));
			Assert::IsTrue(points[i++] == Point2d(89.501758, 111.218185));
			Assert::IsTrue(points[i++] == Point2d(89.643370, 111.308609));
			Assert::IsTrue(points[i++] == Point2d(89.783960, 111.400614));
			Assert::IsTrue(points[i++] == Point2d(89.923511, 111.494189));
			Assert::IsTrue(points[i++] == Point2d(90.062005, 111.589320));
			Assert::IsTrue(points[i++] == Point2d(90.199424, 111.685997));
			Assert::IsTrue(points[i++] == Point2d(90.335752, 111.784206));
			Assert::IsTrue(points[i++] == Point2d(90.470972, 111.883937));
			Assert::IsTrue(points[i++] == Point2d(90.605066, 111.985176));
			Assert::IsTrue(points[i++] == Point2d(90.738017, 112.087911));
			Assert::IsTrue(points[i++] == Point2d(90.869809, 112.192128));
			Assert::IsTrue(points[i++] == Point2d(91.000426, 112.297816));
			Assert::IsTrue(points[i++] == Point2d(91.129851, 112.404959));
			Assert::IsTrue(points[i++] == Point2d(91.258067, 112.513546));
			Assert::IsTrue(points[i++] == Point2d(91.385060, 112.623562));
			Assert::IsTrue(points[i++] == Point2d(91.510811, 112.734993));
			Assert::IsTrue(points[i++] == Point2d(91.635307, 112.847826));
			Assert::IsTrue(points[i++] == Point2d(91.758531, 112.962047));
			Assert::IsTrue(points[i++] == Point2d(91.880468, 113.077640));
			Assert::IsTrue(points[i++] == Point2d(92.001103, 113.194592));
			Assert::IsTrue(points[i++] == Point2d(92.120420, 113.312888));
			Assert::IsTrue(points[i++] == Point2d(92.238405, 113.432513));
			Assert::IsTrue(points[i++] == Point2d(92.355042, 113.553453));
			Assert::IsTrue(points[i++] == Point2d(92.470317, 113.675691));
			Assert::IsTrue(points[i++] == Point2d(92.584216, 113.799212));
			Assert::IsTrue(points[i++] == Point2d(92.696724, 113.924002));
			Assert::IsTrue(points[i++] == Point2d(92.807827, 114.050044));
			Assert::IsTrue(points[i++] == Point2d(92.917512, 114.177322));
			Assert::IsTrue(points[i++] == Point2d(93.025763, 114.305821));
			Assert::IsTrue(points[i++] == Point2d(93.132569, 114.435525));
			Assert::IsTrue(points[i++] == Point2d(93.237915, 114.566417));
			Assert::IsTrue(points[i++] == Point2d(93.341789, 114.698481));
			Assert::IsTrue(points[i++] == Point2d(93.444177, 114.831699));
			Assert::IsTrue(points[i++] == Point2d(93.545066, 114.966057));
			Assert::IsTrue(points[i++] == Point2d(93.644444, 115.101536));
			Assert::IsTrue(points[i++] == Point2d(93.742298, 115.238119));
			Assert::IsTrue(points[i++] == Point2d(93.838616, 115.375791));
			Assert::IsTrue(points[i++] == Point2d(93.933386, 115.514532));
			Assert::IsTrue(points[i++] == Point2d(94.026596, 115.654326));
			Assert::IsTrue(points[i++] == Point2d(94.118234, 115.795156));
			Assert::IsTrue(points[i++] == Point2d(94.208289, 115.937003));
			Assert::IsTrue(points[i++] == Point2d(94.296749, 116.079850));
			Assert::IsTrue(points[i++] == Point2d(94.383604, 116.223679));
			Assert::IsTrue(points[i++] == Point2d(94.468843, 116.368471));
			Assert::IsTrue(points[i++] == Point2d(94.552454, 116.514210));
			Assert::IsTrue(points[i++] == Point2d(94.634428, 116.660875));
			Assert::IsTrue(points[i++] == Point2d(94.714753, 116.808450));
			Assert::IsTrue(points[i++] == Point2d(94.793421, 116.956915));
			Assert::IsTrue(points[i++] == Point2d(94.870420, 117.106252));
			Assert::IsTrue(points[i++] == Point2d(94.945743, 117.256442));
			Assert::IsTrue(points[i++] == Point2d(95.019378, 117.407467));
			Assert::IsTrue(points[i++] == Point2d(95.091316, 117.559307));
			Assert::IsTrue(points[i++] == Point2d(95.161550, 117.711943));
			Assert::IsTrue(points[i++] == Point2d(95.230069, 117.865356));
			Assert::IsTrue(points[i++] == Point2d(95.296866, 118.019527));
			Assert::IsTrue(points[i++] == Point2d(95.361932, 118.174437));
			Assert::IsTrue(points[i++] == Point2d(95.425258, 118.330065));
			Assert::IsTrue(points[i++] == Point2d(95.486837, 118.486393));
			Assert::IsTrue(points[i++] == Point2d(95.546662, 118.643402));
			Assert::IsTrue(points[i++] == Point2d(95.604724, 118.801070));
			Assert::IsTrue(points[i++] == Point2d(95.661016, 118.959379));
			Assert::IsTrue(points[i++] == Point2d(95.715531, 119.118308));
			Assert::IsTrue(points[i++] == Point2d(95.768263, 119.277838));
			Assert::IsTrue(points[i++] == Point2d(95.819205, 119.437949));
			Assert::IsTrue(points[i++] == Point2d(95.868349, 119.598621));
			Assert::IsTrue(points[i++] == Point2d(95.915692, 119.759832));
			Assert::IsTrue(points[i++] == Point2d(95.961225, 119.921564));
			Assert::IsTrue(points[i++] == Point2d(96.004944, 120.083796));
			Assert::IsTrue(points[i++] == Point2d(96.046843, 120.246507));
			Assert::IsTrue(points[i++] == Point2d(96.086917, 120.409678));
			Assert::IsTrue(points[i++] == Point2d(96.125161, 120.573287));
			Assert::IsTrue(points[i++] == Point2d(96.161570, 120.737314));
			Assert::IsTrue(points[i++] == Point2d(96.196139, 120.901739));
			Assert::IsTrue(points[i++] == Point2d(96.228864, 121.066540));
			Assert::IsTrue(points[i++] == Point2d(96.259741, 121.231698));
			Assert::IsTrue(points[i++] == Point2d(96.288767, 121.397191));
			Assert::IsTrue(points[i++] == Point2d(96.315936, 121.563000));
			Assert::IsTrue(points[i++] == Point2d(96.341247, 121.729101));
			Assert::IsTrue(points[i++] == Point2d(96.364696, 121.895477));
			Assert::IsTrue(points[i++] == Point2d(96.386280, 122.062104));
			Assert::IsTrue(points[i++] == Point2d(96.405996, 122.228962));
			Assert::IsTrue(points[i++] == Point2d(96.423841, 122.396031));
			Assert::IsTrue(points[i++] == Point2d(96.439815, 122.563290));
			Assert::IsTrue(points[i++] == Point2d(96.453913, 122.730717));
			Assert::IsTrue(points[i++] == Point2d(96.466136, 122.898291));
			Assert::IsTrue(points[i++] == Point2d(96.476480, 123.065991));
			Assert::IsTrue(points[i++] == Point2d(96.484946, 123.233797));
			Assert::IsTrue(points[i++] == Point2d(96.491532, 123.401688));
			Assert::IsTrue(points[i++] == Point2d(96.496236, 123.569641));
			Assert::IsTrue(points[i++] == Point2d(96.499059, 123.737637));
			Assert::IsTrue(points[i++] == Point2d(96.500000, 123.905654));
			Assert::IsTrue(points[i++] == Point2d(96.500000, 127.500000));
			Assert::IsTrue(points[i++] == Point2d(93.000000, 131.000000));
			Assert::IsTrue(points[i++] == Point2d(76.000000, 132.500000));
			Assert::IsTrue(points[i++] == Point2d(76.000000, 136.000000));
			Assert::IsTrue(points[i++] == Point2d(100.000000, 136.000000));
			Assert::IsTrue(points[i++] == Point2d(124.000000, 136.000000));
			Assert::IsTrue(points[i++] == Point2d(124.000000, 132.500000));
			Assert::IsTrue(points[i++] == Point2d(107.000000, 131.000000));
			Assert::IsTrue(points[i++] == Point2d(103.500000, 127.500000));
			Assert::IsTrue(points[i++] == Point2d(103.500000, 123.905654));
			Assert::IsTrue(points[i++] == Point2d(103.500941, 123.737637));
			Assert::IsTrue(points[i++] == Point2d(103.503764, 123.569641));
			Assert::IsTrue(points[i++] == Point2d(103.508468, 123.401688));
			Assert::IsTrue(points[i++] == Point2d(103.515054, 123.233797));
			Assert::IsTrue(points[i++] == Point2d(103.523520, 123.065991));
			Assert::IsTrue(points[i++] == Point2d(103.533864, 122.898291));
			Assert::IsTrue(points[i++] == Point2d(103.546087, 122.730717));
			Assert::IsTrue(points[i++] == Point2d(103.560185, 122.563290));
			Assert::IsTrue(points[i++] == Point2d(103.576159, 122.396031));
			Assert::IsTrue(points[i++] == Point2d(103.594004, 122.228962));
			Assert::IsTrue(points[i++] == Point2d(103.613720, 122.062104));
			Assert::IsTrue(points[i++] == Point2d(103.635304, 121.895477));
			Assert::IsTrue(points[i++] == Point2d(103.658753, 121.729101));
			Assert::IsTrue(points[i++] == Point2d(103.684064, 121.563000));
			Assert::IsTrue(points[i++] == Point2d(103.711233, 121.397191));
			Assert::IsTrue(points[i++] == Point2d(103.740259, 121.231698));
			Assert::IsTrue(points[i++] == Point2d(103.771136, 121.066540));
			Assert::IsTrue(points[i++] == Point2d(103.803861, 120.901739));
			Assert::IsTrue(points[i++] == Point2d(103.838430, 120.737314));
			Assert::IsTrue(points[i++] == Point2d(103.874839, 120.573287));
			Assert::IsTrue(points[i++] == Point2d(103.913083, 120.409678));
			Assert::IsTrue(points[i++] == Point2d(103.953157, 120.246507));
			Assert::IsTrue(points[i++] == Point2d(103.995056, 120.083796));
			Assert::IsTrue(points[i++] == Point2d(104.038775, 119.921564));
			Assert::IsTrue(points[i++] == Point2d(104.084308, 119.759832));
			Assert::IsTrue(points[i++] == Point2d(104.131651, 119.598621));
			Assert::IsTrue(points[i++] == Point2d(104.180795, 119.437949));
			Assert::IsTrue(points[i++] == Point2d(104.231737, 119.277838));
			Assert::IsTrue(points[i++] == Point2d(104.284469, 119.118308));
			Assert::IsTrue(points[i++] == Point2d(104.338984, 118.959379));
			Assert::IsTrue(points[i++] == Point2d(104.395276, 118.801070));
			Assert::IsTrue(points[i++] == Point2d(104.453338, 118.643402));
			Assert::IsTrue(points[i++] == Point2d(104.513163, 118.486393));
			Assert::IsTrue(points[i++] == Point2d(104.574742, 118.330065));
			Assert::IsTrue(points[i++] == Point2d(104.638068, 118.174437));
			Assert::IsTrue(points[i++] == Point2d(104.703134, 118.019527));
			Assert::IsTrue(points[i++] == Point2d(104.769931, 117.865356));
			Assert::IsTrue(points[i++] == Point2d(104.838450, 117.711943));
			Assert::IsTrue(points[i++] == Point2d(104.908684, 117.559307));
			Assert::IsTrue(points[i++] == Point2d(104.980622, 117.407467));
			Assert::IsTrue(points[i++] == Point2d(105.054257, 117.256442));
			Assert::IsTrue(points[i++] == Point2d(105.129580, 117.106252));
			Assert::IsTrue(points[i++] == Point2d(105.206579, 116.956915));
			Assert::IsTrue(points[i++] == Point2d(105.285247, 116.808450));
			Assert::IsTrue(points[i++] == Point2d(105.365572, 116.660875));
			Assert::IsTrue(points[i++] == Point2d(105.447546, 116.514210));
			Assert::IsTrue(points[i++] == Point2d(105.531157, 116.368471));
			Assert::IsTrue(points[i++] == Point2d(105.616396, 116.223679));
			Assert::IsTrue(points[i++] == Point2d(105.703251, 116.079850));
			Assert::IsTrue(points[i++] == Point2d(105.791711, 115.937003));
			Assert::IsTrue(points[i++] == Point2d(105.881766, 115.795156));
			Assert::IsTrue(points[i++] == Point2d(105.973404, 115.654326));
			Assert::IsTrue(points[i++] == Point2d(106.066614, 115.514532));
			Assert::IsTrue(points[i++] == Point2d(106.161384, 115.375791));
			Assert::IsTrue(points[i++] == Point2d(106.257702, 115.238119));
			Assert::IsTrue(points[i++] == Point2d(106.355556, 115.101536));
			Assert::IsTrue(points[i++] == Point2d(106.454934, 114.966057));
			Assert::IsTrue(points[i++] == Point2d(106.555823, 114.831699));
			Assert::IsTrue(points[i++] == Point2d(106.658211, 114.698481));
			Assert::IsTrue(points[i++] == Point2d(106.762085, 114.566417));
			Assert::IsTrue(points[i++] == Point2d(106.867431, 114.435525));
			Assert::IsTrue(points[i++] == Point2d(106.974237, 114.305821));
			Assert::IsTrue(points[i++] == Point2d(107.082488, 114.177322));
			Assert::IsTrue(points[i++] == Point2d(107.192173, 114.050044));
			Assert::IsTrue(points[i++] == Point2d(107.303276, 113.924002));
			Assert::IsTrue(points[i++] == Point2d(107.415784, 113.799212));
			Assert::IsTrue(points[i++] == Point2d(107.529683, 113.675691));
			Assert::IsTrue(points[i++] == Point2d(107.644958, 113.553453));
			Assert::IsTrue(points[i++] == Point2d(107.761595, 113.432513));
			Assert::IsTrue(points[i++] == Point2d(107.879580, 113.312888));
			Assert::IsTrue(points[i++] == Point2d(107.998897, 113.194592));
			Assert::IsTrue(points[i++] == Point2d(108.119532, 113.077640));
			Assert::IsTrue(points[i++] == Point2d(108.241469, 112.962047));
			Assert::IsTrue(points[i++] == Point2d(108.364693, 112.847826));
			Assert::IsTrue(points[i++] == Point2d(108.489189, 112.734993));
			Assert::IsTrue(points[i++] == Point2d(108.614940, 112.623562));
			Assert::IsTrue(points[i++] == Point2d(108.741933, 112.513546));
			Assert::IsTrue(points[i++] == Point2d(108.870149, 112.404959));
			Assert::IsTrue(points[i++] == Point2d(108.999574, 112.297816));
			Assert::IsTrue(points[i++] == Point2d(109.130191, 112.192128));
			Assert::IsTrue(points[i++] == Point2d(109.261983, 112.087911));
			Assert::IsTrue(points[i++] == Point2d(109.394934, 111.985176));
			Assert::IsTrue(points[i++] == Point2d(109.529028, 111.883937));
			Assert::IsTrue(points[i++] == Point2d(109.664248, 111.784206));
			Assert::IsTrue(points[i++] == Point2d(109.800576, 111.685997));
			Assert::IsTrue(points[i++] == Point2d(109.937995, 111.589320));
			Assert::IsTrue(points[i++] == Point2d(110.076489, 111.494189));
			Assert::IsTrue(points[i++] == Point2d(110.216040, 111.400614));
			Assert::IsTrue(points[i++] == Point2d(110.356630, 111.308609));
			Assert::IsTrue(points[i++] == Point2d(110.498242, 111.218185));
			Assert::IsTrue(points[i++] == Point2d(110.640857, 111.129352));
			Assert::IsTrue(points[i++] == Point2d(110.784459, 111.042122));
			Assert::IsTrue(points[i++] == Point2d(110.929029, 110.956507));
			Assert::IsTrue(points[i++] == Point2d(111.074549, 110.872516));
			Assert::IsTrue(points[i++] == Point2d(111.221001, 110.790160));
			Assert::IsTrue(points[i++] == Point2d(111.368365, 110.709450));
			Assert::IsTrue(points[i++] == Point2d(111.516625, 110.630396));
			Assert::IsTrue(points[i++] == Point2d(111.665761, 110.553007));
			Assert::IsTrue(points[i++] == Point2d(111.815754, 110.477293));
			Assert::IsTrue(points[i++] == Point2d(111.966586, 110.403265));
			Assert::IsTrue(points[i++] == Point2d(119.000000, 107.000000));
			Assert::IsTrue(points[i++] == Point2d(119.000000, 100.750000));
			Assert::IsTrue(points[i++] == Point2d(118.250000, 100.000000));
			Assert::IsTrue(points[i++] == Point2d(100.000000, 100.000000));
			Assert::IsTrue(i == points.size());

			props = beam.GetProperties();
			Assert::IsTrue(IsEqual(props.GetArea(), area, 0.01));
			Assert::IsTrue(IsEqual(props.GetIxx(), Ixx, 0.01));
			Assert::IsTrue(IsEqual(props.GetIyy(), Iyy, 0.01));
			Assert::IsTrue(IsEqual(props.GetIxy(), Ixy, 0.01));
		}

		TEST_METHOD(Offset)
		{
			auto beam = GetTestBeam();
			auto props = beam.GetProperties();

			// Get moment of inertia about CG before move
			// These properties should be invariant
			Float64 area = props.GetArea();
			Float64 Ixx = props.GetIxx();
			Float64 Iyy = props.GetIyy();
			Float64 Ixy = props.GetIxy();

			Size2d size(100, 100);
			beam.Offset(size);
			auto points = beam.GetPolyPoints();

			Assert::IsTrue(points.size() == 219);
			int i = 0;
			Assert::IsTrue(points[i++] == Point2d(100.000000, 100.000000));
			Assert::IsTrue(points[i++] == Point2d(81.750000, 100.000000));
			Assert::IsTrue(points[i++] == Point2d(81.000000, 100.750000));
			Assert::IsTrue(points[i++] == Point2d(81.000000, 107.000000));
			Assert::IsTrue(points[i++] == Point2d(88.033414, 110.403265));
			Assert::IsTrue(points[i++] == Point2d(88.184246, 110.477293));
			Assert::IsTrue(points[i++] == Point2d(88.334239, 110.553007));
			Assert::IsTrue(points[i++] == Point2d(88.483375, 110.630396));
			Assert::IsTrue(points[i++] == Point2d(88.631635, 110.709450));
			Assert::IsTrue(points[i++] == Point2d(88.778999, 110.790160));
			Assert::IsTrue(points[i++] == Point2d(88.925451, 110.872516));
			Assert::IsTrue(points[i++] == Point2d(89.070971, 110.956507));
			Assert::IsTrue(points[i++] == Point2d(89.215541, 111.042122));
			Assert::IsTrue(points[i++] == Point2d(89.359143, 111.129352));
			Assert::IsTrue(points[i++] == Point2d(89.501758, 111.218185));
			Assert::IsTrue(points[i++] == Point2d(89.643370, 111.308609));
			Assert::IsTrue(points[i++] == Point2d(89.783960, 111.400614));
			Assert::IsTrue(points[i++] == Point2d(89.923511, 111.494189));
			Assert::IsTrue(points[i++] == Point2d(90.062005, 111.589320));
			Assert::IsTrue(points[i++] == Point2d(90.199424, 111.685997));
			Assert::IsTrue(points[i++] == Point2d(90.335752, 111.784206));
			Assert::IsTrue(points[i++] == Point2d(90.470972, 111.883937));
			Assert::IsTrue(points[i++] == Point2d(90.605066, 111.985176));
			Assert::IsTrue(points[i++] == Point2d(90.738017, 112.087911));
			Assert::IsTrue(points[i++] == Point2d(90.869809, 112.192128));
			Assert::IsTrue(points[i++] == Point2d(91.000426, 112.297816));
			Assert::IsTrue(points[i++] == Point2d(91.129851, 112.404959));
			Assert::IsTrue(points[i++] == Point2d(91.258067, 112.513546));
			Assert::IsTrue(points[i++] == Point2d(91.385060, 112.623562));
			Assert::IsTrue(points[i++] == Point2d(91.510811, 112.734993));
			Assert::IsTrue(points[i++] == Point2d(91.635307, 112.847826));
			Assert::IsTrue(points[i++] == Point2d(91.758531, 112.962047));
			Assert::IsTrue(points[i++] == Point2d(91.880468, 113.077640));
			Assert::IsTrue(points[i++] == Point2d(92.001103, 113.194592));
			Assert::IsTrue(points[i++] == Point2d(92.120420, 113.312888));
			Assert::IsTrue(points[i++] == Point2d(92.238405, 113.432513));
			Assert::IsTrue(points[i++] == Point2d(92.355042, 113.553453));
			Assert::IsTrue(points[i++] == Point2d(92.470317, 113.675691));
			Assert::IsTrue(points[i++] == Point2d(92.584216, 113.799212));
			Assert::IsTrue(points[i++] == Point2d(92.696724, 113.924002));
			Assert::IsTrue(points[i++] == Point2d(92.807827, 114.050044));
			Assert::IsTrue(points[i++] == Point2d(92.917512, 114.177322));
			Assert::IsTrue(points[i++] == Point2d(93.025763, 114.305821));
			Assert::IsTrue(points[i++] == Point2d(93.132569, 114.435525));
			Assert::IsTrue(points[i++] == Point2d(93.237915, 114.566417));
			Assert::IsTrue(points[i++] == Point2d(93.341789, 114.698481));
			Assert::IsTrue(points[i++] == Point2d(93.444177, 114.831699));
			Assert::IsTrue(points[i++] == Point2d(93.545066, 114.966057));
			Assert::IsTrue(points[i++] == Point2d(93.644444, 115.101536));
			Assert::IsTrue(points[i++] == Point2d(93.742298, 115.238119));
			Assert::IsTrue(points[i++] == Point2d(93.838616, 115.375791));
			Assert::IsTrue(points[i++] == Point2d(93.933386, 115.514532));
			Assert::IsTrue(points[i++] == Point2d(94.026596, 115.654326));
			Assert::IsTrue(points[i++] == Point2d(94.118234, 115.795156));
			Assert::IsTrue(points[i++] == Point2d(94.208289, 115.937003));
			Assert::IsTrue(points[i++] == Point2d(94.296749, 116.079850));
			Assert::IsTrue(points[i++] == Point2d(94.383604, 116.223679));
			Assert::IsTrue(points[i++] == Point2d(94.468843, 116.368471));
			Assert::IsTrue(points[i++] == Point2d(94.552454, 116.514210));
			Assert::IsTrue(points[i++] == Point2d(94.634428, 116.660875));
			Assert::IsTrue(points[i++] == Point2d(94.714753, 116.808450));
			Assert::IsTrue(points[i++] == Point2d(94.793421, 116.956915));
			Assert::IsTrue(points[i++] == Point2d(94.870420, 117.106252));
			Assert::IsTrue(points[i++] == Point2d(94.945743, 117.256442));
			Assert::IsTrue(points[i++] == Point2d(95.019378, 117.407467));
			Assert::IsTrue(points[i++] == Point2d(95.091316, 117.559307));
			Assert::IsTrue(points[i++] == Point2d(95.161550, 117.711943));
			Assert::IsTrue(points[i++] == Point2d(95.230069, 117.865356));
			Assert::IsTrue(points[i++] == Point2d(95.296866, 118.019527));
			Assert::IsTrue(points[i++] == Point2d(95.361932, 118.174437));
			Assert::IsTrue(points[i++] == Point2d(95.425258, 118.330065));
			Assert::IsTrue(points[i++] == Point2d(95.486837, 118.486393));
			Assert::IsTrue(points[i++] == Point2d(95.546662, 118.643402));
			Assert::IsTrue(points[i++] == Point2d(95.604724, 118.801070));
			Assert::IsTrue(points[i++] == Point2d(95.661016, 118.959379));
			Assert::IsTrue(points[i++] == Point2d(95.715531, 119.118308));
			Assert::IsTrue(points[i++] == Point2d(95.768263, 119.277838));
			Assert::IsTrue(points[i++] == Point2d(95.819205, 119.437949));
			Assert::IsTrue(points[i++] == Point2d(95.868349, 119.598621));
			Assert::IsTrue(points[i++] == Point2d(95.915692, 119.759832));
			Assert::IsTrue(points[i++] == Point2d(95.961225, 119.921564));
			Assert::IsTrue(points[i++] == Point2d(96.004944, 120.083796));
			Assert::IsTrue(points[i++] == Point2d(96.046843, 120.246507));
			Assert::IsTrue(points[i++] == Point2d(96.086917, 120.409678));
			Assert::IsTrue(points[i++] == Point2d(96.125161, 120.573287));
			Assert::IsTrue(points[i++] == Point2d(96.161570, 120.737314));
			Assert::IsTrue(points[i++] == Point2d(96.196139, 120.901739));
			Assert::IsTrue(points[i++] == Point2d(96.228864, 121.066540));
			Assert::IsTrue(points[i++] == Point2d(96.259741, 121.231698));
			Assert::IsTrue(points[i++] == Point2d(96.288767, 121.397191));
			Assert::IsTrue(points[i++] == Point2d(96.315936, 121.563000));
			Assert::IsTrue(points[i++] == Point2d(96.341247, 121.729101));
			Assert::IsTrue(points[i++] == Point2d(96.364696, 121.895477));
			Assert::IsTrue(points[i++] == Point2d(96.386280, 122.062104));
			Assert::IsTrue(points[i++] == Point2d(96.405996, 122.228962));
			Assert::IsTrue(points[i++] == Point2d(96.423841, 122.396031));
			Assert::IsTrue(points[i++] == Point2d(96.439815, 122.563290));
			Assert::IsTrue(points[i++] == Point2d(96.453913, 122.730717));
			Assert::IsTrue(points[i++] == Point2d(96.466136, 122.898291));
			Assert::IsTrue(points[i++] == Point2d(96.476480, 123.065991));
			Assert::IsTrue(points[i++] == Point2d(96.484946, 123.233797));
			Assert::IsTrue(points[i++] == Point2d(96.491532, 123.401688));
			Assert::IsTrue(points[i++] == Point2d(96.496236, 123.569641));
			Assert::IsTrue(points[i++] == Point2d(96.499059, 123.737637));
			Assert::IsTrue(points[i++] == Point2d(96.500000, 123.905654));
			Assert::IsTrue(points[i++] == Point2d(96.500000, 127.500000));
			Assert::IsTrue(points[i++] == Point2d(93.000000, 131.000000));
			Assert::IsTrue(points[i++] == Point2d(76.000000, 132.500000));
			Assert::IsTrue(points[i++] == Point2d(76.000000, 136.000000));
			Assert::IsTrue(points[i++] == Point2d(100.000000, 136.000000));
			Assert::IsTrue(points[i++] == Point2d(124.000000, 136.000000));
			Assert::IsTrue(points[i++] == Point2d(124.000000, 132.500000));
			Assert::IsTrue(points[i++] == Point2d(107.000000, 131.000000));
			Assert::IsTrue(points[i++] == Point2d(103.500000, 127.500000));
			Assert::IsTrue(points[i++] == Point2d(103.500000, 123.905654));
			Assert::IsTrue(points[i++] == Point2d(103.500941, 123.737637));
			Assert::IsTrue(points[i++] == Point2d(103.503764, 123.569641));
			Assert::IsTrue(points[i++] == Point2d(103.508468, 123.401688));
			Assert::IsTrue(points[i++] == Point2d(103.515054, 123.233797));
			Assert::IsTrue(points[i++] == Point2d(103.523520, 123.065991));
			Assert::IsTrue(points[i++] == Point2d(103.533864, 122.898291));
			Assert::IsTrue(points[i++] == Point2d(103.546087, 122.730717));
			Assert::IsTrue(points[i++] == Point2d(103.560185, 122.563290));
			Assert::IsTrue(points[i++] == Point2d(103.576159, 122.396031));
			Assert::IsTrue(points[i++] == Point2d(103.594004, 122.228962));
			Assert::IsTrue(points[i++] == Point2d(103.613720, 122.062104));
			Assert::IsTrue(points[i++] == Point2d(103.635304, 121.895477));
			Assert::IsTrue(points[i++] == Point2d(103.658753, 121.729101));
			Assert::IsTrue(points[i++] == Point2d(103.684064, 121.563000));
			Assert::IsTrue(points[i++] == Point2d(103.711233, 121.397191));
			Assert::IsTrue(points[i++] == Point2d(103.740259, 121.231698));
			Assert::IsTrue(points[i++] == Point2d(103.771136, 121.066540));
			Assert::IsTrue(points[i++] == Point2d(103.803861, 120.901739));
			Assert::IsTrue(points[i++] == Point2d(103.838430, 120.737314));
			Assert::IsTrue(points[i++] == Point2d(103.874839, 120.573287));
			Assert::IsTrue(points[i++] == Point2d(103.913083, 120.409678));
			Assert::IsTrue(points[i++] == Point2d(103.953157, 120.246507));
			Assert::IsTrue(points[i++] == Point2d(103.995056, 120.083796));
			Assert::IsTrue(points[i++] == Point2d(104.038775, 119.921564));
			Assert::IsTrue(points[i++] == Point2d(104.084308, 119.759832));
			Assert::IsTrue(points[i++] == Point2d(104.131651, 119.598621));
			Assert::IsTrue(points[i++] == Point2d(104.180795, 119.437949));
			Assert::IsTrue(points[i++] == Point2d(104.231737, 119.277838));
			Assert::IsTrue(points[i++] == Point2d(104.284469, 119.118308));
			Assert::IsTrue(points[i++] == Point2d(104.338984, 118.959379));
			Assert::IsTrue(points[i++] == Point2d(104.395276, 118.801070));
			Assert::IsTrue(points[i++] == Point2d(104.453338, 118.643402));
			Assert::IsTrue(points[i++] == Point2d(104.513163, 118.486393));
			Assert::IsTrue(points[i++] == Point2d(104.574742, 118.330065));
			Assert::IsTrue(points[i++] == Point2d(104.638068, 118.174437));
			Assert::IsTrue(points[i++] == Point2d(104.703134, 118.019527));
			Assert::IsTrue(points[i++] == Point2d(104.769931, 117.865356));
			Assert::IsTrue(points[i++] == Point2d(104.838450, 117.711943));
			Assert::IsTrue(points[i++] == Point2d(104.908684, 117.559307));
			Assert::IsTrue(points[i++] == Point2d(104.980622, 117.407467));
			Assert::IsTrue(points[i++] == Point2d(105.054257, 117.256442));
			Assert::IsTrue(points[i++] == Point2d(105.129580, 117.106252));
			Assert::IsTrue(points[i++] == Point2d(105.206579, 116.956915));
			Assert::IsTrue(points[i++] == Point2d(105.285247, 116.808450));
			Assert::IsTrue(points[i++] == Point2d(105.365572, 116.660875));
			Assert::IsTrue(points[i++] == Point2d(105.447546, 116.514210));
			Assert::IsTrue(points[i++] == Point2d(105.531157, 116.368471));
			Assert::IsTrue(points[i++] == Point2d(105.616396, 116.223679));
			Assert::IsTrue(points[i++] == Point2d(105.703251, 116.079850));
			Assert::IsTrue(points[i++] == Point2d(105.791711, 115.937003));
			Assert::IsTrue(points[i++] == Point2d(105.881766, 115.795156));
			Assert::IsTrue(points[i++] == Point2d(105.973404, 115.654326));
			Assert::IsTrue(points[i++] == Point2d(106.066614, 115.514532));
			Assert::IsTrue(points[i++] == Point2d(106.161384, 115.375791));
			Assert::IsTrue(points[i++] == Point2d(106.257702, 115.238119));
			Assert::IsTrue(points[i++] == Point2d(106.355556, 115.101536));
			Assert::IsTrue(points[i++] == Point2d(106.454934, 114.966057));
			Assert::IsTrue(points[i++] == Point2d(106.555823, 114.831699));
			Assert::IsTrue(points[i++] == Point2d(106.658211, 114.698481));
			Assert::IsTrue(points[i++] == Point2d(106.762085, 114.566417));
			Assert::IsTrue(points[i++] == Point2d(106.867431, 114.435525));
			Assert::IsTrue(points[i++] == Point2d(106.974237, 114.305821));
			Assert::IsTrue(points[i++] == Point2d(107.082488, 114.177322));
			Assert::IsTrue(points[i++] == Point2d(107.192173, 114.050044));
			Assert::IsTrue(points[i++] == Point2d(107.303276, 113.924002));
			Assert::IsTrue(points[i++] == Point2d(107.415784, 113.799212));
			Assert::IsTrue(points[i++] == Point2d(107.529683, 113.675691));
			Assert::IsTrue(points[i++] == Point2d(107.644958, 113.553453));
			Assert::IsTrue(points[i++] == Point2d(107.761595, 113.432513));
			Assert::IsTrue(points[i++] == Point2d(107.879580, 113.312888));
			Assert::IsTrue(points[i++] == Point2d(107.998897, 113.194592));
			Assert::IsTrue(points[i++] == Point2d(108.119532, 113.077640));
			Assert::IsTrue(points[i++] == Point2d(108.241469, 112.962047));
			Assert::IsTrue(points[i++] == Point2d(108.364693, 112.847826));
			Assert::IsTrue(points[i++] == Point2d(108.489189, 112.734993));
			Assert::IsTrue(points[i++] == Point2d(108.614940, 112.623562));
			Assert::IsTrue(points[i++] == Point2d(108.741933, 112.513546));
			Assert::IsTrue(points[i++] == Point2d(108.870149, 112.404959));
			Assert::IsTrue(points[i++] == Point2d(108.999574, 112.297816));
			Assert::IsTrue(points[i++] == Point2d(109.130191, 112.192128));
			Assert::IsTrue(points[i++] == Point2d(109.261983, 112.087911));
			Assert::IsTrue(points[i++] == Point2d(109.394934, 111.985176));
			Assert::IsTrue(points[i++] == Point2d(109.529028, 111.883937));
			Assert::IsTrue(points[i++] == Point2d(109.664248, 111.784206));
			Assert::IsTrue(points[i++] == Point2d(109.800576, 111.685997));
			Assert::IsTrue(points[i++] == Point2d(109.937995, 111.589320));
			Assert::IsTrue(points[i++] == Point2d(110.076489, 111.494189));
			Assert::IsTrue(points[i++] == Point2d(110.216040, 111.400614));
			Assert::IsTrue(points[i++] == Point2d(110.356630, 111.308609));
			Assert::IsTrue(points[i++] == Point2d(110.498242, 111.218185));
			Assert::IsTrue(points[i++] == Point2d(110.640857, 111.129352));
			Assert::IsTrue(points[i++] == Point2d(110.784459, 111.042122));
			Assert::IsTrue(points[i++] == Point2d(110.929029, 110.956507));
			Assert::IsTrue(points[i++] == Point2d(111.074549, 110.872516));
			Assert::IsTrue(points[i++] == Point2d(111.221001, 110.790160));
			Assert::IsTrue(points[i++] == Point2d(111.368365, 110.709450));
			Assert::IsTrue(points[i++] == Point2d(111.516625, 110.630396));
			Assert::IsTrue(points[i++] == Point2d(111.665761, 110.553007));
			Assert::IsTrue(points[i++] == Point2d(111.815754, 110.477293));
			Assert::IsTrue(points[i++] == Point2d(111.966586, 110.403265));
			Assert::IsTrue(points[i++] == Point2d(119.000000, 107.000000));
			Assert::IsTrue(points[i++] == Point2d(119.000000, 100.750000));
			Assert::IsTrue(points[i++] == Point2d(118.250000, 100.000000));
			Assert::IsTrue(points[i++] == Point2d(100.000000, 100.000000));
			Assert::IsTrue(i == points.size());

			props = beam.GetProperties();
			Assert::IsTrue(IsEqual(props.GetArea(), area, 0.01));
			Assert::IsTrue(IsEqual(props.GetIxx(), Ixx, 0.01));
			Assert::IsTrue(IsEqual(props.GetIyy(), Iyy, 0.01));
			Assert::IsTrue(IsEqual(props.GetIxy(), Ixy, 0.01));
		}

		TEST_METHOD(LocatorPoint)
		{
			auto beam = GetTestBeam();

			auto hookPnt = beam.GetHookPoint();

			// BottomLeft
			hookPnt->Move(0, 0);
			Point2d to(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::BottomLeft, to);
			auto from = beam.GetLocatorPoint(Shape::LocatorPoint::BottomLeft);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(124.0, 100.0));

			// BottomCenter
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::BottomCenter, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::BottomCenter);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(100.0, 100.0));

			// BottomRight
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::BottomRight, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::BottomRight);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(76.0, 100.0));

			// CenterLeft
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::CenterLeft, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::CenterLeft);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(124.0, 82.0));

			// CenterCenter
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::CenterCenter, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::CenterCenter);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(100.0, 82.0));

			// CenterRight
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::CenterRight, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::CenterRight);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(76.0, 82.0));

			// TopLeft
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::TopLeft, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::TopLeft);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(124.0, 64.0));

			// TopCenter
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::TopCenter, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::TopCenter);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(100.0, 64.0));

			// TopRight
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::TopRight, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::TopRight);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(76.0, 64.0));

			// HookPoint
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::HookPoint, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::HookPoint);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(100.0, 100.0));
		}

		TEST_METHOD(Rotate)
		{
			auto beam = GetTestBeam();
			auto hookPnt = beam.GetHookPoint();
			hookPnt->Move(0, 0);

			Point2d c(0, 0);

			beam.Rotate(c, M_PI);

			auto points = beam.GetPolyPoints();

			Assert::IsTrue(points.size() == 219);
			int i = 0;
			Assert::IsTrue(points[i++] == Point2d(0.000000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(18.250000, -0.000000));
			Assert::IsTrue(points[i++] == Point2d(19.000000, -0.750000));
			Assert::IsTrue(points[i++] == Point2d(19.000000, -7.000000));
			Assert::IsTrue(points[i++] == Point2d(11.966586, -10.403265));
			Assert::IsTrue(points[i++] == Point2d(11.815754, -10.477293));
			Assert::IsTrue(points[i++] == Point2d(11.665761, -10.553007));
			Assert::IsTrue(points[i++] == Point2d(11.516625, -10.630396));
			Assert::IsTrue(points[i++] == Point2d(11.368365, -10.709450));
			Assert::IsTrue(points[i++] == Point2d(11.221001, -10.790160));
			Assert::IsTrue(points[i++] == Point2d(11.074549, -10.872516));
			Assert::IsTrue(points[i++] == Point2d(10.929029, -10.956507));
			Assert::IsTrue(points[i++] == Point2d(10.784459, -11.042122));
			Assert::IsTrue(points[i++] == Point2d(10.640857, -11.129352));
			Assert::IsTrue(points[i++] == Point2d(10.498242, -11.218185));
			Assert::IsTrue(points[i++] == Point2d(10.356630, -11.308609));
			Assert::IsTrue(points[i++] == Point2d(10.216040, -11.400614));
			Assert::IsTrue(points[i++] == Point2d(10.076489, -11.494189));
			Assert::IsTrue(points[i++] == Point2d(9.937995, -11.589320));
			Assert::IsTrue(points[i++] == Point2d(9.800576, -11.685997));
			Assert::IsTrue(points[i++] == Point2d(9.664248, -11.784206));
			Assert::IsTrue(points[i++] == Point2d(9.529028, -11.883937));
			Assert::IsTrue(points[i++] == Point2d(9.394934, -11.985176));
			Assert::IsTrue(points[i++] == Point2d(9.261983, -12.087911));
			Assert::IsTrue(points[i++] == Point2d(9.130191, -12.192128));
			Assert::IsTrue(points[i++] == Point2d(8.999574, -12.297816));
			Assert::IsTrue(points[i++] == Point2d(8.870149, -12.404959));
			Assert::IsTrue(points[i++] == Point2d(8.741933, -12.513546));
			Assert::IsTrue(points[i++] == Point2d(8.614940, -12.623562));
			Assert::IsTrue(points[i++] == Point2d(8.489189, -12.734993));
			Assert::IsTrue(points[i++] == Point2d(8.364693, -12.847826));
			Assert::IsTrue(points[i++] == Point2d(8.241469, -12.962047));
			Assert::IsTrue(points[i++] == Point2d(8.119532, -13.077640));
			Assert::IsTrue(points[i++] == Point2d(7.998897, -13.194592));
			Assert::IsTrue(points[i++] == Point2d(7.879580, -13.312888));
			Assert::IsTrue(points[i++] == Point2d(7.761595, -13.432513));
			Assert::IsTrue(points[i++] == Point2d(7.644958, -13.553453));
			Assert::IsTrue(points[i++] == Point2d(7.529683, -13.675691));
			Assert::IsTrue(points[i++] == Point2d(7.415784, -13.799212));
			Assert::IsTrue(points[i++] == Point2d(7.303276, -13.924002));
			Assert::IsTrue(points[i++] == Point2d(7.192173, -14.050044));
			Assert::IsTrue(points[i++] == Point2d(7.082488, -14.177322));
			Assert::IsTrue(points[i++] == Point2d(6.974237, -14.305821));
			Assert::IsTrue(points[i++] == Point2d(6.867431, -14.435525));
			Assert::IsTrue(points[i++] == Point2d(6.762085, -14.566417));
			Assert::IsTrue(points[i++] == Point2d(6.658211, -14.698481));
			Assert::IsTrue(points[i++] == Point2d(6.555823, -14.831699));
			Assert::IsTrue(points[i++] == Point2d(6.454934, -14.966057));
			Assert::IsTrue(points[i++] == Point2d(6.355556, -15.101536));
			Assert::IsTrue(points[i++] == Point2d(6.257702, -15.238119));
			Assert::IsTrue(points[i++] == Point2d(6.161384, -15.375791));
			Assert::IsTrue(points[i++] == Point2d(6.066614, -15.514532));
			Assert::IsTrue(points[i++] == Point2d(5.973404, -15.654326));
			Assert::IsTrue(points[i++] == Point2d(5.881766, -15.795156));
			Assert::IsTrue(points[i++] == Point2d(5.791711, -15.937003));
			Assert::IsTrue(points[i++] == Point2d(5.703251, -16.079850));
			Assert::IsTrue(points[i++] == Point2d(5.616396, -16.223679));
			Assert::IsTrue(points[i++] == Point2d(5.531157, -16.368471));
			Assert::IsTrue(points[i++] == Point2d(5.447546, -16.514210));
			Assert::IsTrue(points[i++] == Point2d(5.365572, -16.660875));
			Assert::IsTrue(points[i++] == Point2d(5.285247, -16.808450));
			Assert::IsTrue(points[i++] == Point2d(5.206579, -16.956915));
			Assert::IsTrue(points[i++] == Point2d(5.129580, -17.106252));
			Assert::IsTrue(points[i++] == Point2d(5.054257, -17.256442));
			Assert::IsTrue(points[i++] == Point2d(4.980622, -17.407467));
			Assert::IsTrue(points[i++] == Point2d(4.908684, -17.559307));
			Assert::IsTrue(points[i++] == Point2d(4.838450, -17.711943));
			Assert::IsTrue(points[i++] == Point2d(4.769931, -17.865356));
			Assert::IsTrue(points[i++] == Point2d(4.703134, -18.019527));
			Assert::IsTrue(points[i++] == Point2d(4.638068, -18.174437));
			Assert::IsTrue(points[i++] == Point2d(4.574742, -18.330065));
			Assert::IsTrue(points[i++] == Point2d(4.513163, -18.486393));
			Assert::IsTrue(points[i++] == Point2d(4.453338, -18.643402));
			Assert::IsTrue(points[i++] == Point2d(4.395276, -18.801070));
			Assert::IsTrue(points[i++] == Point2d(4.338984, -18.959379));
			Assert::IsTrue(points[i++] == Point2d(4.284469, -19.118308));
			Assert::IsTrue(points[i++] == Point2d(4.231737, -19.277838));
			Assert::IsTrue(points[i++] == Point2d(4.180795, -19.437949));
			Assert::IsTrue(points[i++] == Point2d(4.131651, -19.598621));
			Assert::IsTrue(points[i++] == Point2d(4.084308, -19.759832));
			Assert::IsTrue(points[i++] == Point2d(4.038775, -19.921564));
			Assert::IsTrue(points[i++] == Point2d(3.995056, -20.083796));
			Assert::IsTrue(points[i++] == Point2d(3.953157, -20.246507));
			Assert::IsTrue(points[i++] == Point2d(3.913083, -20.409678));
			Assert::IsTrue(points[i++] == Point2d(3.874839, -20.573287));
			Assert::IsTrue(points[i++] == Point2d(3.838430, -20.737314));
			Assert::IsTrue(points[i++] == Point2d(3.803861, -20.901739));
			Assert::IsTrue(points[i++] == Point2d(3.771136, -21.066540));
			Assert::IsTrue(points[i++] == Point2d(3.740259, -21.231698));
			Assert::IsTrue(points[i++] == Point2d(3.711233, -21.397191));
			Assert::IsTrue(points[i++] == Point2d(3.684064, -21.563000));
			Assert::IsTrue(points[i++] == Point2d(3.658753, -21.729101));
			Assert::IsTrue(points[i++] == Point2d(3.635304, -21.895477));
			Assert::IsTrue(points[i++] == Point2d(3.613720, -22.062104));
			Assert::IsTrue(points[i++] == Point2d(3.594004, -22.228962));
			Assert::IsTrue(points[i++] == Point2d(3.576159, -22.396031));
			Assert::IsTrue(points[i++] == Point2d(3.560185, -22.563290));
			Assert::IsTrue(points[i++] == Point2d(3.546087, -22.730717));
			Assert::IsTrue(points[i++] == Point2d(3.533864, -22.898291));
			Assert::IsTrue(points[i++] == Point2d(3.523520, -23.065991));
			Assert::IsTrue(points[i++] == Point2d(3.515054, -23.233797));
			Assert::IsTrue(points[i++] == Point2d(3.508468, -23.401688));
			Assert::IsTrue(points[i++] == Point2d(3.503764, -23.569641));
			Assert::IsTrue(points[i++] == Point2d(3.500941, -23.737637));
			Assert::IsTrue(points[i++] == Point2d(3.500000, -23.905654));
			Assert::IsTrue(points[i++] == Point2d(3.500000, -27.500000));
			Assert::IsTrue(points[i++] == Point2d(7.000000, -31.000000));
			Assert::IsTrue(points[i++] == Point2d(24.000000, -32.500000));
			Assert::IsTrue(points[i++] == Point2d(24.000000, -36.000000));
			Assert::IsTrue(points[i++] == Point2d(-0.000000, -36.000000));
			Assert::IsTrue(points[i++] == Point2d(-24.000000, -36.000000));
			Assert::IsTrue(points[i++] == Point2d(-24.000000, -32.500000));
			Assert::IsTrue(points[i++] == Point2d(-7.000000, -31.000000));
			Assert::IsTrue(points[i++] == Point2d(-3.500000, -27.500000));
			Assert::IsTrue(points[i++] == Point2d(-3.500000, -23.905654));
			Assert::IsTrue(points[i++] == Point2d(-3.500941, -23.737637));
			Assert::IsTrue(points[i++] == Point2d(-3.503764, -23.569641));
			Assert::IsTrue(points[i++] == Point2d(-3.508468, -23.401688));
			Assert::IsTrue(points[i++] == Point2d(-3.515054, -23.233797));
			Assert::IsTrue(points[i++] == Point2d(-3.523520, -23.065991));
			Assert::IsTrue(points[i++] == Point2d(-3.533864, -22.898291));
			Assert::IsTrue(points[i++] == Point2d(-3.546087, -22.730717));
			Assert::IsTrue(points[i++] == Point2d(-3.560185, -22.563290));
			Assert::IsTrue(points[i++] == Point2d(-3.576159, -22.396031));
			Assert::IsTrue(points[i++] == Point2d(-3.594004, -22.228962));
			Assert::IsTrue(points[i++] == Point2d(-3.613720, -22.062104));
			Assert::IsTrue(points[i++] == Point2d(-3.635304, -21.895477));
			Assert::IsTrue(points[i++] == Point2d(-3.658753, -21.729101));
			Assert::IsTrue(points[i++] == Point2d(-3.684064, -21.563000));
			Assert::IsTrue(points[i++] == Point2d(-3.711233, -21.397191));
			Assert::IsTrue(points[i++] == Point2d(-3.740259, -21.231698));
			Assert::IsTrue(points[i++] == Point2d(-3.771136, -21.066540));
			Assert::IsTrue(points[i++] == Point2d(-3.803861, -20.901739));
			Assert::IsTrue(points[i++] == Point2d(-3.838430, -20.737314));
			Assert::IsTrue(points[i++] == Point2d(-3.874839, -20.573287));
			Assert::IsTrue(points[i++] == Point2d(-3.913083, -20.409678));
			Assert::IsTrue(points[i++] == Point2d(-3.953157, -20.246507));
			Assert::IsTrue(points[i++] == Point2d(-3.995056, -20.083796));
			Assert::IsTrue(points[i++] == Point2d(-4.038775, -19.921564));
			Assert::IsTrue(points[i++] == Point2d(-4.084308, -19.759832));
			Assert::IsTrue(points[i++] == Point2d(-4.131651, -19.598621));
			Assert::IsTrue(points[i++] == Point2d(-4.180795, -19.437949));
			Assert::IsTrue(points[i++] == Point2d(-4.231737, -19.277838));
			Assert::IsTrue(points[i++] == Point2d(-4.284469, -19.118308));
			Assert::IsTrue(points[i++] == Point2d(-4.338984, -18.959379));
			Assert::IsTrue(points[i++] == Point2d(-4.395276, -18.801070));
			Assert::IsTrue(points[i++] == Point2d(-4.453338, -18.643402));
			Assert::IsTrue(points[i++] == Point2d(-4.513163, -18.486393));
			Assert::IsTrue(points[i++] == Point2d(-4.574742, -18.330065));
			Assert::IsTrue(points[i++] == Point2d(-4.638068, -18.174437));
			Assert::IsTrue(points[i++] == Point2d(-4.703134, -18.019527));
			Assert::IsTrue(points[i++] == Point2d(-4.769931, -17.865356));
			Assert::IsTrue(points[i++] == Point2d(-4.838450, -17.711943));
			Assert::IsTrue(points[i++] == Point2d(-4.908684, -17.559307));
			Assert::IsTrue(points[i++] == Point2d(-4.980622, -17.407467));
			Assert::IsTrue(points[i++] == Point2d(-5.054257, -17.256442));
			Assert::IsTrue(points[i++] == Point2d(-5.129580, -17.106252));
			Assert::IsTrue(points[i++] == Point2d(-5.206579, -16.956915));
			Assert::IsTrue(points[i++] == Point2d(-5.285247, -16.808450));
			Assert::IsTrue(points[i++] == Point2d(-5.365572, -16.660875));
			Assert::IsTrue(points[i++] == Point2d(-5.447546, -16.514210));
			Assert::IsTrue(points[i++] == Point2d(-5.531157, -16.368471));
			Assert::IsTrue(points[i++] == Point2d(-5.616396, -16.223679));
			Assert::IsTrue(points[i++] == Point2d(-5.703251, -16.079850));
			Assert::IsTrue(points[i++] == Point2d(-5.791711, -15.937003));
			Assert::IsTrue(points[i++] == Point2d(-5.881766, -15.795156));
			Assert::IsTrue(points[i++] == Point2d(-5.973404, -15.654326));
			Assert::IsTrue(points[i++] == Point2d(-6.066614, -15.514532));
			Assert::IsTrue(points[i++] == Point2d(-6.161384, -15.375791));
			Assert::IsTrue(points[i++] == Point2d(-6.257702, -15.238119));
			Assert::IsTrue(points[i++] == Point2d(-6.355556, -15.101536));
			Assert::IsTrue(points[i++] == Point2d(-6.454934, -14.966057));
			Assert::IsTrue(points[i++] == Point2d(-6.555823, -14.831699));
			Assert::IsTrue(points[i++] == Point2d(-6.658211, -14.698481));
			Assert::IsTrue(points[i++] == Point2d(-6.762085, -14.566417));
			Assert::IsTrue(points[i++] == Point2d(-6.867431, -14.435525));
			Assert::IsTrue(points[i++] == Point2d(-6.974237, -14.305821));
			Assert::IsTrue(points[i++] == Point2d(-7.082488, -14.177322));
			Assert::IsTrue(points[i++] == Point2d(-7.192173, -14.050044));
			Assert::IsTrue(points[i++] == Point2d(-7.303276, -13.924002));
			Assert::IsTrue(points[i++] == Point2d(-7.415784, -13.799212));
			Assert::IsTrue(points[i++] == Point2d(-7.529683, -13.675691));
			Assert::IsTrue(points[i++] == Point2d(-7.644958, -13.553453));
			Assert::IsTrue(points[i++] == Point2d(-7.761595, -13.432513));
			Assert::IsTrue(points[i++] == Point2d(-7.879580, -13.312888));
			Assert::IsTrue(points[i++] == Point2d(-7.998897, -13.194592));
			Assert::IsTrue(points[i++] == Point2d(-8.119532, -13.077640));
			Assert::IsTrue(points[i++] == Point2d(-8.241469, -12.962047));
			Assert::IsTrue(points[i++] == Point2d(-8.364693, -12.847826));
			Assert::IsTrue(points[i++] == Point2d(-8.489189, -12.734993));
			Assert::IsTrue(points[i++] == Point2d(-8.614940, -12.623562));
			Assert::IsTrue(points[i++] == Point2d(-8.741933, -12.513546));
			Assert::IsTrue(points[i++] == Point2d(-8.870149, -12.404959));
			Assert::IsTrue(points[i++] == Point2d(-8.999574, -12.297816));
			Assert::IsTrue(points[i++] == Point2d(-9.130191, -12.192128));
			Assert::IsTrue(points[i++] == Point2d(-9.261983, -12.087911));
			Assert::IsTrue(points[i++] == Point2d(-9.394934, -11.985176));
			Assert::IsTrue(points[i++] == Point2d(-9.529028, -11.883937));
			Assert::IsTrue(points[i++] == Point2d(-9.664248, -11.784206));
			Assert::IsTrue(points[i++] == Point2d(-9.800576, -11.685997));
			Assert::IsTrue(points[i++] == Point2d(-9.937995, -11.589320));
			Assert::IsTrue(points[i++] == Point2d(-10.076489, -11.494189));
			Assert::IsTrue(points[i++] == Point2d(-10.216040, -11.400614));
			Assert::IsTrue(points[i++] == Point2d(-10.356630, -11.308609));
			Assert::IsTrue(points[i++] == Point2d(-10.498242, -11.218185));
			Assert::IsTrue(points[i++] == Point2d(-10.640857, -11.129352));
			Assert::IsTrue(points[i++] == Point2d(-10.784459, -11.042122));
			Assert::IsTrue(points[i++] == Point2d(-10.929029, -10.956507));
			Assert::IsTrue(points[i++] == Point2d(-11.074549, -10.872516));
			Assert::IsTrue(points[i++] == Point2d(-11.221001, -10.790160));
			Assert::IsTrue(points[i++] == Point2d(-11.368365, -10.709450));
			Assert::IsTrue(points[i++] == Point2d(-11.516625, -10.630396));
			Assert::IsTrue(points[i++] == Point2d(-11.665761, -10.553007));
			Assert::IsTrue(points[i++] == Point2d(-11.815754, -10.477293));
			Assert::IsTrue(points[i++] == Point2d(-11.966586, -10.403265));
			Assert::IsTrue(points[i++] == Point2d(-19.000000, -7.000000));
			Assert::IsTrue(points[i++] == Point2d(-19.000000, -0.750000));
			Assert::IsTrue(points[i++] == Point2d(-18.250000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(0.000000, 0.000000));
			Assert::IsTrue(i == points.size());
		}
	};
}
