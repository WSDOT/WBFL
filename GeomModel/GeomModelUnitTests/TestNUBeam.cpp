#include "pch.h"
#include "CppUnitTest.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace WBFL::Geometry;

namespace GeomModelUnitTest
{
	TEST_CLASS(TestNUBeam)
	{
	public:
		
		NUBeam GetTestBeam()
		{
			NUBeam beam;
			// Use some real dimensions (NU2400 - 150mm web)
			beam.SetW1(1225);
			beam.SetW2(975);
			beam.SetD1(65);
			beam.SetD2(45);
			beam.SetD3(2015);
			beam.SetD4(140);
			beam.SetD5(135);
			beam.SetT(150);
			beam.SetR1(200);
			beam.SetR2(200);
			beam.SetR3(50);
			beam.SetR4(50);
			return beam;
		}

		TEST_METHOD(BoundingBox)
		{
			auto beam = GetTestBeam();
			auto box = beam.GetBoundingBox();

			Assert::IsTrue(IsEqual(box.Left(), -612.5));
			Assert::IsTrue(IsEqual(box.Right(), 612.5));
			Assert::IsTrue(IsEqual(box.Top(), 2400.));
			Assert::IsTrue(IsEqual(box.Bottom(), 0.00));
		}

		TEST_METHOD(ShapeProperties)
		{
			auto beam = GetTestBeam();
			auto props = beam.GetProperties();
		
			Assert::IsTrue(IsEqual(props.GetArea(), 643591.88418736495));
			Assert::IsTrue(IsEqual(props.GetIxx(), 514253978920.25220));
			Assert::IsTrue(IsEqual(props.GetIyy(), 25969895815.002991));
			Assert::IsTrue(IsEqual(props.GetIxy(), 0.0));
			Assert::IsTrue(IsEqual(props.GetCentroid().X(), 0.0));
			Assert::IsTrue(IsEqual(props.GetCentroid().Y(), 1093.1459162077181));
			Assert::IsTrue(props.GetCoordinateSystem() == ShapeProperties::CoordinateSystemType::Centroidal);

			Assert::IsTrue(IsEqual(props.GetXleft(), 612.5));
			Assert::IsTrue(IsEqual(props.GetXright(), 612.5));
			Assert::IsTrue(IsEqual(props.GetYtop(), 2400.0 - props.GetCentroid().Y()));
			Assert::IsTrue(IsEqual(props.GetYbottom(), props.GetCentroid().Y()));

			Assert::IsTrue(IsEqual(beam.GetPerimeter(), 8308.7371100128730));
		}

		TEST_METHOD(FurthestDistance)
		{
			auto beam = GetTestBeam();

			Point2d p1(0, 20);
			Point2d p2(100, 20);
			Line2d line(p1, p2);

			// Shape on right
			Assert::IsTrue(IsEqual(beam.GetFurthestDistance(line, Line2d::Side::Right), 20.000));

			// shape on left
			p1.Move(0, -20);
			p2.Move(100, -20);
			line.ThroughPoints(p1, p2);
			Assert::IsTrue(IsEqual(beam.GetFurthestDistance(line, Line2d::Side::Right), -20.000));
		}

		TEST_METHOD(PolyPoints)
		{
			auto beam = GetTestBeam();
			auto points = beam.GetPolyPoints();
			Assert::IsTrue(points.size() == 175);
			int i = 0;
			Assert::IsTrue(points[i++] == Point2d(0.000000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(-487.500000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(-487.500000, 99.168460));
			Assert::IsTrue(points[i++] == Point2d(-487.403372, 102.275460));
			Assert::IsTrue(points[i++] == Point2d(-487.113862, 105.370451));
			Assert::IsTrue(points[i++] == Point2d(-486.632589, 108.441471));
			Assert::IsTrue(points[i++] == Point2d(-485.961412, 111.476649));
			Assert::IsTrue(points[i++] == Point2d(-485.102927, 114.464255));
			Assert::IsTrue(points[i++] == Point2d(-484.060451, 117.392741));
			Assert::IsTrue(points[i++] == Point2d(-482.838014, 120.250787));
			Assert::IsTrue(points[i++] == Point2d(-481.440339, 123.027349));
			Assert::IsTrue(points[i++] == Point2d(-479.872831, 125.711693));
			Assert::IsTrue(points[i++] == Point2d(-478.141547, 128.293444));
			Assert::IsTrue(points[i++] == Point2d(-476.253178, 130.762624));
			Assert::IsTrue(points[i++] == Point2d(-474.215024, 133.109689));
			Assert::IsTrue(points[i++] == Point2d(-472.034962, 135.325567));
			Assert::IsTrue(points[i++] == Point2d(-469.721419, 137.401694));
			Assert::IsTrue(points[i++] == Point2d(-467.283336, 139.330045));
			Assert::IsTrue(points[i++] == Point2d(-464.730137, 141.103167));
			Assert::IsTrue(points[i++] == Point2d(-462.071691, 142.714206));
			Assert::IsTrue(points[i++] == Point2d(-459.318272, 144.156936));
			Assert::IsTrue(points[i++] == Point2d(-456.480523, 145.425781));
			Assert::IsTrue(points[i++] == Point2d(-453.569412, 146.515836));
			Assert::IsTrue(points[i++] == Point2d(-210.722351, 228.936657));
			Assert::IsTrue(points[i++] == Point2d(-199.077907, 233.296876));
			Assert::IsTrue(points[i++] == Point2d(-187.726912, 238.372254));
			Assert::IsTrue(points[i++] == Point2d(-176.713237, 244.143175));
			Assert::IsTrue(points[i++] == Point2d(-166.079451, 250.587333));
			Assert::IsTrue(points[i++] == Point2d(-155.866656, 257.679820));
			Assert::IsTrue(points[i++] == Point2d(-146.114325, 265.393224));
			Assert::IsTrue(points[i++] == Point2d(-136.860151, 273.697732));
			Assert::IsTrue(points[i++] == Point2d(-128.139904, 282.561244));
			Assert::IsTrue(points[i++] == Point2d(-119.987288, 291.949504));
			Assert::IsTrue(points[i++] == Point2d(-112.433814, 301.826224));
			Assert::IsTrue(points[i++] == Point2d(-105.508676, 312.153229));
			Assert::IsTrue(points[i++] == Point2d(-99.238642, 322.890605));
			Assert::IsTrue(points[i++] == Point2d(-93.647946, 333.996850));
			Assert::IsTrue(points[i++] == Point2d(-88.758196, 345.429038));
			Assert::IsTrue(points[i++] == Point2d(-84.588292, 357.142981));
			Assert::IsTrue(points[i++] == Point2d(-81.154351, 369.093404));
			Assert::IsTrue(points[i++] == Point2d(-78.469645, 381.234117));
			Assert::IsTrue(points[i++] == Point2d(-76.544552, 393.518196));
			Assert::IsTrue(points[i++] == Point2d(-75.386511, 405.898160));
			Assert::IsTrue(points[i++] == Point2d(-75.000000, 418.326160));
			Assert::IsTrue(points[i++] == Point2d(-75.000000, 2106.044491));
			Assert::IsTrue(points[i++] == Point2d(-75.552738, 2120.903489));
			Assert::IsTrue(points[i++] == Point2d(-77.207898, 2135.680355));
			Assert::IsTrue(points[i++] == Point2d(-79.956331, 2150.293413));
			Assert::IsTrue(points[i++] == Point2d(-83.782845, 2164.661891));
			Assert::IsTrue(points[i++] == Point2d(-88.666289, 2178.706367));
			Assert::IsTrue(points[i++] == Point2d(-94.579672, 2192.349213));
			Assert::IsTrue(points[i++] == Point2d(-101.490306, 2205.515020));
			Assert::IsTrue(points[i++] == Point2d(-109.359996, 2218.131015));
			Assert::IsTrue(points[i++] == Point2d(-118.145241, 2230.127465));
			Assert::IsTrue(points[i++] == Point2d(-127.797483, 2241.438061));
			Assert::IsTrue(points[i++] == Point2d(-138.263369, 2252.000284));
			Assert::IsTrue(points[i++] == Point2d(-149.485051, 2261.755754));
			Assert::IsTrue(points[i++] == Point2d(-161.400503, 2270.650548));
			Assert::IsTrue(points[i++] == Point2d(-173.943862, 2278.635501));
			Assert::IsTrue(points[i++] == Point2d(-187.045798, 2285.666478));
			Assert::IsTrue(points[i++] == Point2d(-200.633890, 2291.704615));
			Assert::IsTrue(points[i++] == Point2d(-214.633032, 2296.716537));
			Assert::IsTrue(points[i++] == Point2d(-228.965846, 2300.674541));
			Assert::IsTrue(points[i++] == Point2d(-243.553108, 2303.556751));
			Assert::IsTrue(points[i++] == Point2d(-258.314189, 2305.347234));
			Assert::IsTrue(points[i++] == Point2d(-566.671453, 2331.163191));
			Assert::IsTrue(points[i++] == Point2d(-570.361723, 2331.610812));
			Assert::IsTrue(points[i++] == Point2d(-574.008539, 2332.331365));
			Assert::IsTrue(points[i++] == Point2d(-577.591742, 2333.320866));
			Assert::IsTrue(points[i++] == Point2d(-581.091527, 2334.573846));
			Assert::IsTrue(points[i++] == Point2d(-584.488551, 2336.083381));
			Assert::IsTrue(points[i++] == Point2d(-587.764034, 2337.841125));
			Assert::IsTrue(points[i++] == Point2d(-590.899874, 2339.837363));
			Assert::IsTrue(points[i++] == Point2d(-593.878737, 2342.061061));
			Assert::IsTrue(points[i++] == Point2d(-596.684158, 2344.499929));
			Assert::IsTrue(points[i++] == Point2d(-599.300629, 2347.140485));
			Assert::IsTrue(points[i++] == Point2d(-601.713690, 2349.968134));
			Assert::IsTrue(points[i++] == Point2d(-603.910001, 2352.967246));
			Assert::IsTrue(points[i++] == Point2d(-605.877423, 2356.121245));
			Assert::IsTrue(points[i++] == Point2d(-607.605082, 2359.412697));
			Assert::IsTrue(points[i++] == Point2d(-609.083428, 2362.823408));
			Assert::IsTrue(points[i++] == Point2d(-610.304289, 2366.334527));
			Assert::IsTrue(points[i++] == Point2d(-611.260917, 2369.926647));
			Assert::IsTrue(points[i++] == Point2d(-611.948025, 2373.579911));
			Assert::IsTrue(points[i++] == Point2d(-612.361815, 2377.274128));
			Assert::IsTrue(points[i++] == Point2d(-612.500000, 2380.988877));
			Assert::IsTrue(points[i++] == Point2d(-612.500000, 2400.000000));
			Assert::IsTrue(points[i++] == Point2d(0.000000, 2400.000000));
			Assert::IsTrue(points[i++] == Point2d(612.500000, 2400.000000));
			Assert::IsTrue(points[i++] == Point2d(612.500000, 2380.988877));
			Assert::IsTrue(points[i++] == Point2d(612.361815, 2377.274128));
			Assert::IsTrue(points[i++] == Point2d(611.948025, 2373.579911));
			Assert::IsTrue(points[i++] == Point2d(611.260917, 2369.926647));
			Assert::IsTrue(points[i++] == Point2d(610.304289, 2366.334527));
			Assert::IsTrue(points[i++] == Point2d(609.083428, 2362.823408));
			Assert::IsTrue(points[i++] == Point2d(607.605082, 2359.412697));
			Assert::IsTrue(points[i++] == Point2d(605.877423, 2356.121245));
			Assert::IsTrue(points[i++] == Point2d(603.910001, 2352.967246));
			Assert::IsTrue(points[i++] == Point2d(601.713690, 2349.968134));
			Assert::IsTrue(points[i++] == Point2d(599.300629, 2347.140485));
			Assert::IsTrue(points[i++] == Point2d(596.684158, 2344.499929));
			Assert::IsTrue(points[i++] == Point2d(593.878737, 2342.061061));
			Assert::IsTrue(points[i++] == Point2d(590.899874, 2339.837363));
			Assert::IsTrue(points[i++] == Point2d(587.764034, 2337.841125));
			Assert::IsTrue(points[i++] == Point2d(584.488551, 2336.083381));
			Assert::IsTrue(points[i++] == Point2d(581.091527, 2334.573846));
			Assert::IsTrue(points[i++] == Point2d(577.591742, 2333.320866));
			Assert::IsTrue(points[i++] == Point2d(574.008539, 2332.331365));
			Assert::IsTrue(points[i++] == Point2d(570.361723, 2331.610812));
			Assert::IsTrue(points[i++] == Point2d(566.671453, 2331.163191));
			Assert::IsTrue(points[i++] == Point2d(258.314189, 2305.347234));
			Assert::IsTrue(points[i++] == Point2d(243.553108, 2303.556751));
			Assert::IsTrue(points[i++] == Point2d(228.965846, 2300.674541));
			Assert::IsTrue(points[i++] == Point2d(214.633032, 2296.716537));
			Assert::IsTrue(points[i++] == Point2d(200.633890, 2291.704615));
			Assert::IsTrue(points[i++] == Point2d(187.045798, 2285.666478));
			Assert::IsTrue(points[i++] == Point2d(173.943862, 2278.635501));
			Assert::IsTrue(points[i++] == Point2d(161.400503, 2270.650548));
			Assert::IsTrue(points[i++] == Point2d(149.485051, 2261.755754));
			Assert::IsTrue(points[i++] == Point2d(138.263369, 2252.000284));
			Assert::IsTrue(points[i++] == Point2d(127.797483, 2241.438061));
			Assert::IsTrue(points[i++] == Point2d(118.145241, 2230.127465));
			Assert::IsTrue(points[i++] == Point2d(109.359996, 2218.131015));
			Assert::IsTrue(points[i++] == Point2d(101.490306, 2205.515020));
			Assert::IsTrue(points[i++] == Point2d(94.579672, 2192.349213));
			Assert::IsTrue(points[i++] == Point2d(88.666289, 2178.706367));
			Assert::IsTrue(points[i++] == Point2d(83.782845, 2164.661891));
			Assert::IsTrue(points[i++] == Point2d(79.956331, 2150.293413));
			Assert::IsTrue(points[i++] == Point2d(77.207898, 2135.680355));
			Assert::IsTrue(points[i++] == Point2d(75.552738, 2120.903489));
			Assert::IsTrue(points[i++] == Point2d(75.000000, 2106.044491));
			Assert::IsTrue(points[i++] == Point2d(75.000000, 418.326160));
			Assert::IsTrue(points[i++] == Point2d(75.386511, 405.898160));
			Assert::IsTrue(points[i++] == Point2d(76.544552, 393.518196));
			Assert::IsTrue(points[i++] == Point2d(78.469645, 381.234117));
			Assert::IsTrue(points[i++] == Point2d(81.154351, 369.093404));
			Assert::IsTrue(points[i++] == Point2d(84.588292, 357.142981));
			Assert::IsTrue(points[i++] == Point2d(88.758196, 345.429038));
			Assert::IsTrue(points[i++] == Point2d(93.647946, 333.996850));
			Assert::IsTrue(points[i++] == Point2d(99.238642, 322.890605));
			Assert::IsTrue(points[i++] == Point2d(105.508676, 312.153229));
			Assert::IsTrue(points[i++] == Point2d(112.433814, 301.826224));
			Assert::IsTrue(points[i++] == Point2d(119.987288, 291.949504));
			Assert::IsTrue(points[i++] == Point2d(128.139904, 282.561244));
			Assert::IsTrue(points[i++] == Point2d(136.860151, 273.697732));
			Assert::IsTrue(points[i++] == Point2d(146.114325, 265.393224));
			Assert::IsTrue(points[i++] == Point2d(155.866656, 257.679820));
			Assert::IsTrue(points[i++] == Point2d(166.079451, 250.587333));
			Assert::IsTrue(points[i++] == Point2d(176.713237, 244.143175));
			Assert::IsTrue(points[i++] == Point2d(187.726912, 238.372254));
			Assert::IsTrue(points[i++] == Point2d(199.077907, 233.296876));
			Assert::IsTrue(points[i++] == Point2d(210.722351, 228.936657));
			Assert::IsTrue(points[i++] == Point2d(453.569412, 146.515836));
			Assert::IsTrue(points[i++] == Point2d(456.480523, 145.425781));
			Assert::IsTrue(points[i++] == Point2d(459.318272, 144.156936));
			Assert::IsTrue(points[i++] == Point2d(462.071691, 142.714206));
			Assert::IsTrue(points[i++] == Point2d(464.730137, 141.103167));
			Assert::IsTrue(points[i++] == Point2d(467.283336, 139.330045));
			Assert::IsTrue(points[i++] == Point2d(469.721419, 137.401694));
			Assert::IsTrue(points[i++] == Point2d(472.034962, 135.325567));
			Assert::IsTrue(points[i++] == Point2d(474.215024, 133.109689));
			Assert::IsTrue(points[i++] == Point2d(476.253178, 130.762624));
			Assert::IsTrue(points[i++] == Point2d(478.141547, 128.293444));
			Assert::IsTrue(points[i++] == Point2d(479.872831, 125.711693));
			Assert::IsTrue(points[i++] == Point2d(481.440339, 123.027349));
			Assert::IsTrue(points[i++] == Point2d(482.838014, 120.250787));
			Assert::IsTrue(points[i++] == Point2d(484.060451, 117.392741));
			Assert::IsTrue(points[i++] == Point2d(485.102927, 114.464255));
			Assert::IsTrue(points[i++] == Point2d(485.961412, 111.476649));
			Assert::IsTrue(points[i++] == Point2d(486.632589, 108.441471));
			Assert::IsTrue(points[i++] == Point2d(487.113862, 105.370451));
			Assert::IsTrue(points[i++] == Point2d(487.403372, 102.275460));
			Assert::IsTrue(points[i++] == Point2d(487.500000, 99.168460));
			Assert::IsTrue(points[i++] == Point2d(487.500000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(0.000000, 0.000000));
			Assert::IsTrue(i == points.size());
		}

		TEST_METHOD(Clone)
		{
			auto beam = GetTestBeam();
			auto beamClone(beam);
			Assert::AreEqual(beamClone.GetW1(),1225.);
			Assert::AreEqual(beamClone.GetW2(),975.);
			Assert::AreEqual(beamClone.GetD1(),65.);
			Assert::AreEqual(beamClone.GetD2(),45.);
			Assert::AreEqual(beamClone.GetD3(),2015.);
			Assert::AreEqual(beamClone.GetD4(),140.);
			Assert::AreEqual(beamClone.GetD5(),135.);
			Assert::AreEqual(beamClone.GetT(), 150.);
			Assert::AreEqual(beamClone.GetR1(),200.);
			Assert::AreEqual(beamClone.GetR2(),200.);
			Assert::AreEqual(beamClone.GetR3(),50.);
			Assert::AreEqual(beamClone.GetR4(),50.);
		}

		TEST_METHOD(PointInShape)
		{
			auto beam = GetTestBeam();
			Point2d pnt(0, 0.5);
			Assert::IsTrue(beam.PointInShape(pnt));

			pnt.Move(500, 500);
			Assert::IsFalse(beam.PointInShape(pnt));

			pnt.Move(0, 0); // Point on perimeter
			Assert::IsFalse(beam.PointInShape(pnt));
		}

		TEST_METHOD(ClipWithLine)
		{
			auto beam = GetTestBeam();

			// setup clipping line
			Point2d p1(-5000, 1500);
			Point2d p2(5000, 1500);
			Line2d clipLine(p1, p2);

			auto clip = beam.CreateClippedShape(clipLine, Line2d::Side::Left);
			Assert::IsTrue(clip != nullptr);

			auto points = clip->GetPolyPoints();
			Assert::IsTrue(points.size() == 90);
			int i = 0;
			Assert::IsTrue(points[i++] == Point2d(0.000000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(-487.500000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(-487.500000, 99.168460));
			Assert::IsTrue(points[i++] == Point2d(-487.403372, 102.275460));
			Assert::IsTrue(points[i++] == Point2d(-487.113862, 105.370451));
			Assert::IsTrue(points[i++] == Point2d(-486.632589, 108.441471));
			Assert::IsTrue(points[i++] == Point2d(-485.961412, 111.476649));
			Assert::IsTrue(points[i++] == Point2d(-485.102927, 114.464255));
			Assert::IsTrue(points[i++] == Point2d(-484.060451, 117.392741));
			Assert::IsTrue(points[i++] == Point2d(-482.838014, 120.250787));
			Assert::IsTrue(points[i++] == Point2d(-481.440339, 123.027349));
			Assert::IsTrue(points[i++] == Point2d(-479.872831, 125.711693));
			Assert::IsTrue(points[i++] == Point2d(-478.141547, 128.293444));
			Assert::IsTrue(points[i++] == Point2d(-476.253178, 130.762624));
			Assert::IsTrue(points[i++] == Point2d(-474.215024, 133.109689));
			Assert::IsTrue(points[i++] == Point2d(-472.034962, 135.325567));
			Assert::IsTrue(points[i++] == Point2d(-469.721419, 137.401694));
			Assert::IsTrue(points[i++] == Point2d(-467.283336, 139.330045));
			Assert::IsTrue(points[i++] == Point2d(-464.730137, 141.103167));
			Assert::IsTrue(points[i++] == Point2d(-462.071691, 142.714206));
			Assert::IsTrue(points[i++] == Point2d(-459.318272, 144.156936));
			Assert::IsTrue(points[i++] == Point2d(-456.480523, 145.425781));
			Assert::IsTrue(points[i++] == Point2d(-453.569412, 146.515836));
			Assert::IsTrue(points[i++] == Point2d(-210.722351, 228.936657));
			Assert::IsTrue(points[i++] == Point2d(-199.077907, 233.296876));
			Assert::IsTrue(points[i++] == Point2d(-187.726912, 238.372254));
			Assert::IsTrue(points[i++] == Point2d(-176.713237, 244.143175));
			Assert::IsTrue(points[i++] == Point2d(-166.079451, 250.587333));
			Assert::IsTrue(points[i++] == Point2d(-155.866656, 257.679820));
			Assert::IsTrue(points[i++] == Point2d(-146.114325, 265.393224));
			Assert::IsTrue(points[i++] == Point2d(-136.860151, 273.697732));
			Assert::IsTrue(points[i++] == Point2d(-128.139904, 282.561244));
			Assert::IsTrue(points[i++] == Point2d(-119.987288, 291.949504));
			Assert::IsTrue(points[i++] == Point2d(-112.433814, 301.826224));
			Assert::IsTrue(points[i++] == Point2d(-105.508676, 312.153229));
			Assert::IsTrue(points[i++] == Point2d(-99.238642, 322.890605));
			Assert::IsTrue(points[i++] == Point2d(-93.647946, 333.996850));
			Assert::IsTrue(points[i++] == Point2d(-88.758196, 345.429038));
			Assert::IsTrue(points[i++] == Point2d(-84.588292, 357.142981));
			Assert::IsTrue(points[i++] == Point2d(-81.154351, 369.093404));
			Assert::IsTrue(points[i++] == Point2d(-78.469645, 381.234117));
			Assert::IsTrue(points[i++] == Point2d(-76.544552, 393.518196));
			Assert::IsTrue(points[i++] == Point2d(-75.386511, 405.898160));
			Assert::IsTrue(points[i++] == Point2d(-75.000000, 418.326160));
			Assert::IsTrue(points[i++] == Point2d(-75.000000, 1500.000000));
			Assert::IsTrue(points[i++] == Point2d(75.000000, 1500.000000));
			Assert::IsTrue(points[i++] == Point2d(75.000000, 418.326160));
			Assert::IsTrue(points[i++] == Point2d(75.386511, 405.898160));
			Assert::IsTrue(points[i++] == Point2d(76.544552, 393.518196));
			Assert::IsTrue(points[i++] == Point2d(78.469645, 381.234117));
			Assert::IsTrue(points[i++] == Point2d(81.154351, 369.093404));
			Assert::IsTrue(points[i++] == Point2d(84.588292, 357.142981));
			Assert::IsTrue(points[i++] == Point2d(88.758196, 345.429038));
			Assert::IsTrue(points[i++] == Point2d(93.647946, 333.996850));
			Assert::IsTrue(points[i++] == Point2d(99.238642, 322.890605));
			Assert::IsTrue(points[i++] == Point2d(105.508676, 312.153229));
			Assert::IsTrue(points[i++] == Point2d(112.433814, 301.826224));
			Assert::IsTrue(points[i++] == Point2d(119.987288, 291.949504));
			Assert::IsTrue(points[i++] == Point2d(128.139904, 282.561244));
			Assert::IsTrue(points[i++] == Point2d(136.860151, 273.697732));
			Assert::IsTrue(points[i++] == Point2d(146.114325, 265.393224));
			Assert::IsTrue(points[i++] == Point2d(155.866656, 257.679820));
			Assert::IsTrue(points[i++] == Point2d(166.079451, 250.587333));
			Assert::IsTrue(points[i++] == Point2d(176.713237, 244.143175));
			Assert::IsTrue(points[i++] == Point2d(187.726912, 238.372254));
			Assert::IsTrue(points[i++] == Point2d(199.077907, 233.296876));
			Assert::IsTrue(points[i++] == Point2d(210.722351, 228.936657));
			Assert::IsTrue(points[i++] == Point2d(453.569412, 146.515836));
			Assert::IsTrue(points[i++] == Point2d(456.480523, 145.425781));
			Assert::IsTrue(points[i++] == Point2d(459.318272, 144.156936));
			Assert::IsTrue(points[i++] == Point2d(462.071691, 142.714206));
			Assert::IsTrue(points[i++] == Point2d(464.730137, 141.103167));
			Assert::IsTrue(points[i++] == Point2d(467.283336, 139.330045));
			Assert::IsTrue(points[i++] == Point2d(469.721419, 137.401694));
			Assert::IsTrue(points[i++] == Point2d(472.034962, 135.325567));
			Assert::IsTrue(points[i++] == Point2d(474.215024, 133.109689));
			Assert::IsTrue(points[i++] == Point2d(476.253178, 130.762624));
			Assert::IsTrue(points[i++] == Point2d(478.141547, 128.293444));
			Assert::IsTrue(points[i++] == Point2d(479.872831, 125.711693));
			Assert::IsTrue(points[i++] == Point2d(481.440339, 123.027349));
			Assert::IsTrue(points[i++] == Point2d(482.838014, 120.250787));
			Assert::IsTrue(points[i++] == Point2d(484.060451, 117.392741));
			Assert::IsTrue(points[i++] == Point2d(485.102927, 114.464255));
			Assert::IsTrue(points[i++] == Point2d(485.961412, 111.476649));
			Assert::IsTrue(points[i++] == Point2d(486.632589, 108.441471));
			Assert::IsTrue(points[i++] == Point2d(487.113862, 105.370451));
			Assert::IsTrue(points[i++] == Point2d(487.403372, 102.275460));
			Assert::IsTrue(points[i++] == Point2d(487.500000, 99.168460));
			Assert::IsTrue(points[i++] == Point2d(487.500000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(0.000000, 0.000000));
			Assert::IsTrue(i == points.size());

			// clip in other direction
			clipLine.ThroughPoints(p2, p1);

			clip = beam.CreateClippedShape(clipLine, Line2d::Side::Left);
			Assert::IsTrue(clip != nullptr);

			points = clip->GetPolyPoints();
			Assert::IsTrue(points.size() == 89);
			i = 0;
			Assert::IsTrue(points[i++] == Point2d(-75.000000, 1500.000000));
			Assert::IsTrue(points[i++] == Point2d(-75.000000, 2106.044491));
			Assert::IsTrue(points[i++] == Point2d(-75.552738, 2120.903489));
			Assert::IsTrue(points[i++] == Point2d(-77.207898, 2135.680355));
			Assert::IsTrue(points[i++] == Point2d(-79.956331, 2150.293413));
			Assert::IsTrue(points[i++] == Point2d(-83.782845, 2164.661891));
			Assert::IsTrue(points[i++] == Point2d(-88.666289, 2178.706367));
			Assert::IsTrue(points[i++] == Point2d(-94.579672, 2192.349213));
			Assert::IsTrue(points[i++] == Point2d(-101.490306, 2205.515020));
			Assert::IsTrue(points[i++] == Point2d(-109.359996, 2218.131015));
			Assert::IsTrue(points[i++] == Point2d(-118.145241, 2230.127465));
			Assert::IsTrue(points[i++] == Point2d(-127.797483, 2241.438061));
			Assert::IsTrue(points[i++] == Point2d(-138.263369, 2252.000284));
			Assert::IsTrue(points[i++] == Point2d(-149.485051, 2261.755754));
			Assert::IsTrue(points[i++] == Point2d(-161.400503, 2270.650548));
			Assert::IsTrue(points[i++] == Point2d(-173.943862, 2278.635501));
			Assert::IsTrue(points[i++] == Point2d(-187.045798, 2285.666478));
			Assert::IsTrue(points[i++] == Point2d(-200.633890, 2291.704615));
			Assert::IsTrue(points[i++] == Point2d(-214.633032, 2296.716537));
			Assert::IsTrue(points[i++] == Point2d(-228.965846, 2300.674541));
			Assert::IsTrue(points[i++] == Point2d(-243.553108, 2303.556751));
			Assert::IsTrue(points[i++] == Point2d(-258.314189, 2305.347234));
			Assert::IsTrue(points[i++] == Point2d(-566.671453, 2331.163191));
			Assert::IsTrue(points[i++] == Point2d(-570.361723, 2331.610812));
			Assert::IsTrue(points[i++] == Point2d(-574.008539, 2332.331365));
			Assert::IsTrue(points[i++] == Point2d(-577.591742, 2333.320866));
			Assert::IsTrue(points[i++] == Point2d(-581.091527, 2334.573846));
			Assert::IsTrue(points[i++] == Point2d(-584.488551, 2336.083381));
			Assert::IsTrue(points[i++] == Point2d(-587.764034, 2337.841125));
			Assert::IsTrue(points[i++] == Point2d(-590.899874, 2339.837363));
			Assert::IsTrue(points[i++] == Point2d(-593.878737, 2342.061061));
			Assert::IsTrue(points[i++] == Point2d(-596.684158, 2344.499929));
			Assert::IsTrue(points[i++] == Point2d(-599.300629, 2347.140485));
			Assert::IsTrue(points[i++] == Point2d(-601.713690, 2349.968134));
			Assert::IsTrue(points[i++] == Point2d(-603.910001, 2352.967246));
			Assert::IsTrue(points[i++] == Point2d(-605.877423, 2356.121245));
			Assert::IsTrue(points[i++] == Point2d(-607.605082, 2359.412697));
			Assert::IsTrue(points[i++] == Point2d(-609.083428, 2362.823408));
			Assert::IsTrue(points[i++] == Point2d(-610.304289, 2366.334527));
			Assert::IsTrue(points[i++] == Point2d(-611.260917, 2369.926647));
			Assert::IsTrue(points[i++] == Point2d(-611.948025, 2373.579911));
			Assert::IsTrue(points[i++] == Point2d(-612.361815, 2377.274128));
			Assert::IsTrue(points[i++] == Point2d(-612.500000, 2380.988877));
			Assert::IsTrue(points[i++] == Point2d(-612.500000, 2400.000000));
			Assert::IsTrue(points[i++] == Point2d(0.000000, 2400.000000));
			Assert::IsTrue(points[i++] == Point2d(612.500000, 2400.000000));
			Assert::IsTrue(points[i++] == Point2d(612.500000, 2380.988877));
			Assert::IsTrue(points[i++] == Point2d(612.361815, 2377.274128));
			Assert::IsTrue(points[i++] == Point2d(611.948025, 2373.579911));
			Assert::IsTrue(points[i++] == Point2d(611.260917, 2369.926647));
			Assert::IsTrue(points[i++] == Point2d(610.304289, 2366.334527));
			Assert::IsTrue(points[i++] == Point2d(609.083428, 2362.823408));
			Assert::IsTrue(points[i++] == Point2d(607.605082, 2359.412697));
			Assert::IsTrue(points[i++] == Point2d(605.877423, 2356.121245));
			Assert::IsTrue(points[i++] == Point2d(603.910001, 2352.967246));
			Assert::IsTrue(points[i++] == Point2d(601.713690, 2349.968134));
			Assert::IsTrue(points[i++] == Point2d(599.300629, 2347.140485));
			Assert::IsTrue(points[i++] == Point2d(596.684158, 2344.499929));
			Assert::IsTrue(points[i++] == Point2d(593.878737, 2342.061061));
			Assert::IsTrue(points[i++] == Point2d(590.899874, 2339.837363));
			Assert::IsTrue(points[i++] == Point2d(587.764034, 2337.841125));
			Assert::IsTrue(points[i++] == Point2d(584.488551, 2336.083381));
			Assert::IsTrue(points[i++] == Point2d(581.091527, 2334.573846));
			Assert::IsTrue(points[i++] == Point2d(577.591742, 2333.320866));
			Assert::IsTrue(points[i++] == Point2d(574.008539, 2332.331365));
			Assert::IsTrue(points[i++] == Point2d(570.361723, 2331.610812));
			Assert::IsTrue(points[i++] == Point2d(566.671453, 2331.163191));
			Assert::IsTrue(points[i++] == Point2d(258.314189, 2305.347234));
			Assert::IsTrue(points[i++] == Point2d(243.553108, 2303.556751));
			Assert::IsTrue(points[i++] == Point2d(228.965846, 2300.674541));
			Assert::IsTrue(points[i++] == Point2d(214.633032, 2296.716537));
			Assert::IsTrue(points[i++] == Point2d(200.633890, 2291.704615));
			Assert::IsTrue(points[i++] == Point2d(187.045798, 2285.666478));
			Assert::IsTrue(points[i++] == Point2d(173.943862, 2278.635501));
			Assert::IsTrue(points[i++] == Point2d(161.400503, 2270.650548));
			Assert::IsTrue(points[i++] == Point2d(149.485051, 2261.755754));
			Assert::IsTrue(points[i++] == Point2d(138.263369, 2252.000284));
			Assert::IsTrue(points[i++] == Point2d(127.797483, 2241.438061));
			Assert::IsTrue(points[i++] == Point2d(118.145241, 2230.127465));
			Assert::IsTrue(points[i++] == Point2d(109.359996, 2218.131015));
			Assert::IsTrue(points[i++] == Point2d(101.490306, 2205.515020));
			Assert::IsTrue(points[i++] == Point2d(94.579672, 2192.349213));
			Assert::IsTrue(points[i++] == Point2d(88.666289, 2178.706367));
			Assert::IsTrue(points[i++] == Point2d(83.782845, 2164.661891));
			Assert::IsTrue(points[i++] == Point2d(79.956331, 2150.293413));
			Assert::IsTrue(points[i++] == Point2d(77.207898, 2135.680355));
			Assert::IsTrue(points[i++] == Point2d(75.552738, 2120.903489));
			Assert::IsTrue(points[i++] == Point2d(75.000000, 2106.044491));
			Assert::IsTrue(points[i++] == Point2d(75.000000, 1500.000000));
			Assert::IsTrue(i == points.size());
		}

		TEST_METHOD(ClipIn)
		{
			auto beam = GetTestBeam();
			Rect2d clipRect(-5000, 1500, 5000, 10000);
			auto clip = beam.CreateClippedShape(clipRect, Shape::ClipRegion::In);
			Assert::IsNotNull(clip.get());

			auto points = clip->GetPolyPoints();
			Assert::IsTrue(points.size() == 89);
			int i = 0;
			Assert::IsTrue(points[i++] == Point2d(-75.000000, 1500.000000));
			Assert::IsTrue(points[i++] == Point2d(-75.000000, 2106.044491));
			Assert::IsTrue(points[i++] == Point2d(-75.552738, 2120.903489));
			Assert::IsTrue(points[i++] == Point2d(-77.207898, 2135.680355));
			Assert::IsTrue(points[i++] == Point2d(-79.956331, 2150.293413));
			Assert::IsTrue(points[i++] == Point2d(-83.782845, 2164.661891));
			Assert::IsTrue(points[i++] == Point2d(-88.666289, 2178.706367));
			Assert::IsTrue(points[i++] == Point2d(-94.579672, 2192.349213));
			Assert::IsTrue(points[i++] == Point2d(-101.490306, 2205.515020));
			Assert::IsTrue(points[i++] == Point2d(-109.359996, 2218.131015));
			Assert::IsTrue(points[i++] == Point2d(-118.145241, 2230.127465));
			Assert::IsTrue(points[i++] == Point2d(-127.797483, 2241.438061));
			Assert::IsTrue(points[i++] == Point2d(-138.263369, 2252.000284));
			Assert::IsTrue(points[i++] == Point2d(-149.485051, 2261.755754));
			Assert::IsTrue(points[i++] == Point2d(-161.400503, 2270.650548));
			Assert::IsTrue(points[i++] == Point2d(-173.943862, 2278.635501));
			Assert::IsTrue(points[i++] == Point2d(-187.045798, 2285.666478));
			Assert::IsTrue(points[i++] == Point2d(-200.633890, 2291.704615));
			Assert::IsTrue(points[i++] == Point2d(-214.633032, 2296.716537));
			Assert::IsTrue(points[i++] == Point2d(-228.965846, 2300.674541));
			Assert::IsTrue(points[i++] == Point2d(-243.553108, 2303.556751));
			Assert::IsTrue(points[i++] == Point2d(-258.314189, 2305.347234));
			Assert::IsTrue(points[i++] == Point2d(-566.671453, 2331.163191));
			Assert::IsTrue(points[i++] == Point2d(-570.361723, 2331.610812));
			Assert::IsTrue(points[i++] == Point2d(-574.008539, 2332.331365));
			Assert::IsTrue(points[i++] == Point2d(-577.591742, 2333.320866));
			Assert::IsTrue(points[i++] == Point2d(-581.091527, 2334.573846));
			Assert::IsTrue(points[i++] == Point2d(-584.488551, 2336.083381));
			Assert::IsTrue(points[i++] == Point2d(-587.764034, 2337.841125));
			Assert::IsTrue(points[i++] == Point2d(-590.899874, 2339.837363));
			Assert::IsTrue(points[i++] == Point2d(-593.878737, 2342.061061));
			Assert::IsTrue(points[i++] == Point2d(-596.684158, 2344.499929));
			Assert::IsTrue(points[i++] == Point2d(-599.300629, 2347.140485));
			Assert::IsTrue(points[i++] == Point2d(-601.713690, 2349.968134));
			Assert::IsTrue(points[i++] == Point2d(-603.910001, 2352.967246));
			Assert::IsTrue(points[i++] == Point2d(-605.877423, 2356.121245));
			Assert::IsTrue(points[i++] == Point2d(-607.605082, 2359.412697));
			Assert::IsTrue(points[i++] == Point2d(-609.083428, 2362.823408));
			Assert::IsTrue(points[i++] == Point2d(-610.304289, 2366.334527));
			Assert::IsTrue(points[i++] == Point2d(-611.260917, 2369.926647));
			Assert::IsTrue(points[i++] == Point2d(-611.948025, 2373.579911));
			Assert::IsTrue(points[i++] == Point2d(-612.361815, 2377.274128));
			Assert::IsTrue(points[i++] == Point2d(-612.500000, 2380.988877));
			Assert::IsTrue(points[i++] == Point2d(-612.500000, 2400.000000));
			Assert::IsTrue(points[i++] == Point2d(0.000000, 2400.000000));
			Assert::IsTrue(points[i++] == Point2d(612.500000, 2400.000000));
			Assert::IsTrue(points[i++] == Point2d(612.500000, 2380.988877));
			Assert::IsTrue(points[i++] == Point2d(612.361815, 2377.274128));
			Assert::IsTrue(points[i++] == Point2d(611.948025, 2373.579911));
			Assert::IsTrue(points[i++] == Point2d(611.260917, 2369.926647));
			Assert::IsTrue(points[i++] == Point2d(610.304289, 2366.334527));
			Assert::IsTrue(points[i++] == Point2d(609.083428, 2362.823408));
			Assert::IsTrue(points[i++] == Point2d(607.605082, 2359.412697));
			Assert::IsTrue(points[i++] == Point2d(605.877423, 2356.121245));
			Assert::IsTrue(points[i++] == Point2d(603.910001, 2352.967246));
			Assert::IsTrue(points[i++] == Point2d(601.713690, 2349.968134));
			Assert::IsTrue(points[i++] == Point2d(599.300629, 2347.140485));
			Assert::IsTrue(points[i++] == Point2d(596.684158, 2344.499929));
			Assert::IsTrue(points[i++] == Point2d(593.878737, 2342.061061));
			Assert::IsTrue(points[i++] == Point2d(590.899874, 2339.837363));
			Assert::IsTrue(points[i++] == Point2d(587.764034, 2337.841125));
			Assert::IsTrue(points[i++] == Point2d(584.488551, 2336.083381));
			Assert::IsTrue(points[i++] == Point2d(581.091527, 2334.573846));
			Assert::IsTrue(points[i++] == Point2d(577.591742, 2333.320866));
			Assert::IsTrue(points[i++] == Point2d(574.008539, 2332.331365));
			Assert::IsTrue(points[i++] == Point2d(570.361723, 2331.610812));
			Assert::IsTrue(points[i++] == Point2d(566.671453, 2331.163191));
			Assert::IsTrue(points[i++] == Point2d(258.314189, 2305.347234));
			Assert::IsTrue(points[i++] == Point2d(243.553108, 2303.556751));
			Assert::IsTrue(points[i++] == Point2d(228.965846, 2300.674541));
			Assert::IsTrue(points[i++] == Point2d(214.633032, 2296.716537));
			Assert::IsTrue(points[i++] == Point2d(200.633890, 2291.704615));
			Assert::IsTrue(points[i++] == Point2d(187.045798, 2285.666478));
			Assert::IsTrue(points[i++] == Point2d(173.943862, 2278.635501));
			Assert::IsTrue(points[i++] == Point2d(161.400503, 2270.650548));
			Assert::IsTrue(points[i++] == Point2d(149.485051, 2261.755754));
			Assert::IsTrue(points[i++] == Point2d(138.263369, 2252.000284));
			Assert::IsTrue(points[i++] == Point2d(127.797483, 2241.438061));
			Assert::IsTrue(points[i++] == Point2d(118.145241, 2230.127465));
			Assert::IsTrue(points[i++] == Point2d(109.359996, 2218.131015));
			Assert::IsTrue(points[i++] == Point2d(101.490306, 2205.515020));
			Assert::IsTrue(points[i++] == Point2d(94.579672, 2192.349213));
			Assert::IsTrue(points[i++] == Point2d(88.666289, 2178.706367));
			Assert::IsTrue(points[i++] == Point2d(83.782845, 2164.661891));
			Assert::IsTrue(points[i++] == Point2d(79.956331, 2150.293413));
			Assert::IsTrue(points[i++] == Point2d(77.207898, 2135.680355));
			Assert::IsTrue(points[i++] == Point2d(75.552738, 2120.903489));
			Assert::IsTrue(points[i++] == Point2d(75.000000, 2106.044491));
			Assert::IsTrue(points[i++] == Point2d(75.000000, 1500.000000));
			Assert::IsTrue(i == points.size());
		}

		TEST_METHOD(HookPoint)
		{
			// Test hook point behavior
			auto beam = GetTestBeam();
			Assert::IsTrue(TestHookPoint(beam));
		}

		TEST_METHOD(Move)
		{
			auto beam = GetTestBeam();
			auto props = beam.GetProperties();

			// Get moment of inertia about CG before move
			// These properties should be invariant
			Float64 area = props.GetArea();
			Float64 Ixx = props.GetIxx();
			Float64 Iyy = props.GetIyy();
			Float64 Ixy = props.GetIxy();

			Point2d from(0, 0);
			Point2d to(100, 100);

			beam.Move(from, to);
			auto points = beam.GetPolyPoints();
			Assert::IsTrue(points.size() == 175);

			int i = 0;
			Assert::IsTrue(points[i++] == Point2d(100.000000, 100.000000));
			Assert::IsTrue(points[i++] == Point2d(-387.500000, 100.000000));
			Assert::IsTrue(points[i++] == Point2d(-387.500000, 199.168460));
			Assert::IsTrue(points[i++] == Point2d(-387.403372, 202.275460));
			Assert::IsTrue(points[i++] == Point2d(-387.113862, 205.370451));
			Assert::IsTrue(points[i++] == Point2d(-386.632589, 208.441471));
			Assert::IsTrue(points[i++] == Point2d(-385.961412, 211.476649));
			Assert::IsTrue(points[i++] == Point2d(-385.102927, 214.464255));
			Assert::IsTrue(points[i++] == Point2d(-384.060451, 217.392741));
			Assert::IsTrue(points[i++] == Point2d(-382.838014, 220.250787));
			Assert::IsTrue(points[i++] == Point2d(-381.440339, 223.027349));
			Assert::IsTrue(points[i++] == Point2d(-379.872831, 225.711693));
			Assert::IsTrue(points[i++] == Point2d(-378.141547, 228.293444));
			Assert::IsTrue(points[i++] == Point2d(-376.253178, 230.762624));
			Assert::IsTrue(points[i++] == Point2d(-374.215024, 233.109689));
			Assert::IsTrue(points[i++] == Point2d(-372.034962, 235.325567));
			Assert::IsTrue(points[i++] == Point2d(-369.721419, 237.401694));
			Assert::IsTrue(points[i++] == Point2d(-367.283336, 239.330045));
			Assert::IsTrue(points[i++] == Point2d(-364.730137, 241.103167));
			Assert::IsTrue(points[i++] == Point2d(-362.071691, 242.714206));
			Assert::IsTrue(points[i++] == Point2d(-359.318272, 244.156936));
			Assert::IsTrue(points[i++] == Point2d(-356.480523, 245.425781));
			Assert::IsTrue(points[i++] == Point2d(-353.569412, 246.515836));
			Assert::IsTrue(points[i++] == Point2d(-110.722351, 328.936657));
			Assert::IsTrue(points[i++] == Point2d(-99.077907, 333.296876));
			Assert::IsTrue(points[i++] == Point2d(-87.726912, 338.372254));
			Assert::IsTrue(points[i++] == Point2d(-76.713237, 344.143175));
			Assert::IsTrue(points[i++] == Point2d(-66.079451, 350.587333));
			Assert::IsTrue(points[i++] == Point2d(-55.866656, 357.679820));
			Assert::IsTrue(points[i++] == Point2d(-46.114325, 365.393224));
			Assert::IsTrue(points[i++] == Point2d(-36.860151, 373.697732));
			Assert::IsTrue(points[i++] == Point2d(-28.139904, 382.561244));
			Assert::IsTrue(points[i++] == Point2d(-19.987288, 391.949504));
			Assert::IsTrue(points[i++] == Point2d(-12.433814, 401.826224));
			Assert::IsTrue(points[i++] == Point2d(-5.508676, 412.153229));
			Assert::IsTrue(points[i++] == Point2d(0.761358, 422.890605));
			Assert::IsTrue(points[i++] == Point2d(6.352054, 433.996850));
			Assert::IsTrue(points[i++] == Point2d(11.241804, 445.429038));
			Assert::IsTrue(points[i++] == Point2d(15.411708, 457.142981));
			Assert::IsTrue(points[i++] == Point2d(18.845649, 469.093404));
			Assert::IsTrue(points[i++] == Point2d(21.530355, 481.234117));
			Assert::IsTrue(points[i++] == Point2d(23.455448, 493.518196));
			Assert::IsTrue(points[i++] == Point2d(24.613489, 505.898160));
			Assert::IsTrue(points[i++] == Point2d(25.000000, 518.326160));
			Assert::IsTrue(points[i++] == Point2d(25.000000, 2206.044491));
			Assert::IsTrue(points[i++] == Point2d(24.447262, 2220.903489));
			Assert::IsTrue(points[i++] == Point2d(22.792102, 2235.680355));
			Assert::IsTrue(points[i++] == Point2d(20.043669, 2250.293413));
			Assert::IsTrue(points[i++] == Point2d(16.217155, 2264.661891));
			Assert::IsTrue(points[i++] == Point2d(11.333711, 2278.706367));
			Assert::IsTrue(points[i++] == Point2d(5.420328, 2292.349213));
			Assert::IsTrue(points[i++] == Point2d(-1.490306, 2305.515020));
			Assert::IsTrue(points[i++] == Point2d(-9.359996, 2318.131015));
			Assert::IsTrue(points[i++] == Point2d(-18.145241, 2330.127465));
			Assert::IsTrue(points[i++] == Point2d(-27.797483, 2341.438061));
			Assert::IsTrue(points[i++] == Point2d(-38.263369, 2352.000284));
			Assert::IsTrue(points[i++] == Point2d(-49.485051, 2361.755754));
			Assert::IsTrue(points[i++] == Point2d(-61.400503, 2370.650548));
			Assert::IsTrue(points[i++] == Point2d(-73.943862, 2378.635501));
			Assert::IsTrue(points[i++] == Point2d(-87.045798, 2385.666478));
			Assert::IsTrue(points[i++] == Point2d(-100.633890, 2391.704615));
			Assert::IsTrue(points[i++] == Point2d(-114.633032, 2396.716537));
			Assert::IsTrue(points[i++] == Point2d(-128.965846, 2400.674541));
			Assert::IsTrue(points[i++] == Point2d(-143.553108, 2403.556751));
			Assert::IsTrue(points[i++] == Point2d(-158.314189, 2405.347234));
			Assert::IsTrue(points[i++] == Point2d(-466.671453, 2431.163191));
			Assert::IsTrue(points[i++] == Point2d(-470.361723, 2431.610812));
			Assert::IsTrue(points[i++] == Point2d(-474.008539, 2432.331365));
			Assert::IsTrue(points[i++] == Point2d(-477.591742, 2433.320866));
			Assert::IsTrue(points[i++] == Point2d(-481.091527, 2434.573846));
			Assert::IsTrue(points[i++] == Point2d(-484.488551, 2436.083381));
			Assert::IsTrue(points[i++] == Point2d(-487.764034, 2437.841125));
			Assert::IsTrue(points[i++] == Point2d(-490.899874, 2439.837363));
			Assert::IsTrue(points[i++] == Point2d(-493.878737, 2442.061061));
			Assert::IsTrue(points[i++] == Point2d(-496.684158, 2444.499929));
			Assert::IsTrue(points[i++] == Point2d(-499.300629, 2447.140485));
			Assert::IsTrue(points[i++] == Point2d(-501.713690, 2449.968134));
			Assert::IsTrue(points[i++] == Point2d(-503.910001, 2452.967246));
			Assert::IsTrue(points[i++] == Point2d(-505.877423, 2456.121245));
			Assert::IsTrue(points[i++] == Point2d(-507.605082, 2459.412697));
			Assert::IsTrue(points[i++] == Point2d(-509.083428, 2462.823408));
			Assert::IsTrue(points[i++] == Point2d(-510.304289, 2466.334527));
			Assert::IsTrue(points[i++] == Point2d(-511.260917, 2469.926647));
			Assert::IsTrue(points[i++] == Point2d(-511.948025, 2473.579911));
			Assert::IsTrue(points[i++] == Point2d(-512.361815, 2477.274128));
			Assert::IsTrue(points[i++] == Point2d(-512.500000, 2480.988877));
			Assert::IsTrue(points[i++] == Point2d(-512.500000, 2500.000000));
			Assert::IsTrue(points[i++] == Point2d(100.000000, 2500.000000));
			Assert::IsTrue(points[i++] == Point2d(712.500000, 2500.000000));
			Assert::IsTrue(points[i++] == Point2d(712.500000, 2480.988877));
			Assert::IsTrue(points[i++] == Point2d(712.361815, 2477.274128));
			Assert::IsTrue(points[i++] == Point2d(711.948025, 2473.579911));
			Assert::IsTrue(points[i++] == Point2d(711.260917, 2469.926647));
			Assert::IsTrue(points[i++] == Point2d(710.304289, 2466.334527));
			Assert::IsTrue(points[i++] == Point2d(709.083428, 2462.823408));
			Assert::IsTrue(points[i++] == Point2d(707.605082, 2459.412697));
			Assert::IsTrue(points[i++] == Point2d(705.877423, 2456.121245));
			Assert::IsTrue(points[i++] == Point2d(703.910001, 2452.967246));
			Assert::IsTrue(points[i++] == Point2d(701.713690, 2449.968134));
			Assert::IsTrue(points[i++] == Point2d(699.300629, 2447.140485));
			Assert::IsTrue(points[i++] == Point2d(696.684158, 2444.499929));
			Assert::IsTrue(points[i++] == Point2d(693.878737, 2442.061061));
			Assert::IsTrue(points[i++] == Point2d(690.899874, 2439.837363));
			Assert::IsTrue(points[i++] == Point2d(687.764034, 2437.841125));
			Assert::IsTrue(points[i++] == Point2d(684.488551, 2436.083381));
			Assert::IsTrue(points[i++] == Point2d(681.091527, 2434.573846));
			Assert::IsTrue(points[i++] == Point2d(677.591742, 2433.320866));
			Assert::IsTrue(points[i++] == Point2d(674.008539, 2432.331365));
			Assert::IsTrue(points[i++] == Point2d(670.361723, 2431.610812));
			Assert::IsTrue(points[i++] == Point2d(666.671453, 2431.163191));
			Assert::IsTrue(points[i++] == Point2d(358.314189, 2405.347234));
			Assert::IsTrue(points[i++] == Point2d(343.553108, 2403.556751));
			Assert::IsTrue(points[i++] == Point2d(328.965846, 2400.674541));
			Assert::IsTrue(points[i++] == Point2d(314.633032, 2396.716537));
			Assert::IsTrue(points[i++] == Point2d(300.633890, 2391.704615));
			Assert::IsTrue(points[i++] == Point2d(287.045798, 2385.666478));
			Assert::IsTrue(points[i++] == Point2d(273.943862, 2378.635501));
			Assert::IsTrue(points[i++] == Point2d(261.400503, 2370.650548));
			Assert::IsTrue(points[i++] == Point2d(249.485051, 2361.755754));
			Assert::IsTrue(points[i++] == Point2d(238.263369, 2352.000284));
			Assert::IsTrue(points[i++] == Point2d(227.797483, 2341.438061));
			Assert::IsTrue(points[i++] == Point2d(218.145241, 2330.127465));
			Assert::IsTrue(points[i++] == Point2d(209.359996, 2318.131015));
			Assert::IsTrue(points[i++] == Point2d(201.490306, 2305.515020));
			Assert::IsTrue(points[i++] == Point2d(194.579672, 2292.349213));
			Assert::IsTrue(points[i++] == Point2d(188.666289, 2278.706367));
			Assert::IsTrue(points[i++] == Point2d(183.782845, 2264.661891));
			Assert::IsTrue(points[i++] == Point2d(179.956331, 2250.293413));
			Assert::IsTrue(points[i++] == Point2d(177.207898, 2235.680355));
			Assert::IsTrue(points[i++] == Point2d(175.552738, 2220.903489));
			Assert::IsTrue(points[i++] == Point2d(175.000000, 2206.044491));
			Assert::IsTrue(points[i++] == Point2d(175.000000, 518.326160));
			Assert::IsTrue(points[i++] == Point2d(175.386511, 505.898160));
			Assert::IsTrue(points[i++] == Point2d(176.544552, 493.518196));
			Assert::IsTrue(points[i++] == Point2d(178.469645, 481.234117));
			Assert::IsTrue(points[i++] == Point2d(181.154351, 469.093404));
			Assert::IsTrue(points[i++] == Point2d(184.588292, 457.142981));
			Assert::IsTrue(points[i++] == Point2d(188.758196, 445.429038));
			Assert::IsTrue(points[i++] == Point2d(193.647946, 433.996850));
			Assert::IsTrue(points[i++] == Point2d(199.238642, 422.890605));
			Assert::IsTrue(points[i++] == Point2d(205.508676, 412.153229));
			Assert::IsTrue(points[i++] == Point2d(212.433814, 401.826224));
			Assert::IsTrue(points[i++] == Point2d(219.987288, 391.949504));
			Assert::IsTrue(points[i++] == Point2d(228.139904, 382.561244));
			Assert::IsTrue(points[i++] == Point2d(236.860151, 373.697732));
			Assert::IsTrue(points[i++] == Point2d(246.114325, 365.393224));
			Assert::IsTrue(points[i++] == Point2d(255.866656, 357.679820));
			Assert::IsTrue(points[i++] == Point2d(266.079451, 350.587333));
			Assert::IsTrue(points[i++] == Point2d(276.713237, 344.143175));
			Assert::IsTrue(points[i++] == Point2d(287.726912, 338.372254));
			Assert::IsTrue(points[i++] == Point2d(299.077907, 333.296876));
			Assert::IsTrue(points[i++] == Point2d(310.722351, 328.936657));
			Assert::IsTrue(points[i++] == Point2d(553.569412, 246.515836));
			Assert::IsTrue(points[i++] == Point2d(556.480523, 245.425781));
			Assert::IsTrue(points[i++] == Point2d(559.318272, 244.156936));
			Assert::IsTrue(points[i++] == Point2d(562.071691, 242.714206));
			Assert::IsTrue(points[i++] == Point2d(564.730137, 241.103167));
			Assert::IsTrue(points[i++] == Point2d(567.283336, 239.330045));
			Assert::IsTrue(points[i++] == Point2d(569.721419, 237.401694));
			Assert::IsTrue(points[i++] == Point2d(572.034962, 235.325567));
			Assert::IsTrue(points[i++] == Point2d(574.215024, 233.109689));
			Assert::IsTrue(points[i++] == Point2d(576.253178, 230.762624));
			Assert::IsTrue(points[i++] == Point2d(578.141547, 228.293444));
			Assert::IsTrue(points[i++] == Point2d(579.872831, 225.711693));
			Assert::IsTrue(points[i++] == Point2d(581.440339, 223.027349));
			Assert::IsTrue(points[i++] == Point2d(582.838014, 220.250787));
			Assert::IsTrue(points[i++] == Point2d(584.060451, 217.392741));
			Assert::IsTrue(points[i++] == Point2d(585.102927, 214.464255));
			Assert::IsTrue(points[i++] == Point2d(585.961412, 211.476649));
			Assert::IsTrue(points[i++] == Point2d(586.632589, 208.441471));
			Assert::IsTrue(points[i++] == Point2d(587.113862, 205.370451));
			Assert::IsTrue(points[i++] == Point2d(587.403372, 202.275460));
			Assert::IsTrue(points[i++] == Point2d(587.500000, 199.168460));
			Assert::IsTrue(points[i++] == Point2d(587.500000, 100.000000));
			Assert::IsTrue(points[i++] == Point2d(100.000000, 100.000000));
			Assert::IsTrue(i == points.size());

			props = beam.GetProperties();
			Assert::IsTrue(IsEqual(props.GetArea(), area, 0.01));
			Assert::IsTrue(IsEqual(props.GetIxx(), Ixx, 0.01));
			Assert::IsTrue(IsEqual(props.GetIyy(), Iyy, 0.01));
			Assert::IsTrue(IsEqual(props.GetIxy(), Ixy, 0.01));
		}

		TEST_METHOD(Offset)
		{
			auto beam = GetTestBeam();
			auto props = beam.GetProperties();

			// Get moment of inertia about CG before move
			// These properties should be invariant
			Float64 area = props.GetArea();
			Float64 Ixx = props.GetIxx();
			Float64 Iyy = props.GetIyy();
			Float64 Ixy = props.GetIxy();

			Size2d size(100, 100);
			beam.Offset(size);
			auto points = beam.GetPolyPoints();
			Assert::IsTrue(points.size() == 175);
			int i = 0;
			Assert::IsTrue(points[i++] == Point2d(100.000000, 100.000000));
			Assert::IsTrue(points[i++] == Point2d(-387.500000, 100.000000));
			Assert::IsTrue(points[i++] == Point2d(-387.500000, 199.168460));
			Assert::IsTrue(points[i++] == Point2d(-387.403372, 202.275460));
			Assert::IsTrue(points[i++] == Point2d(-387.113862, 205.370451));
			Assert::IsTrue(points[i++] == Point2d(-386.632589, 208.441471));
			Assert::IsTrue(points[i++] == Point2d(-385.961412, 211.476649));
			Assert::IsTrue(points[i++] == Point2d(-385.102927, 214.464255));
			Assert::IsTrue(points[i++] == Point2d(-384.060451, 217.392741));
			Assert::IsTrue(points[i++] == Point2d(-382.838014, 220.250787));
			Assert::IsTrue(points[i++] == Point2d(-381.440339, 223.027349));
			Assert::IsTrue(points[i++] == Point2d(-379.872831, 225.711693));
			Assert::IsTrue(points[i++] == Point2d(-378.141547, 228.293444));
			Assert::IsTrue(points[i++] == Point2d(-376.253178, 230.762624));
			Assert::IsTrue(points[i++] == Point2d(-374.215024, 233.109689));
			Assert::IsTrue(points[i++] == Point2d(-372.034962, 235.325567));
			Assert::IsTrue(points[i++] == Point2d(-369.721419, 237.401694));
			Assert::IsTrue(points[i++] == Point2d(-367.283336, 239.330045));
			Assert::IsTrue(points[i++] == Point2d(-364.730137, 241.103167));
			Assert::IsTrue(points[i++] == Point2d(-362.071691, 242.714206));
			Assert::IsTrue(points[i++] == Point2d(-359.318272, 244.156936));
			Assert::IsTrue(points[i++] == Point2d(-356.480523, 245.425781));
			Assert::IsTrue(points[i++] == Point2d(-353.569412, 246.515836));
			Assert::IsTrue(points[i++] == Point2d(-110.722351, 328.936657));
			Assert::IsTrue(points[i++] == Point2d(-99.077907, 333.296876));
			Assert::IsTrue(points[i++] == Point2d(-87.726912, 338.372254));
			Assert::IsTrue(points[i++] == Point2d(-76.713237, 344.143175));
			Assert::IsTrue(points[i++] == Point2d(-66.079451, 350.587333));
			Assert::IsTrue(points[i++] == Point2d(-55.866656, 357.679820));
			Assert::IsTrue(points[i++] == Point2d(-46.114325, 365.393224));
			Assert::IsTrue(points[i++] == Point2d(-36.860151, 373.697732));
			Assert::IsTrue(points[i++] == Point2d(-28.139904, 382.561244));
			Assert::IsTrue(points[i++] == Point2d(-19.987288, 391.949504));
			Assert::IsTrue(points[i++] == Point2d(-12.433814, 401.826224));
			Assert::IsTrue(points[i++] == Point2d(-5.508676, 412.153229));
			Assert::IsTrue(points[i++] == Point2d(0.761358, 422.890605));
			Assert::IsTrue(points[i++] == Point2d(6.352054, 433.996850));
			Assert::IsTrue(points[i++] == Point2d(11.241804, 445.429038));
			Assert::IsTrue(points[i++] == Point2d(15.411708, 457.142981));
			Assert::IsTrue(points[i++] == Point2d(18.845649, 469.093404));
			Assert::IsTrue(points[i++] == Point2d(21.530355, 481.234117));
			Assert::IsTrue(points[i++] == Point2d(23.455448, 493.518196));
			Assert::IsTrue(points[i++] == Point2d(24.613489, 505.898160));
			Assert::IsTrue(points[i++] == Point2d(25.000000, 518.326160));
			Assert::IsTrue(points[i++] == Point2d(25.000000, 2206.044491));
			Assert::IsTrue(points[i++] == Point2d(24.447262, 2220.903489));
			Assert::IsTrue(points[i++] == Point2d(22.792102, 2235.680355));
			Assert::IsTrue(points[i++] == Point2d(20.043669, 2250.293413));
			Assert::IsTrue(points[i++] == Point2d(16.217155, 2264.661891));
			Assert::IsTrue(points[i++] == Point2d(11.333711, 2278.706367));
			Assert::IsTrue(points[i++] == Point2d(5.420328, 2292.349213));
			Assert::IsTrue(points[i++] == Point2d(-1.490306, 2305.515020));
			Assert::IsTrue(points[i++] == Point2d(-9.359996, 2318.131015));
			Assert::IsTrue(points[i++] == Point2d(-18.145241, 2330.127465));
			Assert::IsTrue(points[i++] == Point2d(-27.797483, 2341.438061));
			Assert::IsTrue(points[i++] == Point2d(-38.263369, 2352.000284));
			Assert::IsTrue(points[i++] == Point2d(-49.485051, 2361.755754));
			Assert::IsTrue(points[i++] == Point2d(-61.400503, 2370.650548));
			Assert::IsTrue(points[i++] == Point2d(-73.943862, 2378.635501));
			Assert::IsTrue(points[i++] == Point2d(-87.045798, 2385.666478));
			Assert::IsTrue(points[i++] == Point2d(-100.633890, 2391.704615));
			Assert::IsTrue(points[i++] == Point2d(-114.633032, 2396.716537));
			Assert::IsTrue(points[i++] == Point2d(-128.965846, 2400.674541));
			Assert::IsTrue(points[i++] == Point2d(-143.553108, 2403.556751));
			Assert::IsTrue(points[i++] == Point2d(-158.314189, 2405.347234));
			Assert::IsTrue(points[i++] == Point2d(-466.671453, 2431.163191));
			Assert::IsTrue(points[i++] == Point2d(-470.361723, 2431.610812));
			Assert::IsTrue(points[i++] == Point2d(-474.008539, 2432.331365));
			Assert::IsTrue(points[i++] == Point2d(-477.591742, 2433.320866));
			Assert::IsTrue(points[i++] == Point2d(-481.091527, 2434.573846));
			Assert::IsTrue(points[i++] == Point2d(-484.488551, 2436.083381));
			Assert::IsTrue(points[i++] == Point2d(-487.764034, 2437.841125));
			Assert::IsTrue(points[i++] == Point2d(-490.899874, 2439.837363));
			Assert::IsTrue(points[i++] == Point2d(-493.878737, 2442.061061));
			Assert::IsTrue(points[i++] == Point2d(-496.684158, 2444.499929));
			Assert::IsTrue(points[i++] == Point2d(-499.300629, 2447.140485));
			Assert::IsTrue(points[i++] == Point2d(-501.713690, 2449.968134));
			Assert::IsTrue(points[i++] == Point2d(-503.910001, 2452.967246));
			Assert::IsTrue(points[i++] == Point2d(-505.877423, 2456.121245));
			Assert::IsTrue(points[i++] == Point2d(-507.605082, 2459.412697));
			Assert::IsTrue(points[i++] == Point2d(-509.083428, 2462.823408));
			Assert::IsTrue(points[i++] == Point2d(-510.304289, 2466.334527));
			Assert::IsTrue(points[i++] == Point2d(-511.260917, 2469.926647));
			Assert::IsTrue(points[i++] == Point2d(-511.948025, 2473.579911));
			Assert::IsTrue(points[i++] == Point2d(-512.361815, 2477.274128));
			Assert::IsTrue(points[i++] == Point2d(-512.500000, 2480.988877));
			Assert::IsTrue(points[i++] == Point2d(-512.500000, 2500.000000));
			Assert::IsTrue(points[i++] == Point2d(100.000000, 2500.000000));
			Assert::IsTrue(points[i++] == Point2d(712.500000, 2500.000000));
			Assert::IsTrue(points[i++] == Point2d(712.500000, 2480.988877));
			Assert::IsTrue(points[i++] == Point2d(712.361815, 2477.274128));
			Assert::IsTrue(points[i++] == Point2d(711.948025, 2473.579911));
			Assert::IsTrue(points[i++] == Point2d(711.260917, 2469.926647));
			Assert::IsTrue(points[i++] == Point2d(710.304289, 2466.334527));
			Assert::IsTrue(points[i++] == Point2d(709.083428, 2462.823408));
			Assert::IsTrue(points[i++] == Point2d(707.605082, 2459.412697));
			Assert::IsTrue(points[i++] == Point2d(705.877423, 2456.121245));
			Assert::IsTrue(points[i++] == Point2d(703.910001, 2452.967246));
			Assert::IsTrue(points[i++] == Point2d(701.713690, 2449.968134));
			Assert::IsTrue(points[i++] == Point2d(699.300629, 2447.140485));
			Assert::IsTrue(points[i++] == Point2d(696.684158, 2444.499929));
			Assert::IsTrue(points[i++] == Point2d(693.878737, 2442.061061));
			Assert::IsTrue(points[i++] == Point2d(690.899874, 2439.837363));
			Assert::IsTrue(points[i++] == Point2d(687.764034, 2437.841125));
			Assert::IsTrue(points[i++] == Point2d(684.488551, 2436.083381));
			Assert::IsTrue(points[i++] == Point2d(681.091527, 2434.573846));
			Assert::IsTrue(points[i++] == Point2d(677.591742, 2433.320866));
			Assert::IsTrue(points[i++] == Point2d(674.008539, 2432.331365));
			Assert::IsTrue(points[i++] == Point2d(670.361723, 2431.610812));
			Assert::IsTrue(points[i++] == Point2d(666.671453, 2431.163191));
			Assert::IsTrue(points[i++] == Point2d(358.314189, 2405.347234));
			Assert::IsTrue(points[i++] == Point2d(343.553108, 2403.556751));
			Assert::IsTrue(points[i++] == Point2d(328.965846, 2400.674541));
			Assert::IsTrue(points[i++] == Point2d(314.633032, 2396.716537));
			Assert::IsTrue(points[i++] == Point2d(300.633890, 2391.704615));
			Assert::IsTrue(points[i++] == Point2d(287.045798, 2385.666478));
			Assert::IsTrue(points[i++] == Point2d(273.943862, 2378.635501));
			Assert::IsTrue(points[i++] == Point2d(261.400503, 2370.650548));
			Assert::IsTrue(points[i++] == Point2d(249.485051, 2361.755754));
			Assert::IsTrue(points[i++] == Point2d(238.263369, 2352.000284));
			Assert::IsTrue(points[i++] == Point2d(227.797483, 2341.438061));
			Assert::IsTrue(points[i++] == Point2d(218.145241, 2330.127465));
			Assert::IsTrue(points[i++] == Point2d(209.359996, 2318.131015));
			Assert::IsTrue(points[i++] == Point2d(201.490306, 2305.515020));
			Assert::IsTrue(points[i++] == Point2d(194.579672, 2292.349213));
			Assert::IsTrue(points[i++] == Point2d(188.666289, 2278.706367));
			Assert::IsTrue(points[i++] == Point2d(183.782845, 2264.661891));
			Assert::IsTrue(points[i++] == Point2d(179.956331, 2250.293413));
			Assert::IsTrue(points[i++] == Point2d(177.207898, 2235.680355));
			Assert::IsTrue(points[i++] == Point2d(175.552738, 2220.903489));
			Assert::IsTrue(points[i++] == Point2d(175.000000, 2206.044491));
			Assert::IsTrue(points[i++] == Point2d(175.000000, 518.326160));
			Assert::IsTrue(points[i++] == Point2d(175.386511, 505.898160));
			Assert::IsTrue(points[i++] == Point2d(176.544552, 493.518196));
			Assert::IsTrue(points[i++] == Point2d(178.469645, 481.234117));
			Assert::IsTrue(points[i++] == Point2d(181.154351, 469.093404));
			Assert::IsTrue(points[i++] == Point2d(184.588292, 457.142981));
			Assert::IsTrue(points[i++] == Point2d(188.758196, 445.429038));
			Assert::IsTrue(points[i++] == Point2d(193.647946, 433.996850));
			Assert::IsTrue(points[i++] == Point2d(199.238642, 422.890605));
			Assert::IsTrue(points[i++] == Point2d(205.508676, 412.153229));
			Assert::IsTrue(points[i++] == Point2d(212.433814, 401.826224));
			Assert::IsTrue(points[i++] == Point2d(219.987288, 391.949504));
			Assert::IsTrue(points[i++] == Point2d(228.139904, 382.561244));
			Assert::IsTrue(points[i++] == Point2d(236.860151, 373.697732));
			Assert::IsTrue(points[i++] == Point2d(246.114325, 365.393224));
			Assert::IsTrue(points[i++] == Point2d(255.866656, 357.679820));
			Assert::IsTrue(points[i++] == Point2d(266.079451, 350.587333));
			Assert::IsTrue(points[i++] == Point2d(276.713237, 344.143175));
			Assert::IsTrue(points[i++] == Point2d(287.726912, 338.372254));
			Assert::IsTrue(points[i++] == Point2d(299.077907, 333.296876));
			Assert::IsTrue(points[i++] == Point2d(310.722351, 328.936657));
			Assert::IsTrue(points[i++] == Point2d(553.569412, 246.515836));
			Assert::IsTrue(points[i++] == Point2d(556.480523, 245.425781));
			Assert::IsTrue(points[i++] == Point2d(559.318272, 244.156936));
			Assert::IsTrue(points[i++] == Point2d(562.071691, 242.714206));
			Assert::IsTrue(points[i++] == Point2d(564.730137, 241.103167));
			Assert::IsTrue(points[i++] == Point2d(567.283336, 239.330045));
			Assert::IsTrue(points[i++] == Point2d(569.721419, 237.401694));
			Assert::IsTrue(points[i++] == Point2d(572.034962, 235.325567));
			Assert::IsTrue(points[i++] == Point2d(574.215024, 233.109689));
			Assert::IsTrue(points[i++] == Point2d(576.253178, 230.762624));
			Assert::IsTrue(points[i++] == Point2d(578.141547, 228.293444));
			Assert::IsTrue(points[i++] == Point2d(579.872831, 225.711693));
			Assert::IsTrue(points[i++] == Point2d(581.440339, 223.027349));
			Assert::IsTrue(points[i++] == Point2d(582.838014, 220.250787));
			Assert::IsTrue(points[i++] == Point2d(584.060451, 217.392741));
			Assert::IsTrue(points[i++] == Point2d(585.102927, 214.464255));
			Assert::IsTrue(points[i++] == Point2d(585.961412, 211.476649));
			Assert::IsTrue(points[i++] == Point2d(586.632589, 208.441471));
			Assert::IsTrue(points[i++] == Point2d(587.113862, 205.370451));
			Assert::IsTrue(points[i++] == Point2d(587.403372, 202.275460));
			Assert::IsTrue(points[i++] == Point2d(587.500000, 199.168460));
			Assert::IsTrue(points[i++] == Point2d(587.500000, 100.000000));
			Assert::IsTrue(points[i++] == Point2d(100.000000, 100.000000));
			Assert::IsTrue(i == points.size());
			props = beam.GetProperties();
			Assert::IsTrue(IsEqual(props.GetArea(), area, 0.01));
			Assert::IsTrue(IsEqual(props.GetIxx(), Ixx, 0.01));
			Assert::IsTrue(IsEqual(props.GetIyy(), Iyy, 0.01));
			Assert::IsTrue(IsEqual(props.GetIxy(), Ixy, 0.01));
		}

		TEST_METHOD(LocatorPoint)
		{
			auto beam = GetTestBeam();

			auto hookPnt = beam.GetHookPoint();

			// BottomLeft
			hookPnt->Move(0, 0);
			Point2d to(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::BottomLeft, to);
			auto from = beam.GetLocatorPoint(Shape::LocatorPoint::BottomLeft);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(712.5, 100.0));

			// BottomCenter
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::BottomCenter, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::BottomCenter);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(100.0, 100.0));

			// BottomRight
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::BottomRight, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::BottomRight);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(-512.5, 100.0));

			// CenterLeft
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::CenterLeft, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::CenterLeft);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(712.5, -1100.0));

			// CenterCenter
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::CenterCenter, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::CenterCenter);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(100.0, -1100.0));

			// CenterRight
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::CenterRight, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::CenterRight);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(-512.5, -1100.0));

			// TopLeft
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::TopLeft, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::TopLeft);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(712.5, -2300.0));

			// TopCenter
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::TopCenter, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::TopCenter);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(100.0, -2300.0));

			// TopRight
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::TopRight, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::TopRight);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(-512.5, -2300.0));

			// HookPoint
			hookPnt->Move(0, 0);
			to.Move(100, 100);
			beam.SetLocatorPoint(Shape::LocatorPoint::HookPoint, to);
			from = beam.GetLocatorPoint(Shape::LocatorPoint::HookPoint);
			Assert::IsTrue(from == Point2d(100, 100));
			Assert::IsTrue(*hookPnt == Point2d(100.0, 100.0));
		}

		TEST_METHOD(Rotate)
		{
			auto beam = GetTestBeam();
			auto hookPnt = beam.GetHookPoint();
			hookPnt->Move(0, 0);

			Point2d c(0, 0);

			beam.Rotate(c, M_PI);

			auto points = beam.GetPolyPoints();
			Assert::IsTrue(points.size() == 175);
			int i = 0;
			Assert::IsTrue(points[i++] == Point2d(0.000000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(487.500000, -0.000000));
			Assert::IsTrue(points[i++] == Point2d(487.500000, -99.168460));
			Assert::IsTrue(points[i++] == Point2d(487.403372, -102.275460));
			Assert::IsTrue(points[i++] == Point2d(487.113862, -105.370451));
			Assert::IsTrue(points[i++] == Point2d(486.632589, -108.441471));
			Assert::IsTrue(points[i++] == Point2d(485.961412, -111.476649));
			Assert::IsTrue(points[i++] == Point2d(485.102927, -114.464255));
			Assert::IsTrue(points[i++] == Point2d(484.060451, -117.392741));
			Assert::IsTrue(points[i++] == Point2d(482.838014, -120.250787));
			Assert::IsTrue(points[i++] == Point2d(481.440339, -123.027349));
			Assert::IsTrue(points[i++] == Point2d(479.872831, -125.711693));
			Assert::IsTrue(points[i++] == Point2d(478.141547, -128.293444));
			Assert::IsTrue(points[i++] == Point2d(476.253178, -130.762624));
			Assert::IsTrue(points[i++] == Point2d(474.215024, -133.109689));
			Assert::IsTrue(points[i++] == Point2d(472.034962, -135.325567));
			Assert::IsTrue(points[i++] == Point2d(469.721419, -137.401694));
			Assert::IsTrue(points[i++] == Point2d(467.283336, -139.330045));
			Assert::IsTrue(points[i++] == Point2d(464.730137, -141.103167));
			Assert::IsTrue(points[i++] == Point2d(462.071691, -142.714206));
			Assert::IsTrue(points[i++] == Point2d(459.318272, -144.156936));
			Assert::IsTrue(points[i++] == Point2d(456.480523, -145.425781));
			Assert::IsTrue(points[i++] == Point2d(453.569412, -146.515836));
			Assert::IsTrue(points[i++] == Point2d(210.722351, -228.936657));
			Assert::IsTrue(points[i++] == Point2d(199.077907, -233.296876));
			Assert::IsTrue(points[i++] == Point2d(187.726912, -238.372254));
			Assert::IsTrue(points[i++] == Point2d(176.713237, -244.143175));
			Assert::IsTrue(points[i++] == Point2d(166.079451, -250.587333));
			Assert::IsTrue(points[i++] == Point2d(155.866656, -257.679820));
			Assert::IsTrue(points[i++] == Point2d(146.114325, -265.393224));
			Assert::IsTrue(points[i++] == Point2d(136.860151, -273.697732));
			Assert::IsTrue(points[i++] == Point2d(128.139904, -282.561244));
			Assert::IsTrue(points[i++] == Point2d(119.987288, -291.949504));
			Assert::IsTrue(points[i++] == Point2d(112.433814, -301.826224));
			Assert::IsTrue(points[i++] == Point2d(105.508676, -312.153229));
			Assert::IsTrue(points[i++] == Point2d(99.238642, -322.890605));
			Assert::IsTrue(points[i++] == Point2d(93.647946, -333.996850));
			Assert::IsTrue(points[i++] == Point2d(88.758196, -345.429038));
			Assert::IsTrue(points[i++] == Point2d(84.588292, -357.142981));
			Assert::IsTrue(points[i++] == Point2d(81.154351, -369.093404));
			Assert::IsTrue(points[i++] == Point2d(78.469645, -381.234117));
			Assert::IsTrue(points[i++] == Point2d(76.544552, -393.518196));
			Assert::IsTrue(points[i++] == Point2d(75.386511, -405.898160));
			Assert::IsTrue(points[i++] == Point2d(75.000000, -418.326160));
			Assert::IsTrue(points[i++] == Point2d(75.000000, -2106.044491));
			Assert::IsTrue(points[i++] == Point2d(75.552738, -2120.903489));
			Assert::IsTrue(points[i++] == Point2d(77.207898, -2135.680355));
			Assert::IsTrue(points[i++] == Point2d(79.956331, -2150.293413));
			Assert::IsTrue(points[i++] == Point2d(83.782845, -2164.661891));
			Assert::IsTrue(points[i++] == Point2d(88.666289, -2178.706367));
			Assert::IsTrue(points[i++] == Point2d(94.579672, -2192.349213));
			Assert::IsTrue(points[i++] == Point2d(101.490306, -2205.515020));
			Assert::IsTrue(points[i++] == Point2d(109.359996, -2218.131015));
			Assert::IsTrue(points[i++] == Point2d(118.145241, -2230.127465));
			Assert::IsTrue(points[i++] == Point2d(127.797483, -2241.438061));
			Assert::IsTrue(points[i++] == Point2d(138.263369, -2252.000284));
			Assert::IsTrue(points[i++] == Point2d(149.485051, -2261.755754));
			Assert::IsTrue(points[i++] == Point2d(161.400503, -2270.650548));
			Assert::IsTrue(points[i++] == Point2d(173.943862, -2278.635501));
			Assert::IsTrue(points[i++] == Point2d(187.045798, -2285.666478));
			Assert::IsTrue(points[i++] == Point2d(200.633890, -2291.704615));
			Assert::IsTrue(points[i++] == Point2d(214.633032, -2296.716537));
			Assert::IsTrue(points[i++] == Point2d(228.965846, -2300.674541));
			Assert::IsTrue(points[i++] == Point2d(243.553108, -2303.556751));
			Assert::IsTrue(points[i++] == Point2d(258.314189, -2305.347234));
			Assert::IsTrue(points[i++] == Point2d(566.671453, -2331.163191));
			Assert::IsTrue(points[i++] == Point2d(570.361723, -2331.610812));
			Assert::IsTrue(points[i++] == Point2d(574.008539, -2332.331365));
			Assert::IsTrue(points[i++] == Point2d(577.591742, -2333.320866));
			Assert::IsTrue(points[i++] == Point2d(581.091527, -2334.573846));
			Assert::IsTrue(points[i++] == Point2d(584.488551, -2336.083381));
			Assert::IsTrue(points[i++] == Point2d(587.764034, -2337.841125));
			Assert::IsTrue(points[i++] == Point2d(590.899874, -2339.837363));
			Assert::IsTrue(points[i++] == Point2d(593.878737, -2342.061061));
			Assert::IsTrue(points[i++] == Point2d(596.684158, -2344.499929));
			Assert::IsTrue(points[i++] == Point2d(599.300629, -2347.140485));
			Assert::IsTrue(points[i++] == Point2d(601.713690, -2349.968134));
			Assert::IsTrue(points[i++] == Point2d(603.910001, -2352.967246));
			Assert::IsTrue(points[i++] == Point2d(605.877423, -2356.121245));
			Assert::IsTrue(points[i++] == Point2d(607.605082, -2359.412697));
			Assert::IsTrue(points[i++] == Point2d(609.083428, -2362.823408));
			Assert::IsTrue(points[i++] == Point2d(610.304289, -2366.334527));
			Assert::IsTrue(points[i++] == Point2d(611.260917, -2369.926647));
			Assert::IsTrue(points[i++] == Point2d(611.948025, -2373.579911));
			Assert::IsTrue(points[i++] == Point2d(612.361815, -2377.274128));
			Assert::IsTrue(points[i++] == Point2d(612.500000, -2380.988877));
			Assert::IsTrue(points[i++] == Point2d(612.500000, -2400.000000));
			Assert::IsTrue(points[i++] == Point2d(-0.000000, -2400.000000));
			Assert::IsTrue(points[i++] == Point2d(-612.500000, -2400.000000));
			Assert::IsTrue(points[i++] == Point2d(-612.500000, -2380.988877));
			Assert::IsTrue(points[i++] == Point2d(-612.361815, -2377.274128));
			Assert::IsTrue(points[i++] == Point2d(-611.948025, -2373.579911));
			Assert::IsTrue(points[i++] == Point2d(-611.260917, -2369.926647));
			Assert::IsTrue(points[i++] == Point2d(-610.304289, -2366.334527));
			Assert::IsTrue(points[i++] == Point2d(-609.083428, -2362.823408));
			Assert::IsTrue(points[i++] == Point2d(-607.605082, -2359.412697));
			Assert::IsTrue(points[i++] == Point2d(-605.877423, -2356.121245));
			Assert::IsTrue(points[i++] == Point2d(-603.910001, -2352.967246));
			Assert::IsTrue(points[i++] == Point2d(-601.713690, -2349.968134));
			Assert::IsTrue(points[i++] == Point2d(-599.300629, -2347.140485));
			Assert::IsTrue(points[i++] == Point2d(-596.684158, -2344.499929));
			Assert::IsTrue(points[i++] == Point2d(-593.878737, -2342.061061));
			Assert::IsTrue(points[i++] == Point2d(-590.899874, -2339.837363));
			Assert::IsTrue(points[i++] == Point2d(-587.764034, -2337.841125));
			Assert::IsTrue(points[i++] == Point2d(-584.488551, -2336.083381));
			Assert::IsTrue(points[i++] == Point2d(-581.091527, -2334.573846));
			Assert::IsTrue(points[i++] == Point2d(-577.591742, -2333.320866));
			Assert::IsTrue(points[i++] == Point2d(-574.008539, -2332.331365));
			Assert::IsTrue(points[i++] == Point2d(-570.361723, -2331.610812));
			Assert::IsTrue(points[i++] == Point2d(-566.671453, -2331.163191));
			Assert::IsTrue(points[i++] == Point2d(-258.314189, -2305.347234));
			Assert::IsTrue(points[i++] == Point2d(-243.553108, -2303.556751));
			Assert::IsTrue(points[i++] == Point2d(-228.965846, -2300.674541));
			Assert::IsTrue(points[i++] == Point2d(-214.633032, -2296.716537));
			Assert::IsTrue(points[i++] == Point2d(-200.633890, -2291.704615));
			Assert::IsTrue(points[i++] == Point2d(-187.045798, -2285.666478));
			Assert::IsTrue(points[i++] == Point2d(-173.943862, -2278.635501));
			Assert::IsTrue(points[i++] == Point2d(-161.400503, -2270.650548));
			Assert::IsTrue(points[i++] == Point2d(-149.485051, -2261.755754));
			Assert::IsTrue(points[i++] == Point2d(-138.263369, -2252.000284));
			Assert::IsTrue(points[i++] == Point2d(-127.797483, -2241.438061));
			Assert::IsTrue(points[i++] == Point2d(-118.145241, -2230.127465));
			Assert::IsTrue(points[i++] == Point2d(-109.359996, -2218.131015));
			Assert::IsTrue(points[i++] == Point2d(-101.490306, -2205.515020));
			Assert::IsTrue(points[i++] == Point2d(-94.579672, -2192.349213));
			Assert::IsTrue(points[i++] == Point2d(-88.666289, -2178.706367));
			Assert::IsTrue(points[i++] == Point2d(-83.782845, -2164.661891));
			Assert::IsTrue(points[i++] == Point2d(-79.956331, -2150.293413));
			Assert::IsTrue(points[i++] == Point2d(-77.207898, -2135.680355));
			Assert::IsTrue(points[i++] == Point2d(-75.552738, -2120.903489));
			Assert::IsTrue(points[i++] == Point2d(-75.000000, -2106.044491));
			Assert::IsTrue(points[i++] == Point2d(-75.000000, -418.326160));
			Assert::IsTrue(points[i++] == Point2d(-75.386511, -405.898160));
			Assert::IsTrue(points[i++] == Point2d(-76.544552, -393.518196));
			Assert::IsTrue(points[i++] == Point2d(-78.469645, -381.234117));
			Assert::IsTrue(points[i++] == Point2d(-81.154351, -369.093404));
			Assert::IsTrue(points[i++] == Point2d(-84.588292, -357.142981));
			Assert::IsTrue(points[i++] == Point2d(-88.758196, -345.429038));
			Assert::IsTrue(points[i++] == Point2d(-93.647946, -333.996850));
			Assert::IsTrue(points[i++] == Point2d(-99.238642, -322.890605));
			Assert::IsTrue(points[i++] == Point2d(-105.508676, -312.153229));
			Assert::IsTrue(points[i++] == Point2d(-112.433814, -301.826224));
			Assert::IsTrue(points[i++] == Point2d(-119.987288, -291.949504));
			Assert::IsTrue(points[i++] == Point2d(-128.139904, -282.561244));
			Assert::IsTrue(points[i++] == Point2d(-136.860151, -273.697732));
			Assert::IsTrue(points[i++] == Point2d(-146.114325, -265.393224));
			Assert::IsTrue(points[i++] == Point2d(-155.866656, -257.679820));
			Assert::IsTrue(points[i++] == Point2d(-166.079451, -250.587333));
			Assert::IsTrue(points[i++] == Point2d(-176.713237, -244.143175));
			Assert::IsTrue(points[i++] == Point2d(-187.726912, -238.372254));
			Assert::IsTrue(points[i++] == Point2d(-199.077907, -233.296876));
			Assert::IsTrue(points[i++] == Point2d(-210.722351, -228.936657));
			Assert::IsTrue(points[i++] == Point2d(-453.569412, -146.515836));
			Assert::IsTrue(points[i++] == Point2d(-456.480523, -145.425781));
			Assert::IsTrue(points[i++] == Point2d(-459.318272, -144.156936));
			Assert::IsTrue(points[i++] == Point2d(-462.071691, -142.714206));
			Assert::IsTrue(points[i++] == Point2d(-464.730137, -141.103167));
			Assert::IsTrue(points[i++] == Point2d(-467.283336, -139.330045));
			Assert::IsTrue(points[i++] == Point2d(-469.721419, -137.401694));
			Assert::IsTrue(points[i++] == Point2d(-472.034962, -135.325567));
			Assert::IsTrue(points[i++] == Point2d(-474.215024, -133.109689));
			Assert::IsTrue(points[i++] == Point2d(-476.253178, -130.762624));
			Assert::IsTrue(points[i++] == Point2d(-478.141547, -128.293444));
			Assert::IsTrue(points[i++] == Point2d(-479.872831, -125.711693));
			Assert::IsTrue(points[i++] == Point2d(-481.440339, -123.027349));
			Assert::IsTrue(points[i++] == Point2d(-482.838014, -120.250787));
			Assert::IsTrue(points[i++] == Point2d(-484.060451, -117.392741));
			Assert::IsTrue(points[i++] == Point2d(-485.102927, -114.464255));
			Assert::IsTrue(points[i++] == Point2d(-485.961412, -111.476649));
			Assert::IsTrue(points[i++] == Point2d(-486.632589, -108.441471));
			Assert::IsTrue(points[i++] == Point2d(-487.113862, -105.370451));
			Assert::IsTrue(points[i++] == Point2d(-487.403372, -102.275460));
			Assert::IsTrue(points[i++] == Point2d(-487.500000, -99.168460));
			Assert::IsTrue(points[i++] == Point2d(-487.500000, 0.000000));
			Assert::IsTrue(points[i++] == Point2d(0.000000, 0.000000));
			Assert::IsTrue(i == points.size());
		}
	};
}
