<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Structured Storage Basics</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=topic-status content="In Progress">
<meta name=topic-priority content=0>
<meta name=topic-time-estimate content=0>
<meta name=topic-comment content>
<meta name=topic-id content>
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=0>
<meta name=layout-height content=0>
<meta name=layout-width content=0>


<!--(Links)=========================================================-->

<link REL=StyleSheet HREF="..\default.css">



<!--(Style Sheet)===================================================-->

<style>
<!--

P.Tip {
	font-family: Arial;
	font-style: italic;
	font-size: 12.0pt;
	background-color: #ffff00;
}

/*=(Generated Code)=================================================*/
/*=(WARNING: DO NOT EDIT OR DELETE THIS SECTION!)===================*/
/*begin!kadov{{=====================================================*/ 
LI.kadov-P-CTip {
	font-family: Arial;
	font-style: italic;
	font-size: 12.0pt;
}
/*}}end!kadov=======================================================*/ 



-->
</style>


</head>

<!--(Body)==========================================================-->


<body>

<h1>Structured Storage Basics</h1>

<p>The structured storage framework is designed to make it easy to add 
 persistence to your applications and object hierarchies. It is not an 
 object oriented database and does not support fancy stuff like data schemas, 
 query languages and the like. It works much like standard COM IPropertyBag 
 implementations, but has better built-in support for hierarchical data, 
 persistence of collections, and polymorphic objects.</p>

<p>The structured storage framework provides capabilities for storing your 
 data in a hierarchical format. This is very convenient since most object-based 
 applications order their data in hierarchical fashion.</p>

<p>The key objects in the persistence framework are StructuredSave2 and 
 StructuredLoad2. These objects are used to open data files and save or 
 load data to/from them.</p>

<p>The StructuredSave2 objects support direct serialization of data when 
 saving objects to the persistence medium. The StructuredLoad2 objects 
 support direct serialization of data but will also skip over unrecognized 
 data when reading from the persistence medium.</p>

<p>The next section provides some simple examples that demonstrate the 
 basic principles of using these objects</p>

<h2>Basic Usage</h2>

<p>The structured storage framework is designed for storage of hierarchical 
 data. However, it can also be easily used to store data in a flat format. 
 Here is an example of some Visual Basic code which creates a file called 
 test.xml, stores (Save's) some simple data in the file and then retrieves 
 (Load's) it:</p>

<p CLASS=Preformatted-Code>Private Sub Save()<br>
Dim ss As New StructuredSave2<br>
ss.Open (&quot;test.xml&quot;)<br>
ss.BeginUnit &quot;MyUnit&quot;, 1#<br>
ss.Property(&quot;MyString&quot;) = &quot;This is a string&quot;<br>
ss.Property(&quot;MyDouble&quot;) = 2.712<br>
ss.Property(&quot;MyInteger&quot;) = 42<br>
ss.EndUnit<br>
ss.Close<br>
End Sub</p>

<p>&nbsp;</p>

<p CLASS=Preformatted-Code>Private Sub Load()<br>
Dim ts As String<br>
Dim ti As Integer<br>
Dim b As Boolean<br>
Dim sl As New StructuredLoad2<br>
sl.Open (&quot;test.xml&quot;)<br>
sl.BeginUnit &quot;MyUnit&quot;<br>
ts = CStr(sl.Property(&quot;MyString&quot;))<br>
ti = sl.Property(&quot;MyInteger&quot;)<br>
b = sl.EndUnit<br>
sl.Close<br>
End Sub</p>

<p>This is about as simple of an example as we can create using this system. 
 We are storing and retrieving three variables: a String, a Double, and 
 an Integer, into the file. The variables are saved in a Unit called &quot;MyUnit&quot;. 
 Note that the double value is skipped over when reading the file back 
 in.</p>

<p>At this point, you might be asking; &quot;What's a Unit?&quot;. Units 
 are what makes the structure of data in the system hierarchical. They 
 can be thought of as containers where you can store Properties and even 
 other Units. When saving a file, Units are created by making balanced 
 calls to the BeginUnit/EndUnit methods. Every call to BeginUnit must be 
 balanced with an EndUnit.</p>

<p CLASS=Tip>Tip: You must have at least one BeginUnit/EndUnit in every 
 file you plan to persist to.</p>

<h2>Persistence for Hierarchies of Objects</h2>

<p>As you can see in the previous example, Units are used to store collections 
 of data (Properties) and other Units. If you think about it from a data 
 standpoint, this is exactly what objects do - objects serve as a container 
 by encapsulating data. In fact, the previous example could have been written 
 to store the data for a single object. There are two basic ways to store 
 object hierarchies using the structured storage framework depending on 
 your needs.</p>

<p>If you have a hierarchy of simple objects whose lifetimes are well understood, 
 you can take a somewhat simplified approach to using the framework. This 
 is done by having each object that you want to persist implement the IStructuredStorage2 
 interface.</p>

<p>The following code snippets show how a simple object might implement 
 the Save and Load methods of the IStructuredStorage2 interface.</p>

<p CLASS=Preformatted-Code>Private Sub IStructuredStorage2_Save(ByVal ss As WBFLTools.IStructuredSave2)<br>
ss.BeginUnit &quot;TestStorage&quot;, 1#<br>
ss.Property(&quot;Name&quot;) = Name<br>
ss.Property(&quot;Count&quot;) = Count<br>
ss.Property(&quot;Length&quot;) = Length<br>
ss.EndUnit<br>
End Sub</p>

<p CLASS=Preformatted-Code>Private Sub IStructuredStorage2_Load(ByVal sl As WBFLTools.IStructuredLoad2)<br>
sl.BeginUnit &quot;TestStorage&quot;<br>
Dim version As Double<br>
version = sl.version<br>
Name = sl.Property(&quot;Name&quot;)<br>
Count = sl.Property(&quot;Count&quot;)<br>
Length = sl.Property(&quot;Length&quot;)<br>
Dim eu As Boolean<br>
eu = sl.EndUnit<br>
End Sub</p>

<p>A client who was responsible for saving and loading this object would 
 simply call the appropriate Save and Load methods on the object when necessary. 
 This represents the simple case where the client object 'knows' that it 
 owns the object and that it alone is responsible for saving and loading 
 it.</p>

<h2>Persisting COM Objects</h2>

<p>In most COM-based applications, the ownership relationship is often 
 not so simple. Client COM objects can only hold references to other COM 
 objects and usually have no way of knowing if they 'own' the object, or 
 if there are other objects in the system who also hold references to it. 
 This creates a problem: If an object is referenced by more than one client 
 object, how do we know which client should write the object out? How do 
 the other clients know when to create the object when loading it back 
 in? The answers are; we don't, and they can't.</p>

<p>The solution to this problem is to have another object keep track of 
 unique objects in the system and save and load them appropriately. This 
 is exactly what the StructuredSave and StructuredLoad objects do via their 
 Property methods for saving and loading COM objects. When a COM object 
 is saved using the StructuredSave::Property method, the StructuredSave 
 object first checks to see if that object has already been saved (using 
 COM identity rules) to the file. This means that unique objects are only 
 saved once to a file. Similarly, the StructuredLoad object will create 
 a unique object only once and will pass a reference back to all clients 
 of the object. As you can imagine, this greatly simplifies the persistence 
 of COM object hierarchies for you and me.</p>

<p>If you want to make your COM objects persistable via the StructuredStorage2 
 interfaces, they must have the following attributes:</p>

<ol>
	
	<li class=kadov-P><p>They must be creatable. This means that Visual 
 Basic clients can write &quot;Dim xxx as new yyy&quot;, and C++ clients 
 can create them via CoCreateInstance.</p></li>
	
	<li class=kadov-P><p>They must implement the IPersist interface. You 
 can do this in Visual Basic by creating ActiveX objects that have their 
 &quot;Persistable&quot; property set equal to 1. Implementors of C++ objects 
 have to support this method manually, or via ATL's methods. Refer to Microsoft's 
 COM documentation for more information on the IPersist interface.</p></li>
	
	<li class=kadov-P><p>They must implement the IStructuredStorage2 interface.</p></li>
</ol>

<p style="margin-bottom: 0;">Refer to the C++ and Visual Basic example 
 files for examples of using the persistence framework. </p>

</body>

</html>
